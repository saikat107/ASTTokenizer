<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.orm.jpa.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; org.springframework.orm.jpa.EntityTransaction = mock ( EntityTransaction .class ) ; org.springframework.orm.jpa.JpaTransactionManager = new JpaTransactionManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; org.springframework.orm.jpa.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.JpaTransactionManager ) ; given ( org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . getRollbackOnly ( ) ) . willReturn ( true ) ; willThrow ( new RollbackException ( ) ) . given ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; } catch ( TransactionSystemException org.springframework.orm.jpa.TransactionSystemException ) { assertTrue ( org.springframework.orm.jpa.TransactionSystemException . getCause ( ) instanceof RollbackException ) ; } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertEquals ( STRING , java.lang.RuntimeException . java.lang.String ( ) ) ; } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . rollback ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . rollback ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; } } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . setRollbackOnly ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . rollback ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) . willReturn ( true ) ; given ( org.springframework.orm.jpa.EntityTransaction . getRollbackOnly ( ) ) . willReturn ( true ) ; willThrow ( new RollbackException ( ) ) . given ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; } } ) ; fail ( STRING ) ; } catch ( TransactionSystemException org.springframework.orm.jpa.TransactionSystemException ) { assertTrue ( org.springframework.orm.jpa.TransactionSystemException . getCause ( ) instanceof RollbackException ) ; } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . setRollbackOnly ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; given ( org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager , times ( NUMBER ) ) . close ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction , times ( NUMBER ) ) . begin ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ) ; try { java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; } finally { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction , times ( NUMBER ) ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction , times ( NUMBER ) ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; TransactionTemplate org.springframework.orm.jpa.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.JpaTransactionManager ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; TransactionTemplate org.springframework.orm.jpa.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.JpaTransactionManager ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; given ( org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; TransactionTemplate org.springframework.orm.jpa.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.JpaTransactionManager ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; TransactionTemplate org.springframework.orm.jpa.TransactionTemplate = new TransactionTemplate ( org.springframework.orm.jpa.JpaTransactionManager ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; return org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; EntityTransaction org.springframework.orm.jpa.EntityTransaction = mock ( EntityTransaction .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManager ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; TransactionSynchronizationManager . registerSynchronization ( new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( int int ) { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return null ; } } ) ; } } ) ; return null ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; TransactionSynchronizationManager . registerSynchronization ( new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( int int ) { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return null ; } } ) ; } } ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ) ; try { java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; return java.util.List<java.lang.String> ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } finally { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } verify ( org.springframework.orm.jpa.EntityTransaction ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) . willReturn ( true ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } finally { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } verify ( org.springframework.orm.jpa.EntityTransaction ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . rollback ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ) ; try { java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Object ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } finally { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory , new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } finally { TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ; } verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( ! org.springframework.orm.jpa.TransactionStatus . isNewTransaction ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; org.springframework.orm.jpa.TransactionStatus . setRollbackOnly ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; org.springframework.orm.jpa.JpaTransactionManager . setDataSource ( javax.sql.DataSource ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; } } ) ; assertTrue ( java.lang.Object == java.util.List<java.lang.String> ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory ) . flush ( ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.TransactionTemplate . setIsolationLevel ( TransactionDefinition . ISOLATION_SERIALIZABLE ) ; given ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) . willReturn ( true ) ; try { org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) {				} } ) ; fail ( STRING ) ; } catch ( InvalidIsolationLevelException org.springframework.orm.jpa.InvalidIsolationLevelException ) { } verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) {				}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; org.springframework.orm.jpa.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; org.springframework.orm.jpa.TransactionStatus . flush ( ) ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . flush ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.orm.jpa.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; org.springframework.orm.jpa.TransactionStatus . flush ( ) ; }  <METHOD_END>
