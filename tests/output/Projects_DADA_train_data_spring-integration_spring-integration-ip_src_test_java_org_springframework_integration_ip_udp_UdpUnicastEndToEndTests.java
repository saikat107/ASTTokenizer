<METHOD_START> @ Before public void void ( ) { this . java.lang.String = null ; this . org.springframework.integration.ip.udp.Message<byte[]> = null ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . boolean = true ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.InterruptedException , java.lang.Exception { org.springframework.integration.ip.udp.UdpUnicastEndToEndTests org.springframework.integration.ip.udp.UdpUnicastEndToEndTests = new org.springframework.integration.ip.udp.UdpUnicastEndToEndTests ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( org.springframework.integration.ip.udp.UdpUnicastEndToEndTests ) ; java.lang.Thread . void ( ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.ip.udp.UdpUnicastEndToEndTests . int ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; ClassPathXmlApplicationContext org.springframework.integration.ip.udp.ClassPathXmlApplicationContext = org.springframework.integration.ip.udp.ClassPathXmlApplicationContext ( org.springframework.integration.ip.udp.UdpUnicastEndToEndTests , java.lang.String ) ; org.springframework.integration.ip.udp.UdpUnicastEndToEndTests . void ( org.springframework.integration.ip.udp.ClassPathXmlApplicationContext ) ; org.springframework.integration.ip.udp.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.udp.ClassPathXmlApplicationContext org.springframework.integration.ip.udp.ClassPathXmlApplicationContext ( org.springframework.integration.ip.udp.UdpUnicastEndToEndTests org.springframework.integration.ip.udp.UdpUnicastEndToEndTests , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.integration.ip.udp.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( ) ; org.springframework.integration.ip.udp.ClassPathXmlApplicationContext . setConfigLocation ( java.lang.String ) ; StandardEnvironment org.springframework.integration.ip.udp.StandardEnvironment = new StandardEnvironment ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.Integer . java.lang.String ( org.springframework.integration.ip.udp.UdpUnicastEndToEndTests . int ( ) ) ) ; PropertiesPropertySource org.springframework.integration.ip.udp.PropertiesPropertySource = new PropertiesPropertySource ( STRING , java.util.Properties ) ; org.springframework.integration.ip.udp.StandardEnvironment . getPropertySources ( ) . addLast ( org.springframework.integration.ip.udp.PropertiesPropertySource ) ; org.springframework.integration.ip.udp.ClassPathXmlApplicationContext . setEnvironment ( org.springframework.integration.ip.udp.StandardEnvironment ) ; org.springframework.integration.ip.udp.ClassPathXmlApplicationContext . refresh ( ) ; return org.springframework.integration.ip.udp.ClassPathXmlApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.integration.ip.udp.ApplicationContext ) throws java.lang.Exception { DestinationResolver < MessageChannel > org.springframework.integration.ip.udp.DestinationResolver<org.springframework.integration.ip.udp.MessageChannel> = new BeanFactoryChannelResolver ( org.springframework.integration.ip.udp.ApplicationContext ) ; MessageChannel org.springframework.integration.ip.udp.MessageChannel = org.springframework.integration.ip.udp.DestinationResolver<org.springframework.integration.ip.udp.MessageChannel> . resolveDestination ( STRING ) ; if ( ! java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { fail ( STRING ) ; } try { java.lang.String = STRING + new java.util.Date ( ) ; org.springframework.integration.ip.udp.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; try { java.lang.Thread . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } } finally { if ( long == NUMBER ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; } else { boolean = false ; } java.util.concurrent.CountDownLatch . void ( ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( java.lang.String , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) AbstractApplicationContext org.springframework.integration.ip.udp.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.ip.udp.UdpUnicastEndToEndTests .class ) ; UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = org.springframework.integration.ip.udp.AbstractApplicationContext . getBean ( UnicastReceivingChannelAdapter .class ) ; int int = NUMBER ; try { while ( ! org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { throw new java.lang.RuntimeException ( STRING ) ; } } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.RuntimeException ( STRING ) ; } this . int = org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ; while ( boolean ) { try { java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } QueueChannel org.springframework.integration.ip.udp.QueueChannel = org.springframework.integration.ip.udp.AbstractApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( ) ; MessageHistory org.springframework.integration.ip.udp.MessageHistory = MessageHistory . read ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ip.udp.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; try { java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } } org.springframework.integration.ip.udp.AbstractApplicationContext . stop ( ) ; org.springframework.integration.ip.udp.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Exception { long = NUMBER ; new org.springframework.integration.ip.udp.UdpUnicastEndToEndTests ( ) . void ( ) ; new org.springframework.integration.ip.udp.UdpUnicastEndToEndTests ( ) . void ( ) ; }  <METHOD_END>
