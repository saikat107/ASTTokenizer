<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( java.lang.String java.lang.String ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.ConditionalOperatorFactory ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ... org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator[] ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> < org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator > java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = null ; this . org.springframework.data.mongodb.core.aggregation.CriteriaDefinition = null ; }  <METHOD_END>
<METHOD_START> public void ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; this . java.lang.String = null ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; this . org.springframework.data.mongodb.core.aggregation.CriteriaDefinition = null ; }  <METHOD_END>
<METHOD_START> public void ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition , STRING ) ; this . java.lang.String = null ; this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = null ; this . org.springframework.data.mongodb.core.aggregation.CriteriaDefinition = org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( ) { if ( boolean ( ) ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.WhenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( java.lang.String ) ; } return boolean ( ) ? org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.WhenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) : org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.WhenBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . java.lang.String != null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . org.springframework.data.mongodb.core.aggregation.CriteriaDefinition != null ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.IfNullOperatorBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.IfNullOperatorBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; if ( java.lang.Object instanceof Field ) { java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( ( Field ) java.lang.Object ) . toString ( ) ) ; } else if ( java.lang.Object instanceof AggregationExpression ) { java.util.List<java.lang.Object> . boolean ( ( ( AggregationExpression ) java.lang.Object ) . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; } else { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } java.util.List<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; return new Document ( STRING , java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { if ( java.lang.Object instanceof Field ) { return org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( ( Field ) java.lang.Object ) . toString ( ) ; } else if ( java.lang.Object instanceof AggregationExpression ) { return ( ( AggregationExpression ) java.lang.Object ) . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } else if ( java.lang.Object instanceof Document ) { return java.lang.Object ; } return org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getMappedObject ( new Document ( STRING , java.lang.Object ) ) . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression );  <METHOD_END>
<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.IfNullOperatorBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.IfNullOperatorBuilder ( ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.IfNullOperatorBuilder ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.Object = Fields . field ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; this . java.lang.Object = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.Object java.lang.Object ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.Object , Fields . field ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.IfNull ( java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> private void ( java . util . java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ... org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator[] ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator[] , STRING ) ; return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> < org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator > java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> < org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator > ( java.util.List<org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator> ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( java.lang.Object java.lang.Object ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch ( append ( STRING , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private void ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression , java.lang.Object java.lang.Object ) { this . org.springframework.data.mongodb.core.aggregation.AggregationExpression = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator.ThenBuilder ( final AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator.ThenBuilder ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , java.lang.Object ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationExpression . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; if ( java.lang.Object instanceof AggregationExpression ) { org.springframework.data.mongodb.core.aggregation.Document . put ( STRING , ( ( AggregationExpression ) java.lang.Object ) . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; } else if ( java.lang.Object instanceof Field ) { org.springframework.data.mongodb.core.aggregation.Document . put ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( ( Field ) java.lang.Object ) . toString ( ) ) ; } else { org.springframework.data.mongodb.core.aggregation.Document . put ( STRING , java.lang.Object ) ; } return org.springframework.data.mongodb.core.aggregation.Document ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Switch.CaseOperator ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> private void ( Field org.springframework.data.mongodb.core.aggregation.Field , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this( ( java.lang.Object ) org.springframework.data.mongodb.core.aggregation.Field , java.lang.Object , java.lang.Object ); }  <METHOD_END>
<METHOD_START> private void ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this( ( java.lang.Object ) org.springframework.data.mongodb.core.aggregation.CriteriaDefinition , java.lang.Object , java.lang.Object ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; void ( java.lang.Object , STRING ) ; void ( java.lang.Object , STRING ) ; void ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) ; org.springframework.data.mongodb.core.aggregation.Document . append ( STRING , java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ) ) ; org.springframework.data.mongodb.core.aggregation.Document . append ( STRING , java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ) ) ; org.springframework.data.mongodb.core.aggregation.Document . append ( STRING , java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ) ) ; return new Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Document || java.lang.Object instanceof Field ) { return java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ) ; } if ( java.lang.Object instanceof AggregationExpression ) { return ( ( AggregationExpression ) java.lang.Object ) . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } return org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getMappedObject ( new Document ( STRING , java.lang.Object ) ) . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Document || java.lang.Object instanceof Field ) { return java.lang.Object ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object ) ; } if ( java.lang.Object instanceof AggregationExpression ) { return ( ( AggregationExpression ) java.lang.Object ) . toDocument ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; } if ( java.lang.Object instanceof CriteriaDefinition ) { Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getMappedObject ( ( ( CriteriaDefinition ) java.lang.Object ) . getCriteriaObject ( ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , org.springframework.data.mongodb.core.aggregation.Document ) ) ; return java.util.List<java.lang.Object> . int ( ) == NUMBER ? java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) : java.util.List<java.lang.Object> ; } throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , Document org.springframework.data.mongodb.core.aggregation.Document ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.aggregation.Document . keySet ( ) ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.String , java.lang.Object ) ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; if ( java.lang.Object instanceof java.util.List ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : ( java.util.List<?> < ? > ) java.lang.Object ) { if ( java.lang.Object instanceof Document ) { java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , ( Document ) java.lang.Object ) ) ; } } java.util.List<java.lang.Object> . boolean ( new Document ( java.lang.String , java.util.List<java.lang.Object> ) ) ; } else if ( java.lang.Object instanceof Document ) { Document org.springframework.data.mongodb.core.aggregation.Document = ( Document ) java.lang.Object ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.aggregation.Document . keySet ( ) ) { if ( ! boolean ( java.lang.String ) ) { continue; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( STRING + java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) ) ; java.util.List<java.lang.Object> . boolean ( new Document ( java.lang.String , java.util.List<java.lang.Object> ) ) ; } } else if ( ! boolean ( java.lang.String ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( STRING + java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; java.util.List<java.lang.Object> . boolean ( new Document ( STRING , java.util.List<java.lang.Object> ) ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Document ) { return org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getMappedObject ( ( Document ) java.lang.Object ) ; } return org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( ( Field ) java.lang.Object ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . isTrue ( ! ClassUtils . isAssignableValue ( org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder .class , java.lang.Object ) , java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.WhenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.WhenBuilder ( ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( Document org.springframework.data.mongodb.core.aggregation.Document ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( org.springframework.data.mongodb.core.aggregation.Document ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) { return org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) . org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( Document org.springframework.data.mongodb.core.aggregation.Document );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression );  <METHOD_END>
<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) { return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ConditionalExpressionBuilder ( Document org.springframework.data.mongodb.core.aggregation.Document ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; this . java.lang.Object = org.springframework.data.mongodb.core.aggregation.Document ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition , STRING ) ; this . java.lang.Object = org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; this . java.lang.Object = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.ThenBuilder ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.Object = Fields . field ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.Object = Fields . field ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond.OtherwiseBuilder ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; this . java.lang.Object = org.springframework.data.mongodb.core.aggregation.AggregationExpression ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.Object , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.Object , java.lang.Object , Fields . field ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.ConditionalOperators.Cond ( java.lang.Object , java.lang.Object , org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
