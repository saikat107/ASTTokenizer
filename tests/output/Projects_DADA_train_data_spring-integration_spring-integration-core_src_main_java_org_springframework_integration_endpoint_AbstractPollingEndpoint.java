<METHOD_START> public void ( ) { this . setPhase ( java.lang.Integer . int / NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = ( java.util.concurrent.Executor != null ? java.util.concurrent.Executor : new SyncTaskExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Trigger org.springframework.integration.endpoint.Trigger ) { this . org.springframework.integration.endpoint.Trigger = ( org.springframework.integration.endpoint.Trigger != null ? org.springframework.integration.endpoint.Trigger : new PeriodicTrigger ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.endpoint.Advice> < Advice > java.util.List<org.springframework.integration.endpoint.Advice> ) { this . java.util.List<org.springframework.integration.endpoint.Advice> = java.util.List<org.springframework.integration.endpoint.Advice> ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.integration.endpoint.ErrorHandler ) { this . org.springframework.integration.endpoint.ErrorHandler = org.springframework.integration.endpoint.ErrorHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionSynchronizationFactory org.springframework.integration.endpoint.TransactionSynchronizationFactory ) { this . org.springframework.integration.endpoint.TransactionSynchronizationFactory = org.springframework.integration.endpoint.TransactionSynchronizationFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.endpoint.MessageChannel org.springframework.integration.endpoint.MessageChannel ( ) { if ( ! this . boolean && this . org.springframework.integration.endpoint.ErrorHandler instanceof MessagePublishingErrorHandler ) { return ( ( MessagePublishingErrorHandler ) this . org.springframework.integration.endpoint.ErrorHandler ) . getDefaultErrorChannel ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Advice org.springframework.integration.endpoint.Advice ) { return false ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Collection<org.springframework.integration.endpoint.Advice> < Advice > java.util.Collection<org.springframework.integration.endpoint.Advice> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } Assert . notNull ( this . org.springframework.integration.endpoint.Trigger , STRING ) ; if ( this . java.util.concurrent.Executor != null ) { if ( ! ( this . java.util.concurrent.Executor instanceof ErrorHandlingTaskExecutor ) ) { if ( this . org.springframework.integration.endpoint.ErrorHandler == null ) { Assert . notNull ( this . getBeanFactory ( ) , STRING ) ; this . org.springframework.integration.endpoint.ErrorHandler = new MessagePublishingErrorHandler ( new BeanFactoryChannelResolver ( getBeanFactory ( ) ) ) ; this . boolean = true ; } this . java.util.concurrent.Executor = new ErrorHandlingTaskExecutor ( this . java.util.concurrent.Executor , this . org.springframework.integration.endpoint.ErrorHandler ) ; } } if ( this . org.springframework.integration.endpoint.TransactionSynchronizationFactory == null && this . java.util.List<org.springframework.integration.endpoint.Advice> != null ) { if ( this . java.util.List<org.springframework.integration.endpoint.Advice> . stream ( ) . anyMatch ( TransactionInterceptor .class :: boolean ) ) { this . org.springframework.integration.endpoint.TransactionSynchronizationFactory = new PassThroughTransactionSynchronizationFactory ( ) ; } } this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Runnable java.lang.Runnable ( ) java.lang.Exception { java.util.List<org.springframework.integration.endpoint.Advice> < Advice > java.util.List<org.springframework.integration.endpoint.Advice> = null ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.endpoint.Advice> ) ) { java.util.List<org.springframework.integration.endpoint.Advice> = this . java.util.List<org.springframework.integration.endpoint.Advice> . stream ( ) . filter ( this :: boolean ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; } java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.Callable<java.lang.Boolean> = this :: boolean ; java.util.List<org.springframework.integration.endpoint.Advice> < Advice > java.util.List<org.springframework.integration.endpoint.Advice> = this . java.util.List<org.springframework.integration.endpoint.Advice> ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.integration.endpoint.Advice> ) ) { ProxyFactory org.springframework.integration.endpoint.ProxyFactory = new ProxyFactory ( java.util.concurrent.Callable<java.lang.Boolean> ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.integration.endpoint.Advice> ) ) { java.util.List<org.springframework.integration.endpoint.Advice> . stream ( ) . filter ( advice -> ! isReceiveOnlyAdvice ( advice ) ) . forEach ( org.springframework.integration.endpoint.ProxyFactory :: addAdvice ) ; } java.util.concurrent.Callable<java.lang.Boolean> = ( java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > ) org.springframework.integration.endpoint.ProxyFactory . getProxy ( this . java.lang.ClassLoader ) ; } if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.integration.endpoint.Advice> ) ) { void ( java.util.List<org.springframework.integration.endpoint.Advice> ) ; } return new org.springframework.integration.endpoint.AbstractPollingEndpoint.Poller ( java.util.concurrent.Callable<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( ! this . boolean ) { this . void ( ) ; } Assert . state ( this . getTaskScheduler ( ) != null , STRING ) ; try { this . java.lang.Runnable = java.lang.Runnable ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . boolean = false ; throw new MessagingException ( STRING , java.lang.Exception ) ; } this . java.util.concurrent.ScheduledFuture<?> = this . getTaskScheduler ( ) . schedule ( this . java.lang.Runnable , this . org.springframework.integration.endpoint.Trigger ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } this . java.util.concurrent.ScheduledFuture<?> = null ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = this . org.springframework.integration.endpoint.IntegrationResourceHolder ( this . java.lang.String ( ) , this . java.lang.Object ( ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = null ; try { org.springframework.integration.endpoint.Message<?> = this . org.springframework.integration.endpoint.Message<?> ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Thread . boolean ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } return false ; } else { throw ( java.lang.RuntimeException ) java.lang.Exception ; } } boolean boolean ; if ( org.springframework.integration.endpoint.Message<> == null ) { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING ) ; } boolean = false ; } else { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + org.springframework.integration.endpoint.Message<> ) ; } if ( org.springframework.integration.endpoint.IntegrationResourceHolder != null ) { org.springframework.integration.endpoint.IntegrationResourceHolder . setMessage ( org.springframework.integration.endpoint.Message<> ) ; } this . void ( org.springframework.integration.endpoint.Message<> ) ; boolean = true ; } return boolean ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( Message < ? > org.springframework.integration.endpoint.Message<?> );  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.endpoint.IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( this . org.springframework.integration.endpoint.TransactionSynchronizationFactory != null && java.lang.Object != null && TransactionSynchronizationManager . isActualTransactionActive ( ) ) { TransactionSynchronization org.springframework.integration.endpoint.TransactionSynchronization = this . org.springframework.integration.endpoint.TransactionSynchronizationFactory . create ( java.lang.Object ) ; TransactionSynchronizationManager . registerSynchronization ( org.springframework.integration.endpoint.TransactionSynchronization ) ; if ( org.springframework.integration.endpoint.TransactionSynchronization instanceof IntegrationResourceHolderSynchronization ) { IntegrationResourceHolderSynchronization org.springframework.integration.endpoint.IntegrationResourceHolderSynchronization = ( ( IntegrationResourceHolderSynchronization ) org.springframework.integration.endpoint.TransactionSynchronization ) ; org.springframework.integration.endpoint.IntegrationResourceHolderSynchronization . setShouldUnbindAtCompletion ( false ) ; IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = org.springframework.integration.endpoint.IntegrationResourceHolderSynchronization . getResourceHolder ( ) ; if ( java.lang.String != null ) { org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( java.lang.String , java.lang.Object ) ; } return org.springframework.integration.endpoint.IntegrationResourceHolder ; } } return null ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.Callable<java.lang.Boolean> ) { this . java.util.concurrent.Callable<java.lang.Boolean> = java.util.concurrent.Callable<java.lang.Boolean> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.integration.endpoint.AbstractPollingEndpoint .this . java.util.concurrent.Executor . void ( ( ) { int int = NUMBER ; while ( org.springframework.integration.endpoint.AbstractPollingEndpoint .this . boolean && ( org.springframework.integration.endpoint.AbstractPollingEndpoint .this . long <= NUMBER || int < org.springframework.integration.endpoint.AbstractPollingEndpoint .this . long ) ) { try { if ( ! org.springframework.integration.endpoint.AbstractPollingEndpoint.Poller .this . java.util.concurrent.Callable<java.lang.Boolean> . java.lang.Boolean ( ) ) { break; } int ++ ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } else { Message < ? > org.springframework.integration.endpoint.Message<?> = null ; if ( org.springframework.integration.endpoint.AbstractPollingEndpoint .this . org.springframework.integration.endpoint.TransactionSynchronizationFactory != null ) { java.lang.Object java.lang.Object = TransactionSynchronizationManager . getResource ( java.lang.Object ( ) ) ; if ( java.lang.Object instanceof IntegrationResourceHolder ) { org.springframework.integration.endpoint.Message<?> = ( ( IntegrationResourceHolder ) java.lang.Object ) . getMessage ( ) ; } } throw new MessagingException ( org.springframework.integration.endpoint.Message<> , java.lang.Exception ) ; } } finally { if ( org.springframework.integration.endpoint.AbstractPollingEndpoint .this . org.springframework.integration.endpoint.TransactionSynchronizationFactory != null ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( TransactionSynchronizationManager . hasResource ( java.lang.Object ) ) { TransactionSynchronizationManager . unbindResource ( java.lang.Object ) ; } } } } } ) ; }  <METHOD_END>
