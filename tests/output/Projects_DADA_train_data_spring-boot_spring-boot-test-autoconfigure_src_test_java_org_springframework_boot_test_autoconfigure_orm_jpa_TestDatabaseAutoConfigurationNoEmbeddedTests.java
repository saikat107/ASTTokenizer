<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext != null ) { this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { void ( org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfigurationNoEmbeddedTests.ExistingDataSourceConfiguration .class ) ; } catch ( BeanCreationException org.springframework.boot.test.autoconfigure.orm.jpa.BeanCreationException ) { java.lang.String java.lang.String = org.springframework.boot.test.autoconfigure.orm.jpa.BeanCreationException . getMessage ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING + STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfigurationNoEmbeddedTests.ExistingDataSourceConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext . getBeansOfType ( javax.sql.DataSource .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isSameAs ( this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext = org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext ( java.lang.Class<> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext org.springframework.boot.test.autoconfigure.orm.jpa.ConfigurableApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . register ( TestDatabaseAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.test.autoconfigure.orm.jpa.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return mock ( javax.sql.DataSource .class ) ; }  <METHOD_END>
