<METHOD_START> void ( OptionalLiveReloadServer org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , ClientHttpRequestFactory org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , STRING ) ; Assert . hasLength ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer = org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer ; this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory = org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ; try { this . java.net.URI = new java.net.URI ( java.lang.String ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( long long , long long , long long ) { this . long = long ; this . long = long ; this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( this . long ) ; long long = java.lang.System . long ( ) ; while ( ! boolean ( ) ) { long long = java.lang.System . long ( ) - long ; if ( long > this . long ) { return; } java.lang.Thread . void ( this . long ) ; } org.springframework.boot.devtools.remote.client.Log . info ( STRING ) ; this . org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer . triggerReload ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { ClientHttpRequest org.springframework.boot.devtools.remote.client.ClientHttpRequest = org.springframework.boot.devtools.remote.client.ClientHttpRequest ( ) ; ClientHttpResponse org.springframework.boot.devtools.remote.client.ClientHttpResponse = org.springframework.boot.devtools.remote.client.ClientHttpRequest . execute ( ) ; return org.springframework.boot.devtools.remote.client.ClientHttpResponse . getStatusCode ( ) == HttpStatus . OK ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClientHttpRequest org.springframework.boot.devtools.remote.client.ClientHttpRequest ( ) java.io.IOException { return this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory . createRequest ( this . java.net.URI , HttpMethod . GET ) ; }  <METHOD_END>
