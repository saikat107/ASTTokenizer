<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; new DelegatingFilterProxyRegistrationBean ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; new DelegatingFilterProxyRegistrationBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new DelegatingFilterProxyRegistrationBean ( STRING ) . getOrDeduceName ( null ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DelegatingFilterProxyRegistrationBean org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean = org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean ( ) ; Filter org.springframework.boot.web.servlet.Filter = org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean . getFilter ( ) ; assertThat ( org.springframework.boot.web.servlet.Filter ) . isInstanceOf ( DelegatingFilterProxy .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.web.servlet.Filter , STRING ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.GenericWebApplicationContext ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.web.servlet.Filter , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.MockFilter .class ) ) ; DelegatingFilterProxyRegistrationBean org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean = org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean ( ) ; Filter org.springframework.boot.web.servlet.Filter = org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean . getFilter ( ) ; org.springframework.boot.web.servlet.Filter . init ( new MockFilterConfig ( ) ) ; assertThat ( java.lang.ThreadLocal<java.lang.Boolean> . java.lang.Boolean ( ) ) . isNull ( ) ; org.springframework.boot.web.servlet.Filter . doFilter ( new MockHttpServletRequest ( ) , new MockHttpServletResponse ( ) , new MockFilterChain ( ) ) ; assertThat ( java.lang.ThreadLocal<java.lang.Boolean> . java.lang.Boolean ( ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . thrown . expect ( java.lang.IllegalArgumentException .class ) ; this . thrown . expectMessage ( STRING ) ; new DelegatingFilterProxyRegistrationBean ( STRING , ( ServletRegistrationBean [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean ( org.springframework.boot.web.servlet.ServletRegistrationBean<?> < ? > ... org.springframework.boot.web.servlet.ServletRegistrationBean<?>[] ) { DelegatingFilterProxyRegistrationBean org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean = new DelegatingFilterProxyRegistrationBean ( STRING , org.springframework.boot.web.servlet.ServletRegistrationBean<?>[] ) ; org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean . setApplicationContext ( this . org.springframework.boot.web.servlet.GenericWebApplicationContext ) ; return org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.Filter org.springframework.boot.web.servlet.Filter ( ) { return isA ( DelegatingFilterProxy .class ) ; }  <METHOD_END>
<METHOD_START> void ( ) { java.lang.ThreadLocal<java.lang.Boolean> . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.ServletRequest , ServletResponse org.springframework.boot.web.servlet.ServletResponse , FilterChain org.springframework.boot.web.servlet.FilterChain ) throws java.io.IOException , org.springframework.boot.web.servlet.ServletException {		}  <METHOD_END>
