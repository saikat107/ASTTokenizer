<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext = new StaticApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . setParent ( org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new EndpointMvcAdapter ( new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) . iterator ( ) . next ( ) . getPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.OtherTestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestEndpoint ( ) ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . afterPropertiesSet ( ) ; assertThat ( this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointsTests.TestMvcEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> void ( Endpoint < ? > org.springframework.boot.actuate.endpoint.mvc.Endpoint<?> ) { super( org.springframework.boot.actuate.endpoint.mvc.Endpoint<> ); }  <METHOD_END>
<METHOD_START> void ( Endpoint < ? > org.springframework.boot.actuate.endpoint.mvc.Endpoint<?> ) { super( org.springframework.boot.actuate.endpoint.mvc.Endpoint<> ); }  <METHOD_END>
