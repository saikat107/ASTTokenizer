<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new QSort ( ( java.util.List<org.springframework.data.querydsl.OrderSpecifier<?>> < OrderSpecifier < ? > > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . ASC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) , user . lastname . desc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . lastname . desc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) ) . and ( new QSort ( user . lastname . desc ( ) ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . lastname . desc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) ) . and ( user . lastname . desc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderSpecifiers ( ) . get ( NUMBER ) ) . isEqualTo ( user . lastname . desc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.QSort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) , user . lastname . desc ( ) ) ; Sort org.springframework.data.querydsl.Sort = org.springframework.data.querydsl.QSort ; assertThat ( org.springframework.data.querydsl.Sort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.Sort . getOrderFor ( STRING ) ) . isEqualTo ( new Sort . Sort ( Sort . Direction . DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . firstname . asc ( ) ) ; Sort org.springframework.data.querydsl.Sort = org.springframework.data.querydsl.QSort . and ( Sort . by ( Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.Sort ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.Sort ) . contains ( new Order ( Direction . ASC , STRING ) , new Order ( Direction . ASC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QUser org.springframework.data.querydsl.QUser = QUser . user ; QSort org.springframework.data.querydsl.QSort = new QSort ( user . dateOfBirth . yearMonth ( ) . asc ( ) ) ; Sort org.springframework.data.querydsl.Sort = org.springframework.data.querydsl.QSort . and ( Sort . by ( Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.querydsl.Sort ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.querydsl.Sort ) . contains ( new Order ( Direction . ASC , STRING ) , new Order ( Direction . ASC , user . dateOfBirth . yearMonth ( ) . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QSort org.springframework.data.querydsl.QSort = new QSort ( userWrapper . user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort ) . contains ( new Order ( Direction . ASC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QSort org.springframework.data.querydsl.QSort = new QSort ( wrapperForUserWrapper . wrapper . user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort ) . contains ( new Order ( Direction . ASC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QSort org.springframework.data.querydsl.QSort = new QSort ( wrapperToWrapWrapperForUserWrapper . wrapperForUserWrapper . wrapper . user . firstname . asc ( ) ) ; assertThat ( org.springframework.data.querydsl.QSort ) . contains ( new Order ( Direction . ASC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringPath org.springframework.data.querydsl.StringPath = new PathBuilderFactory ( ) . create ( User .class ) . getString ( STRING ) ; QSort org.springframework.data.querydsl.QSort = new QSort ( new OrderSpecifier <> ( com . com.querydsl . com.querydsl . types . Order . ASC , org.springframework.data.querydsl.StringPath ) ) ; assertThat ( org.springframework.data.querydsl.QSort ) . contains ( new Order ( Direction . ASC , STRING ) ) ; }  <METHOD_END>
