<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.integration.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.config.BeansException { BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.integration.config.ConfigurableListableBeanFactory ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> = new ManagedList < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( ) ; for ( java.lang.String java.lang.String : org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ) { BeanDefinition org.springframework.integration.config.BeanDefinition = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( IdempotentReceiverInterceptor .class . java.lang.String ( ) . boolean ( org.springframework.integration.config.BeanDefinition . getBeanClassName ( ) ) ) { java.lang.Object java.lang.Object = org.springframework.integration.config.BeanDefinition . removeAttribute ( java.lang.String ) ; Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new ManagedMap < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , org.springframework.integration.config.ConfigurableListableBeanFactory . resolveEmbeddedValue ( java.lang.String ) + IntegrationConfigUtils . HANDLER_ALIAS_SUFFIX ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> . boolean ( java.util.Map<java.lang.String,java.lang.String> ) ; } } else if ( org.springframework.integration.config.BeanDefinition instanceof AnnotatedBeanDefinition ) { if ( org.springframework.integration.config.BeanDefinition . getSource ( ) instanceof MethodMetadata ) { MethodMetadata org.springframework.integration.config.MethodMetadata = ( MethodMetadata ) org.springframework.integration.config.BeanDefinition . getSource ( ) ; java.lang.String java.lang.String = IdempotentReceiver .class . java.lang.String ( ) ; if ( org.springframework.integration.config.MethodMetadata . isAnnotated ( java.lang.String ) ) { java.lang.Object java.lang.Object = org.springframework.integration.config.MethodMetadata . getAnnotationAttributes ( java.lang.String ) . get ( STRING ) ; if ( java.lang.Object != null ) { java.lang.Class<?> < ? > java.lang.Class<?> ; if ( org.springframework.integration.config.MethodMetadata instanceof StandardMethodMetadata ) { java.lang.Class<?> = ( ( StandardMethodMetadata ) org.springframework.integration.config.MethodMetadata ) . getIntrospectedMethod ( ) . getReturnType ( ) ; } else { try { java.lang.Class<?> = ClassUtils . forName ( org.springframework.integration.config.MethodMetadata . getReturnTypeName ( ) , org.springframework.integration.config.ConfigurableListableBeanFactory . getBeanClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new CannotLoadBeanClassException ( org.springframework.integration.config.BeanDefinition . getDescription ( ) , java.lang.String , org.springframework.integration.config.MethodMetadata . getReturnTypeName ( ) , java.lang.ClassNotFoundException ) ; } } java.lang.String java.lang.String = java.lang.String ; if ( ! MessageHandler .class . boolean ( java.lang.Class<> ) ) { java.lang.String = org.springframework.integration.config.BeanDefinition . getFactoryBeanName ( ) + STRING + java.lang.String + STRING + IntegrationConfigUtils . HANDLER_ALIAS_SUFFIX ; } java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.lang.Object ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new ManagedMap < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> . boolean ( java.util.Map<java.lang.String,java.lang.String> ) ; } } } } } } if ( ! java.util.List<java.util.Map<java.lang.String,java.lang.String>> . boolean ( ) ) { BeanDefinition org.springframework.integration.config.BeanDefinition = BeanDefinitionBuilder . rootBeanDefinition ( IdempotentReceiverAutoProxyCreator .class ) . addPropertyValue ( STRING , java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) . getBeanDefinition ( ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.integration.config.BeanDefinition ) ; } }  <METHOD_END>
