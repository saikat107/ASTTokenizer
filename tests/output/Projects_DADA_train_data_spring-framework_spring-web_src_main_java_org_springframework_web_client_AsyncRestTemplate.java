<METHOD_START> public void ( ) { this( new SimpleAsyncTaskExecutor ( ) ); }  <METHOD_END>
<METHOD_START> public void ( AsyncListenableTaskExecutor org.springframework.web.client.AsyncListenableTaskExecutor ) { Assert . notNull ( org.springframework.web.client.AsyncListenableTaskExecutor , STRING ) ; SimpleClientHttpRequestFactory org.springframework.web.client.SimpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory ( ) ; org.springframework.web.client.SimpleClientHttpRequestFactory . setTaskExecutor ( org.springframework.web.client.AsyncListenableTaskExecutor ) ; this . org.springframework.web.client.RestTemplate = new RestTemplate ( org.springframework.web.client.SimpleClientHttpRequestFactory ) ; setAsyncRequestFactory ( org.springframework.web.client.SimpleClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> public void ( org . springframework . org.springframework.http . org.springframework.http . org.springframework.http org.springframework.http.client.AsyncClientHttpRequestFactory ) { this( org.springframework.http.client.AsyncClientHttpRequestFactory , ( ClientHttpRequestFactory ) org.springframework.http.client.AsyncClientHttpRequestFactory ); }  <METHOD_END>
<METHOD_START> public void ( org . springframework . org.springframework.http . org.springframework.http . org.springframework.http org.springframework.http.client.AsyncClientHttpRequestFactory , ClientHttpRequestFactory org.springframework.web.client.ClientHttpRequestFactory ) { this( org.springframework.http.client.AsyncClientHttpRequestFactory , new RestTemplate ( org.springframework.web.client.ClientHttpRequestFactory ) ); }  <METHOD_END>
<METHOD_START> public void ( org . springframework . org.springframework.http . org.springframework.http . org.springframework.http org.springframework.http.client.AsyncClientHttpRequestFactory , RestTemplate org.springframework.web.client.RestTemplate ) { Assert . notNull ( org.springframework.web.client.RestTemplate , STRING ) ; this . org.springframework.web.client.RestTemplate = org.springframework.web.client.RestTemplate ; setAsyncRequestFactory ( org.springframework.http.client.AsyncClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( ResponseErrorHandler org.springframework.web.client.ResponseErrorHandler ) { this . org.springframework.web.client.RestTemplate . setErrorHandler ( org.springframework.web.client.ResponseErrorHandler ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.client.ResponseErrorHandler org.springframework.web.client.ResponseErrorHandler ( ) { return this . org.springframework.web.client.RestTemplate . getErrorHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { UriTemplateHandler org.springframework.web.client.UriTemplateHandler = this . org.springframework.web.client.RestTemplate . getUriTemplateHandler ( ) ; if ( org.springframework.web.client.UriTemplateHandler instanceof DefaultUriBuilderFactory ) { ( ( DefaultUriBuilderFactory ) org.springframework.web.client.UriTemplateHandler ) . setDefaultUriVariables ( java.util.Map<java.lang.String,> ) ; } else if ( org.springframework.web.client.UriTemplateHandler instanceof org . springframework . web . org.springframework.web.util . org.springframework.web.util ) { ( ( org . springframework . web . org.springframework.web.util . org.springframework.web.util ) org.springframework.web.client.UriTemplateHandler ) . setDefaultUriVariables ( java.util.Map<java.lang.String,> ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( UriTemplateHandler org.springframework.web.client.UriTemplateHandler ) { this . org.springframework.web.client.RestTemplate . setUriTemplateHandler ( org.springframework.web.client.UriTemplateHandler ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.client.UriTemplateHandler org.springframework.web.client.UriTemplateHandler ( ) { return this . org.springframework.web.client.RestTemplate . getUriTemplateHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.RestOperations org.springframework.web.client.RestOperations ( ) { return this . org.springframework.web.client.RestTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { this . org.springframework.web.client.RestTemplate . setMessageConverters ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) { return this . org.springframework.web.client.RestTemplate . getMessageConverters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . GET , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . GET , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.net.URI java.net.URI , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . GET , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.net.URI> < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.lang.Object[] ) ; return org.springframework.web.client.ListenableFuture<java.net.URI> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.net.URI> < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> )			throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.util.Map<java.lang.String,> ) ; return org.springframework.web.client.ListenableFuture<java.net.URI> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.net.URI> < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> ( java.net.URI java.net.URI , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ) ; return org.springframework.web.client.ListenableFuture<java.net.URI> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.client.ListenableFuture<java.net.URI> < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> ( ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) { return new ListenableFutureAdapter < java.net.URI , HttpHeaders > ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) { @ java.lang.Override protected java.net.URI java.net.URI ( HttpHeaders org.springframework.web.client.HttpHeaders ) throws java.util.concurrent.ExecutionException { return org.springframework.web.client.HttpHeaders . getLocation ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URI java.net.URI ( HttpHeaders org.springframework.web.client.HttpHeaders ) throws java.util.concurrent.ExecutionException { return org.springframework.web.client.HttpHeaders . getLocation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.net.URI java.net.URI , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . POST , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . PUT , org.springframework.web.client.AsyncRequestCallback , null , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . PUT , org.springframework.web.client.AsyncRequestCallback , null , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.net.URI java.net.URI , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . PUT , org.springframework.web.client.AsyncRequestCallback , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . DELETE , null , null , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { return org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . DELETE , null , null , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<?> < ? > org.springframework.web.client.ListenableFuture<?> ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { return org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . DELETE , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.lang.Object[] ) ; return org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.lang.String , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.util.Map<java.lang.String,> ) ; return org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ListenableFuture ( java.net.URI , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ) ; return org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ( ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) { return new ListenableFutureAdapter < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > , HttpHeaders > ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) { @ java.lang.Override protected java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ( HttpHeaders org.springframework.web.client.HttpHeaders ) throws java.util.concurrent.ExecutionException { return org.springframework.web.client.HttpHeaders . getAllow ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ( HttpHeaders org.springframework.web.client.HttpHeaders ) throws java.util.concurrent.ExecutionException { return org.springframework.web.client.HttpHeaders . getAllow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return org.springframework.web.client.ListenableFuture ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<T>> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback = org.springframework.web.client.AsyncRequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<T> < T > org.springframework.web.client.ListenableFuture<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { java.net.URI java.net.URI = org.springframework.web.client.UriTemplateHandler ( ) . expand ( java.lang.String , java.lang.Object[] ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<T> < T > org.springframework.web.client.ListenableFuture<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { java.net.URI java.net.URI = org.springframework.web.client.UriTemplateHandler ( ) . expand ( java.lang.String , java.util.Map<java.lang.String,> ) ; return org.springframework.web.client.ListenableFuture ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ListenableFuture<T> < T > org.springframework.web.client.ListenableFuture<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> ) throws org.springframework.web.client.RestClientException { return org.springframework.web.client.ListenableFuture ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.AsyncRequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.ListenableFuture<T> < T > org.springframework.web.client.ListenableFuture<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> ) throws org.springframework.web.client.RestClientException { Assert . notNull ( java.net.URI , STRING ) ; Assert . notNull ( org.springframework.web.client.HttpMethod , STRING ) ; try { org . springframework . org.springframework.http . org.springframework.http . org.springframework.http org.springframework.http.client.AsyncClientHttpRequest = createAsyncRequest ( java.net.URI , org.springframework.web.client.HttpMethod ) ; if ( org.springframework.web.client.AsyncRequestCallback != null ) { org.springframework.web.client.AsyncRequestCallback . doWithRequest ( org.springframework.http.client.AsyncClientHttpRequest ) ; } ListenableFuture < ClientHttpResponse > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> = org.springframework.http.client.AsyncClientHttpRequest . executeAsync ( ) ; return new org.springframework.web.client.AsyncRestTemplate.ResponseExtractorFuture <> ( org.springframework.web.client.HttpMethod , java.net.URI , org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> , org.springframework.web.client.ResponseExtractor<T> ) ; } catch ( java.io.IOException java.io.IOException ) { throw new ResourceAccessException ( STRING + org.springframework.web.client.HttpMethod . name ( ) + STRING + java.net.URI + STRING + java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.client.HttpMethod , java.net.URI java.net.URI , ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) { if ( logger . isDebugEnabled ( ) ) { try { logger . debug ( STRING + org.springframework.web.client.HttpMethod . name ( ) + STRING + java.net.URI + STRING + org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) + STRING + org.springframework.web.client.ClientHttpResponse . getStatusText ( ) + STRING ) ; } catch ( java.io.IOException java.io.IOException ) { } } }  <METHOD_END>
<METHOD_START> private void void ( HttpMethod org.springframework.web.client.HttpMethod , java.net.URI java.net.URI , ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { if ( logger . isWarnEnabled ( ) ) { try { logger . warn ( STRING + org.springframework.web.client.HttpMethod . name ( ) + STRING + java.net.URI + STRING + org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) + STRING + org.springframework.web.client.ClientHttpResponse . getStatusText ( ) + STRING ) ; } catch ( java.io.IOException java.io.IOException ) { } } org.springframework.web.client.ResponseErrorHandler ( ) . handleError ( org.springframework.web.client.ClientHttpResponse ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.web.client.AsyncRestTemplate.AsyncRequestCallbackAdapter ( this . org.springframework.web.client.RestTemplate . acceptHeaderRequestCallback ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback ( HttpEntity < T > org.springframework.web.client.HttpEntity<T> ) { return new org.springframework.web.client.AsyncRestTemplate.AsyncRequestCallbackAdapter ( this . org.springframework.web.client.RestTemplate . httpEntityCallback ( org.springframework.web.client.HttpEntity<T> ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.AsyncRequestCallback org.springframework.web.client.AsyncRequestCallback ( HttpEntity < T > org.springframework.web.client.HttpEntity<T> , java.lang.reflect.Type java.lang.reflect.Type ) { return new org.springframework.web.client.AsyncRestTemplate.AsyncRequestCallbackAdapter ( this . org.springframework.web.client.RestTemplate . httpEntityCallback ( org.springframework.web.client.HttpEntity<T> , java.lang.reflect.Type ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ( java.lang.reflect.Type java.lang.reflect.Type ) { return this . org.springframework.web.client.RestTemplate . responseEntityExtractor ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) { return this . org.springframework.web.client.RestTemplate . headersExtractor ( ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.web.client.HttpMethod , java.net.URI java.net.URI , ListenableFuture < ClientHttpResponse > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> ) { super( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> ); this . org.springframework.web.client.HttpMethod = org.springframework.web.client.HttpMethod ; this . java.net.URI = java.net.URI ; this . org.springframework.web.client.ResponseExtractor<T> = org.springframework.web.client.ResponseExtractor<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final T T ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.util.concurrent.ExecutionException { try { if ( ! org.springframework.web.client.ResponseErrorHandler ( ) . hasError ( org.springframework.web.client.ClientHttpResponse ) ) { void ( this . org.springframework.web.client.HttpMethod , this . java.net.URI , org.springframework.web.client.ClientHttpResponse ) ; } else { void ( this . org.springframework.web.client.HttpMethod , this . java.net.URI , org.springframework.web.client.ClientHttpResponse ) ; } return T ( org.springframework.web.client.ClientHttpResponse ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.util.concurrent.ExecutionException ( java.lang.Throwable ) ; } finally { if ( org.springframework.web.client.ClientHttpResponse != null ) { org.springframework.web.client.ClientHttpResponse . close ( ) ; } } }  <METHOD_END>
<METHOD_START> protected T T ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { return ( this . org.springframework.web.client.ResponseExtractor<T> != null ? this . org.springframework.web.client.ResponseExtractor<T> . extractData ( org.springframework.web.client.ClientHttpResponse ) : null ) ; }  <METHOD_END>
<METHOD_START> public void ( RequestCallback org.springframework.web.client.RequestCallback ) { this . org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final org . springframework . org.springframework.http . org.springframework.http . org.springframework.http org.springframework.http.client.AsyncClientHttpRequest ) throws java.io.IOException { if ( this . org.springframework.web.client.RequestCallback != null ) { this . org.springframework.web.client.RequestCallback . doWithRequest ( new ClientHttpRequest ( ) { @ java.lang.Override public org.springframework.web.client.ClientHttpResponse org.springframework.web.client.ClientHttpResponse ( ) java.io.IOException { throw new java.lang.UnsupportedOperationException ( STRING ) ; } @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return org.springframework.http.client.AsyncClientHttpRequest . getBody ( ) ; } @ java.lang.Override public org.springframework.web.client.HttpMethod org.springframework.web.client.HttpMethod ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getMethod ( ) ; } @ java.lang.Override public java.net.URI java.net.URI ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getURI ( ) ; } @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getHeaders ( ) ; } } ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ClientHttpResponse org.springframework.web.client.ClientHttpResponse ( ) java.io.IOException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return org.springframework.http.client.AsyncClientHttpRequest . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpMethod org.springframework.web.client.HttpMethod ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( ) { return org.springframework.http.client.AsyncClientHttpRequest . getHeaders ( ) ; }  <METHOD_END>
