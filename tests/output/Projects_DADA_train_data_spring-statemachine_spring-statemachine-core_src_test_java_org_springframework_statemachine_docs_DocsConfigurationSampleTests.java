<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 ) . end ( States . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . end ( STRING ) . states ( new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 ) . state ( States . S1 ) . and ( ) . withStates ( ) . parent ( States . S1 ) . initial ( States . S2 ) . state ( States . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . and ( ) . withInternal ( ) . source ( States . S2 ) . event ( Events . E2 ) . and ( ) . withLocal ( ) . source ( States . S2 ) . target ( States . S3 ) . event ( Events . E3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . guard ( org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . and ( ) . withExternal ( ) . source ( States . S2 ) . target ( States . S3 ) . event ( Events . E2 ) . guardExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . action ( org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . state ( States . S1 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , null ) . state ( States . S2 , null , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . state ( States . S2 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . state ( States . S3 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . action ( org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . action ( Actions . errorCallingAction ( org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 ) . stateEntry ( States . S2 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . stateDo ( States . S2 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . stateExit ( States . S2 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . state ( States . S3 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { java.lang.Exception java.lang.Exception = org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getException ( ) ; java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 ) . end ( States . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . end ( STRING ) . states ( new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ) ) ; return org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . build ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( false ) . beanFactory ( null ) . taskExecutor ( null ) . taskScheduler ( null ) . listener ( null ) ; return org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.docs.StateMachineEvent ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineApplicationEventListener org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineApplicationEventListener ( ) { return new org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineApplicationEventListener ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; return org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > org.springframework.statemachine.docs.State<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> , State < States , Events > org.springframework.statemachine.docs.State<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > org.springframework.statemachine.docs.State<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > org.springframework.statemachine.docs.State<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > org.springframework.statemachine.docs.Transition<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > org.springframework.statemachine.docs.Transition<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > org.springframework.statemachine.docs.Transition<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < Events > org.springframework.statemachine.docs.Message<org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < States , Events > org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> , java.lang.Exception java.lang.Exception ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {		}  <METHOD_END>
<METHOD_START> void void ( ) { StateMachine < States , Events > org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> = org.springframework.statemachine.docs.StateMachineFactory<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . getStateMachine ( ) ; org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener ( ) { org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener = new org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener ( ) ; org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . addStateListener ( org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener ) ; return org.springframework.statemachine.docs.DocsConfigurationSampleTests.StateMachineEventListener ; }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . sendEvent ( Events . E1 ) ; Message < Events > org.springframework.statemachine.docs.Message<org.springframework.statemachine.docs.Events> = MessageBuilder . withPayload ( Events . E2 ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.statemachine.docs.StateMachine<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . sendEvent ( org.springframework.statemachine.docs.Message<org.springframework.statemachine.docs.Events> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States2 . S1 ) . state ( States2 . S2 ) . and ( ) . withStates ( ) . parent ( States2 . S2 ) . initial ( States2 . S2I ) . state ( States2 . S21 ) . end ( States2 . S2F ) . and ( ) . withStates ( ) . parent ( States2 . S2 ) . initial ( States2 . S3I ) . state ( States2 . S31 ) . end ( States2 . S3F ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . S1 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . end ( States . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States3 , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States3,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States3,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States3 . S1 ) . state ( States3 . S2 ) . and ( ) . withStates ( ) . parent ( States3 . S2 ) . initial ( States3 . S2I ) . state ( States3 . S21 ) . state ( States3 . S22 ) . history ( States3 . SH , History . SHALLOW ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States3 , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States3,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States3,org.springframework.statemachine.docs.Events> . withHistory ( ) . source ( States3 . SH ) . target ( States3 . S22 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . SI ) . choice ( States . S1 ) . end ( States . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withChoice ( ) . source ( States . S1 ) . first ( States . S2 , org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . then ( States . S3 , org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . last ( States . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . SI ) . junction ( States . S1 ) . end ( States . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( States .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withJunction ( ) . source ( States . S1 ) . first ( States . S2 , org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . then ( States . S3 , org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . last ( States . S4 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States2 . S1 ) . fork ( States2 . S2 ) . state ( States2 . S3 ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S2I ) . state ( States2 . S21 ) . state ( States2 . S22 ) . end ( States2 . S2F ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S3I ) . state ( States2 . S31 ) . state ( States2 . S32 ) . end ( States2 . S3F ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withFork ( ) . source ( States2 . S2 ) . target ( States2 . S22 ) . target ( States2 . S32 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States2 . S1 ) . state ( States2 . S3 ) . join ( States2 . S4 ) . state ( States2 . S5 ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S2I ) . state ( States2 . S21 ) . state ( States2 . S22 ) . end ( States2 . S2F ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S3I ) . state ( States2 . S31 ) . state ( States2 . S32 ) . end ( States2 . S3F ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withJoin ( ) . source ( States2 . S2F ) . source ( States2 . S3F ) . target ( States2 . S4 ) . and ( ) . withExternal ( ) . source ( States2 . S4 ) . target ( States2 . S5 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States2 . S1 ) . state ( States2 . S3 ) . join ( States2 . S4 ) . state ( States2 . S5 ) . end ( States2 . SF ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S2I ) . state ( States2 . S21 ) . state ( States2 . S22 ) . end ( States2 . S2F ) . and ( ) . withStates ( ) . parent ( States2 . S3 ) . initial ( States2 . S3I ) . state ( States2 . S31 ) . state ( States2 . S32 ) . end ( States2 . S3F ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States2 , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States2,org.springframework.statemachine.docs.Events> . withJoin ( ) . source ( States2 . S2F ) . source ( States2 . S3F ) . target ( States2 . S4 ) . and ( ) . withExternal ( ) . source ( States2 . S4 ) . target ( States2 . S5 ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( States2 . S4 ) . target ( States2 . SF ) . guardExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . entry ( STRING ) . exit ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withEntry ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExit ( ) . source ( STRING ) . target ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withStates ( ) . initial ( States . SI ) . state ( States . S1 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseAction ( ) ) . state ( States . S2 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseAction ( ) ) . state ( States . S3 , org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) , org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.SpelAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withExternal ( ) . source ( States . SI ) . target ( States . S1 ) . event ( Events . E1 ) . guard ( org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) . and ( ) . withExternal ( ) . source ( States . S1 ) . target ( States . S2 ) . event ( Events . E1 ) . guard ( org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseGuard ( ) ) . and ( ) . withExternal ( ) . source ( States . S2 ) . target ( States . S3 ) . event ( Events . E2 ) . guardExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Guard<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Guard < States , Events > ( ) { @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return true ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseGuard org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseGuard ( ) { return new org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.Action<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new Action < States , Events > ( ) { @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {				}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseAction org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseAction ( ) { return new org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.BaseAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.SpelAction org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.SpelAction ( ) { ExpressionParser org.springframework.statemachine.docs.ExpressionParser = new SpelExpressionParser ( ) ; return new org.springframework.statemachine.docs.DocsConfigurationSampleTests.Config16.SpelAction ( org.springframework.statemachine.docs.ExpressionParser . parseExpression ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < States , Events > org.springframework.statemachine.docs.StateContext<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) {			}  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.statemachine.docs.Expression ) { super( org.springframework.statemachine.docs.Expression ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withConfiguration ( ) . autoStartup ( true ) . beanFactory ( new StaticListableBeanFactory ( ) ) . taskExecutor ( new SyncTaskExecutor ( ) ) . taskScheduler ( new ConcurrentTaskScheduler ( ) ) . listener ( new StateMachineListenerAdapter < States , Events > ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withDistributed ( ) . ensemble ( org.springframework.statemachine.docs.StateMachineEnsemble<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.StateMachineEnsemble<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.StateMachineEnsemble<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < States , Events > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> )					throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> . withVerifier ( ) . enabled ( true ) . verifier ( org.springframework.statemachine.docs.StateMachineModelVerifier<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.StateMachineModelVerifier<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> < States , Events > org.springframework.statemachine.docs.StateMachineModelVerifier<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ( ) { return new StateMachineModelVerifier < States , Events > ( ) { @ java.lang.Override public void void ( StateMachineModel < States , Events > org.springframework.statemachine.docs.StateMachineModel<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModel < States , Events > org.springframework.statemachine.docs.StateMachineModel<org.springframework.statemachine.docs.States,org.springframework.statemachine.docs.Events> ) { }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; } } ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithAllRegions ( access -> access . setRelay ( stateMachine ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; } } ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithRegion ( access -> access . setRelay ( stateMachine ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { for ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> : org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . withAllRegions ( ) ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; } org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . withAllRegions ( ) . stream ( ) . forEach ( access -> access . setRelay ( stateMachine ) ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . withRegion ( ) . setRelay ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . withRegion ( ) . addStateMachineInterceptor ( new StateMachineInterceptor < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public org.springframework.statemachine.docs.Message<java.lang.String> < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> ( Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.Message<java.lang.String> ; } @ java.lang.Override public org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ; } @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) {						} @ java.lang.Override public org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ; } @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) {						} @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.docs.Message<java.lang.String> < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> ( Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.Message<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) {						}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { return org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> , Message < java.lang.String > org.springframework.statemachine.docs.Message<java.lang.String> , Transition < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Transition<java.lang.String,java.lang.String> , StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) {						}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> void void ( ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < java.lang.String , java.lang.String > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( new StateMachineInterceptorAdapter < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; } } ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateMachineAccess<java.lang.String,java.lang.String> . addStateMachineInterceptor ( new StateMachineInterceptorAdapter < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> , java.lang.Exception java.lang.Exception ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.docs.StateMachineEvent ) { if ( org.springframework.statemachine.docs.StateMachineEvent instanceof OnStateMachineError ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( OnStateMachineError org.springframework.statemachine.docs.OnStateMachineError ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( OnExtendedStateChanged org.springframework.statemachine.docs.OnExtendedStateChanged ) { }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.docs.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Action<java.lang.String,java.lang.String> ( ) { return new Action < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . put ( STRING , STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . put ( STRING , STRING ) ; }  <METHOD_END>
