<METHOD_START> protected void void ( java.lang.reflect.Method java.lang.reflect.Method ) { void ( java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { java.lang.Integer java.lang.Integer = java.util.HashMap<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; java.lang.Integer = ( java.lang.Integer != null ) ? new java.lang.Integer ( java.lang.Integer . int ( ) + NUMBER ) : new java.lang.Integer ( NUMBER ) ; java.util.HashMap<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String , java.lang.Integer ) ; ++ int ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { java.lang.Integer java.lang.Integer = java.util.HashMap<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; return ( java.lang.Integer != null ? java.lang.Integer . int ( ) : NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) == this . java.lang.Class<? extends org.springframework.tests.aop.advice.MethodCounter> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Class<? extends org.springframework.tests.aop.advice.MethodCounter> ( ) . int ( ) ; }  <METHOD_END>
