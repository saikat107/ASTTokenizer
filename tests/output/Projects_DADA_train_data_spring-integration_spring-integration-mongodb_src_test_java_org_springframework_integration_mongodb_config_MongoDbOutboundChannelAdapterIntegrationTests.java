<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < Person > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> = new GenericMessage < MongoDbAvailableTests . MongoDbAvailableTests > ( this . createPerson ( STRING ) ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> ) ; MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , Person .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( STRING ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < Person > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , Person .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( STRING ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < Person > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> = MessageBuilder . withPayload ( this . createPerson ( STRING ) ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , Person .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { BasicDBObject org.springframework.integration.mongodb.config.BasicDBObject = ( BasicDBObject ) JSON . parse ( STRING ) ; MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( STRING ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < BasicDBObject > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.BasicDBObject> = MessageBuilder . withPayload ( org.springframework.integration.mongodb.config.BasicDBObject ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.BasicDBObject> ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , BasicDBObject .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( STRING ) ; ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < java.lang.String > org.springframework.integration.mongodb.config.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<java.lang.String> ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , BasicDBObject .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mongodb.config.MongoDbOutboundChannelAdapterIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.config.MessageChannel = org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < Person > org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> = new GenericMessage < MongoDbAvailableTests . MongoDbAvailableTests > ( this . createPerson ( STRING ) ) ; org.springframework.integration.mongodb.config.MessageChannel . send ( org.springframework.integration.mongodb.config.Message<org.springframework.integration.mongodb.config.Person> ) ; MongoDbFactory org.springframework.integration.mongodb.config.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.config.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.config.MongoDbFactory ) ; assertNotNull ( org.springframework.integration.mongodb.config.MongoTemplate . find ( new BasicQuery ( STRING ) , Person .class , STRING ) ) ; org.springframework.integration.mongodb.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
