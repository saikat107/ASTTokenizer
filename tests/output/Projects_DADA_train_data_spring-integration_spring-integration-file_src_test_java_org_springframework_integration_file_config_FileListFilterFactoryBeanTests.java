<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilter ( new org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ( ) ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilenamePattern ( STRING ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter = new org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilter ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertFalse ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; assertSame ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter , org.springframework.integration.file.config.FileListFilter<java.io.File> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter = new org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilter ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setPreventDuplicates ( java.lang.Boolean . java.lang.Boolean ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertTrue ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) new DirectFieldAccessor ( org.springframework.integration.file.config.FileListFilter<java.io.File> ) . getPropertyValue ( STRING ) ; assertTrue ( java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) instanceof AcceptOnceFileListFilter ) ; assertTrue ( java.util.Collection<> . boolean ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter = new org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilter ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setPreventDuplicates ( java.lang.Boolean . java.lang.Boolean ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertFalse ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; assertSame ( org.springframework.integration.file.config.FileListFilterFactoryBeanTests.TestFilter , org.springframework.integration.file.config.FileListFilter<java.io.File> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilenamePattern ( STRING ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertTrue ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> = ( java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > ) new DirectFieldAccessor ( org.springframework.integration.file.config.FileListFilter<java.io.File> ) . getPropertyValue ( STRING ) ; java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> = java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> . next ( ) instanceof AcceptOnceFileListFilter ) ; assertThat ( java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> . next ( ) , is ( instanceOf ( SimplePatternFileListFilter .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilenamePattern ( ( STRING ) ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setPreventDuplicates ( java.lang.Boolean . java.lang.Boolean ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertTrue ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> = ( java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > ) new DirectFieldAccessor ( org.springframework.integration.file.config.FileListFilter<java.io.File> ) . getPropertyValue ( STRING ) ; java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> < FileListFilter < ? > > java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> = java.util.Collection<org.springframework.integration.file.config.FileListFilter<?>> . iterator ( ) ; assertTrue ( java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> . next ( ) instanceof AcceptOnceFileListFilter ) ; FileListFilter < ? > org.springframework.integration.file.config.FileListFilter<?> = java.util.Iterator<org.springframework.integration.file.config.FileListFilter<?>> . next ( ) ; assertThat ( org.springframework.integration.file.config.FileListFilter<> , is ( instanceOf ( SimplePatternFileListFilter .class ) ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileListFilter<> , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileListFilterFactoryBean org.springframework.integration.file.config.FileListFilterFactoryBean = new FileListFilterFactoryBean ( ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setIgnoreHidden ( false ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setFilenamePattern ( ( STRING ) ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setAlwaysAcceptDirectories ( true ) ; org.springframework.integration.file.config.FileListFilterFactoryBean . setPreventDuplicates ( java.lang.Boolean . java.lang.Boolean ) ; FileListFilter < java.io.File > org.springframework.integration.file.config.FileListFilter<java.io.File> = org.springframework.integration.file.config.FileListFilterFactoryBean . getObject ( ) ; assertFalse ( org.springframework.integration.file.config.FileListFilter<java.io.File> instanceof CompositeFileListFilter ) ; assertThat ( org.springframework.integration.file.config.FileListFilter<java.io.File> , is ( instanceOf ( SimplePatternFileListFilter .class ) ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileListFilter<java.io.File> , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return true ; }  <METHOD_END>
