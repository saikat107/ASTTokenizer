<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.web.MethodParameter = new MethodParameter ( org.springframework.data.web.SortHandlerMethodArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , Sort .class ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , java.lang.String .class ) ; SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; Sort org.springframework.data.web.Sort = Sort . by ( Direction . ASC , STRING ) ; org.springframework.data.web.SortHandlerMethodArgumentResolver . setFallbackSort ( org.springframework.data.web.Sort ) ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( new MockHttpServletRequest ( ) ) , null ) ; assertThat ( org.springframework.data.web.Sort ) . isEqualTo ( org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = TestUtils . getParameterOfMethod ( java.lang.Class<?> ( ) , STRING , java.lang.String .class ) ; SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( new MockHttpServletRequest ( ) ) , null ) ; assertThat ( org.springframework.data.web.Sort . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; Sort org.springframework.data.web.Sort = Sort . by ( STRING , STRING ) ; NativeWebRequest org.springframework.data.web.NativeWebRequest = org.springframework.data.web.NativeWebRequest ( org.springframework.data.web.Sort ) ; void ( org.springframework.data.web.NativeWebRequest , org.springframework.data.web.MethodParameter , org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; Sort org.springframework.data.web.Sort = Sort . by ( STRING , STRING ) . and ( Sort . by ( STRING , STRING ) ) ; void ( org.springframework.data.web.NativeWebRequest ( org.springframework.data.web.Sort ) , org.springframework.data.web.MethodParameter , org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; Sort org.springframework.data.web.Sort = Sort . by ( STRING , STRING ) ; void ( org.springframework.data.web.NativeWebRequest ( org.springframework.data.web.Sort , STRING ) , org.springframework.data.web.MethodParameter , org.springframework.data.web.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , ( java.lang.String ) null ) ; SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.Sort . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = getParameterOfMethod ( STRING ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , SORT_3 ) ; SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.Sort ) . isEqualTo ( Sort . by ( Direction . ASC , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , org.springframework.data.web.MethodParameter ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , org.springframework.data.web.MethodParameter ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , org.springframework.data.web.MethodParameter ) ) . isEqualTo ( Sort . by ( DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , org.springframework.data.web.MethodParameter ) ) . isEqualTo ( Sort . by ( DESC , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , org.springframework.data.web.MethodParameter ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , getParameterOfMethod ( STRING ) ) ) . isEqualTo ( Sort . by ( STRING , STRING ) ) ; assertThat ( org.springframework.data.web.Sort ( org.springframework.data.web.MockHttpServletRequest , getParameterOfMethod ( STRING ) ) ) . isEqualTo ( Sort . by ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.Sort org.springframework.data.web.Sort ( HttpServletRequest org.springframework.data.web.HttpServletRequest , MethodParameter org.springframework.data.web.MethodParameter ) throws java.lang.Exception { SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; return org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.HttpServletRequest ) , null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( NativeWebRequest org.springframework.data.web.NativeWebRequest , MethodParameter org.springframework.data.web.MethodParameter , Sort org.springframework.data.web.Sort ) { SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver = new SortHandlerMethodArgumentResolver ( ) ; assertThat ( org.springframework.data.web.SortHandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; try { assertThat ( org.springframework.data.web.SortHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , org.springframework.data.web.NativeWebRequest , null ) ) . isEqualTo ( org.springframework.data.web.Sort ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.NativeWebRequest org.springframework.data.web.NativeWebRequest ( Sort org.springframework.data.web.Sort ) { return org.springframework.data.web.NativeWebRequest ( org.springframework.data.web.Sort , null ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.NativeWebRequest org.springframework.data.web.NativeWebRequest ( Sort org.springframework.data.web.Sort , java.lang.String java.lang.String ) { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; if ( org.springframework.data.web.Sort == null ) { return new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) ; } for ( Order org.springframework.data.web.Order : org.springframework.data.web.Sort ) { java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ; org.springframework.data.web.MockHttpServletRequest . addParameter ( java.lang.String + STRING , java.lang.String . java.lang.String ( STRING , org.springframework.data.web.Order . getProperty ( ) , org.springframework.data.web.Order . getDirection ( ) . name ( ) ) ) ; } return new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.web.SortHandlerMethodArgumentResolverUnitTests.Controller .class ; }  <METHOD_END>
<METHOD_START> void void ( Sort org.springframework.data.web.Sort );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) Sort org.springframework.data.web.Sort );  <METHOD_END>
<METHOD_START> void void ( @ SortDefault ( { STRING , STRING } ) Sort org.springframework.data.web.Sort );  <METHOD_END>
<METHOD_START> void void ( @ SortDefault ( sort = { STRING , STRING } , direction = Direction . DESC ) Sort org.springframework.data.web.Sort );  <METHOD_END>
<METHOD_START> void void ( @ SortDefaults ( @ SortDefault ( { STRING , STRING } ) ) Sort org.springframework.data.web.Sort );  <METHOD_END>
<METHOD_START> void void ( @ SortDefaults ( @ SortDefault ( { STRING , STRING } ) ) @ SortDefault ( { STRING , STRING } ) Sort org.springframework.data.web.Sort );  <METHOD_END>
