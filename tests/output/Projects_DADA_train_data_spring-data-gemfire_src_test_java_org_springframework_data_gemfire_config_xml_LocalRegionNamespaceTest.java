<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertEquals ( DataPolicy . NORMAL , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertEquals ( Scope . LOCAL , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertFalse ( org.springframework.data.gemfire.config.xml.RegionAttributes . getPublisher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; CacheListener [] org.springframework.data.gemfire.config.xml.CacheListener[] = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertFalse ( ObjectUtils . isEmpty ( org.springframework.data.gemfire.config.xml.CacheListener[] ) ) ; assertEquals ( NUMBER , cacheListeners . length ) ; assertSame ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] ) ; assertTrue ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] instanceof SimpleCacheListener ) ; assertNotSame ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] , org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] ) ; assertSame ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertSame ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ; assertEquals ( DataPolicy . PRELOADED , org.springframework.data.gemfire.config.xml.RegionAttributes . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . isDiskSynchronous ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . getIgnoreJTA ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.RegionAttributes . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.RegionAttributes . getInitialCapacity ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.RegionAttributes . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.RegionAttributes . getLoadFactor ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.RegionAttributes . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( Cache .class ) ; Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.Cache . createRegionFactory ( ) . create ( STRING ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionLookupFactoryBean org.springframework.data.gemfire.config.xml.RegionLookupFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionLookupFactoryBean .class ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionLookupFactoryBean ) ) ; assertSame ( org.springframework.data.gemfire.config.xml.Region , org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . getDataPolicy ( ) . withPersistence ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( Scope . LOCAL , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) instanceof org.springframework.data.gemfire.config.xml.LocalRegionNamespaceTest.TestCompressor ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
