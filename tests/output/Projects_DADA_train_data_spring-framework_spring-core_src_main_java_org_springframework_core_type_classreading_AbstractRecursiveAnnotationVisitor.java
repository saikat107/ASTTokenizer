<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes ) { super( SpringAsmInfo . ASM_VERSION ); this . java.lang.ClassLoader = java.lang.ClassLoader ; this . org.springframework.core.type.classreading.AnnotationAttributes = org.springframework.core.type.classreading.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.core.type.classreading.AnnotationAttributes . put ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = Type . getType ( java.lang.String ) . getClassName ( ) ; AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes = new AnnotationAttributes ( java.lang.String , this . java.lang.ClassLoader ) ; this . org.springframework.core.type.classreading.AnnotationAttributes . put ( java.lang.String , org.springframework.core.type.classreading.AnnotationAttributes ) ; return new RecursiveAnnotationAttributesVisitor ( java.lang.String , org.springframework.core.type.classreading.AnnotationAttributes , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String ) { return new RecursiveAnnotationArrayVisitor ( java.lang.String , this . org.springframework.core.type.classreading.AnnotationAttributes , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , java.lang.String ) ; void ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = java.lang.String ; try { java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.ClassLoader . java.lang.Class<?> ( Type . getType ( java.lang.String ) . getClassName ( ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.reflect.Field != null ) { java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.core.type.classreading.Log . debug ( STRING , java.lang.ClassNotFoundException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { org.springframework.core.type.classreading.Log . warn ( STRING , java.lang.IllegalAccessException ) ; } return java.lang.Object ; }  <METHOD_END>
