<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.config.ApplicationContext ) throws org.springframework.integration.config.BeansException { this . org.springframework.integration.config.ApplicationContext = org.springframework.integration.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.config.ApplicationEventPublisher ) { this . org.springframework.integration.config.ApplicationEventPublisher = org.springframework.integration.config.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver < MessageChannel > org.springframework.integration.config.DestinationResolver<org.springframework.integration.config.MessageChannel> ) { this . org.springframework.integration.config.DestinationResolver<org.springframework.integration.config.MessageChannel> = org.springframework.integration.config.DestinationResolver<org.springframework.integration.config.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.config.MessageChannel ) { this . org.springframework.integration.config.MessageChannel = org.springframework.integration.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.config.BeanFactory ) throws org.springframework.integration.config.BeansException { this . org.springframework.integration.config.BeanFactory = org.springframework.integration.config.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.BeanFactory org.springframework.integration.config.BeanFactory ( ) { return this . org.springframework.integration.config.BeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.config.Advice> < Advice > java.util.List<org.springframework.integration.config.Advice> ) { this . java.util.List<org.springframework.integration.config.Advice> = java.util.List<org.springframework.integration.config.Advice> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public H H ( ) java.lang.Exception { if ( this . H == null ) { this . H = this . H ( ) ; Assert . notNull ( this . H , STRING ) ; } return this . H ; }  <METHOD_END>
<METHOD_START> protected final H H ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return null ; } this . H = H ( ) ; if ( this . H instanceof ApplicationContextAware && this . org.springframework.integration.config.ApplicationContext != null ) { ( ( ApplicationContextAware ) this . H ) . setApplicationContext ( this . org.springframework.integration.config.ApplicationContext ) ; } if ( this . H instanceof BeanFactoryAware && org.springframework.integration.config.BeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . H ) . setBeanFactory ( org.springframework.integration.config.BeanFactory ( ) ) ; } if ( this . H instanceof BeanNameAware && this . java.lang.String != null ) { ( ( BeanNameAware ) this . H ) . setBeanName ( this . java.lang.String ) ; } if ( this . H instanceof ApplicationEventPublisherAware && this . org.springframework.integration.config.ApplicationEventPublisher != null ) { ( ( ApplicationEventPublisherAware ) this . H ) . setApplicationEventPublisher ( this . org.springframework.integration.config.ApplicationEventPublisher ) ; } if ( this . H instanceof MessageProducer && this . org.springframework.integration.config.MessageChannel != null ) { ( ( MessageProducer ) this . H ) . setOutputChannel ( this . org.springframework.integration.config.MessageChannel ) ; } java.lang.Object java.lang.Object = java.lang.Object ( this . H ) ; if ( java.lang.Object == null ) { java.lang.Object = this . H ; } if ( java.lang.Object instanceof IntegrationObjectSupport ) { if ( this . java.lang.String != null ) { ( ( IntegrationObjectSupport ) java.lang.Object ) . setComponentName ( this . java.lang.String ) ; } if ( this . org.springframework.integration.config.DestinationResolver<org.springframework.integration.config.MessageChannel> != null ) { ( ( IntegrationObjectSupport ) java.lang.Object ) . setChannelResolver ( this . org.springframework.integration.config.DestinationResolver<org.springframework.integration.config.MessageChannel> ) ; } } if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.config.Advice> ) ) { if ( java.lang.Object instanceof AbstractReplyProducingMessageHandler ) { ( ( AbstractReplyProducingMessageHandler ) java.lang.Object ) . setAdviceChain ( this . java.util.List<org.springframework.integration.config.Advice> ) ; } else if ( this . org.springframework.integration.config.Log . isDebugEnabled ( ) ) { java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String == null && java.lang.Object instanceof NamedComponent ) { java.lang.String = ( ( NamedComponent ) java.lang.Object ) . getComponentName ( ) ; } this . org.springframework.integration.config.Log . debug ( STRING + ( java.lang.String == null ? STRING : ( STRING + java.lang.String ) ) + STRING ) ; } } if ( this . java.lang.Boolean != null ) { if ( java.lang.Object instanceof AbstractMessageProducingHandler ) { ( ( AbstractMessageProducingHandler ) java.lang.Object ) . setAsync ( this . java.lang.Boolean ) ; } } if ( this . H instanceof Orderable && this . java.lang.Integer != null ) { ( ( Orderable ) this . H ) . setOrder ( this . java.lang.Integer ) ; } this . boolean = true ; } if ( this . H instanceof InitializingBean ) { try { ( ( InitializingBean ) this . H ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } return this . H ; }  <METHOD_END>
<METHOD_START> protected abstract H H ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { if ( this . H != null ) { return this . H . java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) ; } return java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { return MessageHandler .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Advised ) ) { return java.lang.Object ; } Advised org.springframework.integration.config.Advised = ( Advised ) java.lang.Object ; if ( org.springframework.integration.config.Advised . getTargetSource ( ) == null ) { return null ; } try { return java.lang.Object ( org.springframework.integration.config.Advised . getTargetSource ( ) . getTarget ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.config.Log . error ( STRING , java.lang.Exception ) ; return null ; } }  <METHOD_END>
