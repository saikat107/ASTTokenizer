<METHOD_START> public void void ( ScheduledTimerListener [] org.springframework.scheduling.commonj.ScheduledTimerListener[] ) { this . org.springframework.scheduling.commonj.ScheduledTimerListener[] = org.springframework.scheduling.commonj.ScheduledTimerListener[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException { super. afterPropertiesSet ( ) ; if ( this . org.springframework.scheduling.commonj.ScheduledTimerListener[] != null ) { TimerManager org.springframework.scheduling.commonj.TimerManager = getTimerManager ( ) ; for ( ScheduledTimerListener org.springframework.scheduling.commonj.ScheduledTimerListener : this . org.springframework.scheduling.commonj.ScheduledTimerListener[] ) { Timer org.springframework.scheduling.commonj.Timer ; if ( org.springframework.scheduling.commonj.ScheduledTimerListener . isOneTimeTask ( ) ) { org.springframework.scheduling.commonj.Timer = org.springframework.scheduling.commonj.TimerManager . schedule ( org.springframework.scheduling.commonj.ScheduledTimerListener . getTimerListener ( ) , org.springframework.scheduling.commonj.ScheduledTimerListener . getDelay ( ) ) ; } else { if ( org.springframework.scheduling.commonj.ScheduledTimerListener . isFixedRate ( ) ) { org.springframework.scheduling.commonj.Timer = org.springframework.scheduling.commonj.TimerManager . scheduleAtFixedRate ( org.springframework.scheduling.commonj.ScheduledTimerListener . getTimerListener ( ) , org.springframework.scheduling.commonj.ScheduledTimerListener . getDelay ( ) , org.springframework.scheduling.commonj.ScheduledTimerListener . getPeriod ( ) ) ; } else { org.springframework.scheduling.commonj.Timer = org.springframework.scheduling.commonj.TimerManager . schedule ( org.springframework.scheduling.commonj.ScheduledTimerListener . getTimerListener ( ) , org.springframework.scheduling.commonj.ScheduledTimerListener . getDelay ( ) , org.springframework.scheduling.commonj.ScheduledTimerListener . getPeriod ( ) ) ; } } this . java.util.List<org.springframework.scheduling.commonj.Timer> . add ( org.springframework.scheduling.commonj.Timer ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.commonj.TimerManager org.springframework.scheduling.commonj.TimerManager ( ) { return getTimerManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.scheduling.commonj.TimerManager> < ? extends TimerManager > java.lang.Class<? extends org.springframework.scheduling.commonj.TimerManager> ( ) { TimerManager org.springframework.scheduling.commonj.TimerManager = getTimerManager ( ) ; return ( org.springframework.scheduling.commonj.TimerManager != null ? org.springframework.scheduling.commonj.TimerManager . getClass ( ) : TimerManager .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( Timer org.springframework.scheduling.commonj.Timer : this . java.util.List<org.springframework.scheduling.commonj.Timer> ) { try { org.springframework.scheduling.commonj.Timer . cancel ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . warn ( STRING , java.lang.Throwable ) ; } } this . java.util.List<org.springframework.scheduling.commonj.Timer> . clear ( ) ; super. destroy ( ) ; }  <METHOD_END>
