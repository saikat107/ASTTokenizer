<METHOD_START> protected org.springframework.data.gemfire.support.ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint ( java.lang.String java.lang.String , int int ) { return new ConnectionEndpoint ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint [] org.springframework.data.gemfire.support.ConnectionEndpoint[] = { org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) } ; ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( org.springframework.data.gemfire.support.ConnectionEndpoint[] ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( connectionEndpoints . length ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint[] [ int ++ ] ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint [] org.springframework.data.gemfire.support.ConnectionEndpoint[] = { org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) } ; ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . from ( org.springframework.data.gemfire.support.ConnectionEndpoint[] ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( connectionEndpoints . length ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint[] [ int ++ ] ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.net.InetSocketAddress [] java.net.InetSocketAddress[] = { new java.net.InetSocketAddress ( STRING , NUMBER ) , new java.net.InetSocketAddress ( STRING , NUMBER ) } ; ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . from ( java.net.InetSocketAddress[] ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( java.net.InetSocketAddress[] . int ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( java.net.InetSocketAddress[] [ int ] . java.lang.String ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( java.net.InetSocketAddress[] [ int ++ ] . int ( ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . from ( ( java.lang.Iterable ) null ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . parse ( NUMBER , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( java.lang.String[] . int ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . toString ( ) , is ( equalTo ( java.lang.String[] [ int ++ ] ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . parse ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; ConnectionEndpoint [] org.springframework.data.gemfire.support.ConnectionEndpoint[] = { org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) } ; java.lang.Iterable<org.springframework.data.gemfire.support.ConnectionEndpoint> < ConnectionEndpoint > java.lang.Iterable<org.springframework.data.gemfire.support.ConnectionEndpoint> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint[] ) . add ( java.lang.Iterable<org.springframework.data.gemfire.support.ConnectionEndpoint> ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConnectionEndpointList ) ) ) ; java.util.List<org.springframework.data.gemfire.support.ConnectionEndpoint> < ConnectionEndpoint > java.util.List<org.springframework.data.gemfire.support.ConnectionEndpoint> = new java.util.ArrayList<org.springframework.data.gemfire.support.ConnectionEndpoint> < ConnectionEndpoint > ( NUMBER ) ; java.util.List<org.springframework.data.gemfire.support.ConnectionEndpoint> . add ( org.springframework.data.gemfire.support.ConnectionEndpoint[] [ NUMBER ] ) ; java.util.List<org.springframework.data.gemfire.support.ConnectionEndpoint> . addAll ( ( java.util.List ) java.lang.Iterable<org.springframework.data.gemfire.support.ConnectionEndpoint> ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( equalTo ( java.util.List<org.springframework.data.gemfire.support.ConnectionEndpoint> . get ( int ++ ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . toString ( ) , is ( equalTo ( java.lang.String[] [ int ++ ] ) ) ) ; } org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . iterator ( ) . next ( ) . toString ( ) , is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . toString ( ) , is ( equalTo ( java.lang.String[] [ int ++ ] ) ) ) ; } org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . iterator ( ) . next ( ) . toString ( ) , is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList = org.springframework.data.gemfire.support.ConnectionEndpointList . findBy ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = new ConnectionEndpointList ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpointList . add ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . findOne ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . from ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; ConnectionEndpoint [] org.springframework.data.gemfire.support.ConnectionEndpoint[] = org.springframework.data.gemfire.support.ConnectionEndpointList . toArray ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint[] , is ( notNullValue ( ) ) ) ; assertThat ( connectionEndpointArray . length , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint[] [ int ++ ] , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint [] org.springframework.data.gemfire.support.ConnectionEndpoint[] = new ConnectionEndpointList ( ) . toArray ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint[] , is ( notNullValue ( ) ) ) ; assertThat ( connectionEndpoints . length , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . from ( org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.support.ConnectionEndpoint ( STRING , NUMBER ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = org.springframework.data.gemfire.support.ConnectionEndpointList . toInetSocketAddresses ( ) ; assertThat ( java.util.List<java.net.InetSocketAddress> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.net.InetSocketAddress> . int ( ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpointList . size ( ) ) ) ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint : org.springframework.data.gemfire.support.ConnectionEndpointList ) { assertThat ( java.util.List<java.net.InetSocketAddress> . java.net.InetSocketAddress ( int ) . java.lang.String ( ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) ) ) ) ; assertThat ( java.util.List<java.net.InetSocketAddress> . java.net.InetSocketAddress ( int ++ ) . int ( ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = new ConnectionEndpointList ( ) . toInetSocketAddresses ( ) ; assertThat ( java.util.List<java.net.InetSocketAddress> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.net.InetSocketAddress> . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpointList org.springframework.data.gemfire.support.ConnectionEndpointList = ConnectionEndpointList . parse ( NUMBER , STRING , STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpointList . toString ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new ConnectionEndpointList ( ) . toString ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
