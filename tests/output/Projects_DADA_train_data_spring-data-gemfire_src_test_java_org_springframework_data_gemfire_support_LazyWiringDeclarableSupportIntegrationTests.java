<METHOD_START> private static java.util.Properties java.util.Properties ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable = new org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable ( ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . init ( java.util.Properties ( STRING , STRING ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . onApplicationEvent ( new ContextRefreshedEvent ( org.springframework.data.gemfire.support.ApplicationContext ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . assertInitialized ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . javax.sql.DataSource ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . org.springframework.data.gemfire.support.User ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . org.springframework.data.gemfire.support.User ( ) . getUsername ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable = new org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable ( ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . init ( java.util.Properties ( TEMPLATE_BEAN_NAME_PROPERTY , STRING ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . onApplicationEvent ( new ContextRefreshedEvent ( org.springframework.data.gemfire.support.ApplicationContext ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . assertInitialized ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . javax.sql.DataSource ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . org.springframework.data.gemfire.support.User ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . org.springframework.data.gemfire.support.User ( ) . getUsername ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable = new org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable ( ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . init ( java.util.Properties ( TEMPLATE_BEAN_NAME_PROPERTY , STRING ) ) ; org.springframework.data.gemfire.support.LazyWiringDeclarableSupportIntegrationTests.TestDeclarable . onApplicationEvent ( new ContextRefreshedEvent ( org.springframework.data.gemfire.support.ApplicationContext ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> javax.sql.DataSource javax.sql.DataSource ( ) { return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.User org.springframework.data.gemfire.support.User ( ) { Assert . state ( org.springframework.data.gemfire.support.User != null , STRING ) ; return org.springframework.data.gemfire.support.User ; }  <METHOD_END>
