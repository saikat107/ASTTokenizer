<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.cors.reactive.CorsConfiguration = new CorsConfiguration ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor = new DefaultCorsProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( null , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_MAX_AGE ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . setAllowCredentials ( true ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . setAllowCredentials ( true ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = org.springframework.web.cors.reactive.ServerWebExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addExposedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addExposedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) . contains ( STRING ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; assertNull ( org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedMethod ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedMethod ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_MAX_AGE ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . setAllowCredentials ( true ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . setAllowCredentials ( true ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_HEADERS ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_HEADERS ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . getFirst ( ACCESS_CONTROL_ALLOW_HEADERS ) . contains ( STRING ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . header ( ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedHeader ( STRING ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( this . org.springframework.web.cors.reactive.CorsConfiguration , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertTrue ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_HEADERS ) ) ; assertNull ( org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange = preFlightRequest ( ) . header ( ACCESS_CONTROL_REQUEST_METHOD , STRING ) . toExchange ( ) ; this . org.springframework.web.cors.reactive.CorsConfiguration . addAllowedOrigin ( STRING ) ; this . org.springframework.web.cors.reactive.DefaultCorsProcessor . processRequest ( null , org.springframework.web.cors.reactive.ServerWebExchange ) ; ServerHttpResponse org.springframework.web.cors.reactive.ServerHttpResponse = org.springframework.web.cors.reactive.ServerWebExchange . getResponse ( ) ; assertFalse ( org.springframework.web.cors.reactive.ServerHttpResponse . getHeaders ( ) . containsKey ( ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.web.cors.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.cors.reactive.ServerWebExchange org.springframework.web.cors.reactive.ServerWebExchange ( ) { return corsRequest ( HttpMethod . GET ) . toExchange ( ) ; }  <METHOD_END>
<METHOD_START> private MockServerHttpRequest . MockServerHttpRequest < ? > preFlightRequest ( ) { return corsRequest ( HttpMethod . OPTIONS ) ; }  <METHOD_END>
<METHOD_START> private MockServerHttpRequest . MockServerHttpRequest < ? > corsRequest ( HttpMethod org.springframework.web.cors.reactive.HttpMethod ) { return MockServerHttpRequest . method ( org.springframework.web.cors.reactive.HttpMethod , STRING ) . header ( HttpHeaders . ORIGIN , STRING ) ; }  <METHOD_END>
