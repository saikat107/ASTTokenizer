<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.test.autoconfigure.json.BasicJsonTester . from ( STRING ) ) . hasJsonPathStringValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExampleBasicObject org.springframework.boot.test.autoconfigure.json.ExampleBasicObject = new ExampleBasicObject ( ) ; org.springframework.boot.test.autoconfigure.json.ExampleBasicObject . setValue ( STRING ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.json.JacksonTester<org.springframework.boot.test.autoconfigure.json.ExampleBasicObject> . write ( org.springframework.boot.test.autoconfigure.json.ExampleBasicObject ) ) . isEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExampleCustomObject org.springframework.boot.test.autoconfigure.json.ExampleCustomObject = new ExampleCustomObject ( STRING ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.json.JacksonTester<org.springframework.boot.test.autoconfigure.json.ExampleCustomObject> . write ( org.springframework.boot.test.autoconfigure.json.ExampleCustomObject ) ) . isEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExampleBasicObject org.springframework.boot.test.autoconfigure.json.ExampleBasicObject = new ExampleBasicObject ( ) ; org.springframework.boot.test.autoconfigure.json.ExampleBasicObject . setValue ( STRING ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.json.GsonTester<org.springframework.boot.test.autoconfigure.json.ExampleBasicObject> . write ( org.springframework.boot.test.autoconfigure.json.ExampleBasicObject ) ) . isEqualToJson ( STRING ) ; }  <METHOD_END>
