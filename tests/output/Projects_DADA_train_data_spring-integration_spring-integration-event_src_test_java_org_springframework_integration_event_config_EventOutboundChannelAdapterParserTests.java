<METHOD_START> @ Test public void void ( ) { EventDrivenConsumer org.springframework.integration.event.config.EventDrivenConsumer = this . org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; Assert . assertNotNull ( org.springframework.integration.event.config.EventDrivenConsumer ) ; DirectFieldAccessor org.springframework.integration.event.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.event.config.EventDrivenConsumer ) ; MessageHandler org.springframework.integration.event.config.MessageHandler = ( MessageHandler ) org.springframework.integration.event.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; Assert . assertTrue ( org.springframework.integration.event.config.MessageHandler instanceof ApplicationEventPublishingMessageHandler ) ; Assert . assertEquals ( this . org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.integration.event.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; Assert . assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.event.config.MessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationListener < ? > org.springframework.integration.event.config.ApplicationListener<?> = event -> { if ( event instanceof PayloadApplicationEvent ) { String payload = ( String ) ( ( PayloadApplicationEvent < ? > ) event ) . getPayload ( ) ; if ( payload . equals ( STRING ) ) { receivedEvent = true ; } } } ; this . org.springframework.integration.event.config.ConfigurableApplicationContext . addApplicationListener ( org.springframework.integration.event.config.ApplicationListener<> ) ; DirectChannel org.springframework.integration.event.config.DirectChannel = org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.event.config.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Assert . assertTrue ( this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . boolean = false ; ApplicationListener < ? > org.springframework.integration.event.config.ApplicationListener<?> = event -> { Object source = event . getSource ( ) ; if ( source instanceof Message ) { String payload = ( String ) ( ( Message < ? > ) source ) . getPayload ( ) ; if ( payload . equals ( STRING ) ) { receivedEvent = true ; } } } ; org.springframework.integration.event.config.ConfigurableApplicationContext . addApplicationListener ( org.springframework.integration.event.config.ApplicationListener<> ) ; DirectChannel org.springframework.integration.event.config.DirectChannel = org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.event.config.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Assert . assertTrue ( this . boolean ) ; Assert . assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . boolean = false ; ApplicationListener < ? > org.springframework.integration.event.config.ApplicationListener<?> = event -> { Object source = event . getSource ( ) ; if ( source instanceof Message ) { String payload = ( String ) ( ( Message < ? > ) source ) . getPayload ( ) ; if ( payload . equals ( STRING ) ) { receivedEvent = true ; } } } ; this . org.springframework.integration.event.config.ConfigurableApplicationContext . addApplicationListener ( org.springframework.integration.event.config.ApplicationListener<> ) ; DirectChannel org.springframework.integration.event.config.DirectChannel = org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.event.config.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Assert . assertTrue ( this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) java.lang.Exception { this . boolean = false ; ConfigurableApplicationContext org.springframework.integration.event.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.event.config.EventOutboundChannelAdapterParserTests .class ) ; final java.util.concurrent.CyclicBarrier java.util.concurrent.CyclicBarrier = new java.util.concurrent.CyclicBarrier ( NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) ApplicationListener < ? > org.springframework.integration.event.config.ApplicationListener<?> = event -> { Object source = event . getSource ( ) ; if ( source instanceof Message ) { String payload = ( String ) ( ( Message < ? > ) source ) . getPayload ( ) ; if ( payload . equals ( STRING ) ) { receivedEvent = true ; try { barrier . await ( ) ; } catch ( InterruptedException e1 ) { Thread . currentThread ( ) . interrupt ( ) ; } catch ( BrokenBarrierException e2 ) { throw new IllegalStateException ( STRING , e2 ) ; } } } } ; org.springframework.integration.event.config.ConfigurableApplicationContext . addApplicationListener ( org.springframework.integration.event.config.ApplicationListener<> ) ; QueueChannel org.springframework.integration.event.config.QueueChannel = org.springframework.integration.event.config.ConfigurableApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.event.config.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CyclicBarrier . int ( ) ; Assert . assertTrue ( this . boolean ) ; org.springframework.integration.event.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.event.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.event.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.event.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
