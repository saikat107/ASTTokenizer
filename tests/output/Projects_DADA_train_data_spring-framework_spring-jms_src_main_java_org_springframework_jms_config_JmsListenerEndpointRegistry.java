<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.jms.config.ApplicationContext ) { this . org.springframework.jms.config.ApplicationContext = org.springframework.jms.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.jms.config.ContextRefreshedEvent ) { if ( org.springframework.jms.config.ContextRefreshedEvent . getApplicationContext ( ) == this . org.springframework.jms.config.ApplicationContext ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> public org.springframework.jms.config.MessageListenerContainer org.springframework.jms.config.MessageListenerContainer ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set ( this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.jms.config.MessageListenerContainer> < MessageListenerContainer > java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) { return java.util.Collections . java.util.Collection ( this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( JmsListenerEndpoint org.springframework.jms.config.JmsListenerEndpoint , JmsListenerContainerFactory < ? > org.springframework.jms.config.JmsListenerContainerFactory<?> , boolean boolean ) { Assert . notNull ( org.springframework.jms.config.JmsListenerEndpoint , STRING ) ; Assert . notNull ( org.springframework.jms.config.JmsListenerContainerFactory<> , STRING ) ; java.lang.String java.lang.String = org.springframework.jms.config.JmsListenerEndpoint . getId ( ) ; Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> ) { if ( this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> . containsKey ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } MessageListenerContainer org.springframework.jms.config.MessageListenerContainer = org.springframework.jms.config.MessageListenerContainer ( org.springframework.jms.config.JmsListenerEndpoint , org.springframework.jms.config.JmsListenerContainerFactory<> ) ; this . java.util.Map<java.lang.String,org.springframework.jms.config.MessageListenerContainer> . put ( java.lang.String , org.springframework.jms.config.MessageListenerContainer ) ; if ( boolean ) { void ( org.springframework.jms.config.MessageListenerContainer ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( JmsListenerEndpoint org.springframework.jms.config.JmsListenerEndpoint , JmsListenerContainerFactory < ? > org.springframework.jms.config.JmsListenerContainerFactory<?> ) { void ( org.springframework.jms.config.JmsListenerEndpoint , org.springframework.jms.config.JmsListenerContainerFactory<> , false ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.config.MessageListenerContainer org.springframework.jms.config.MessageListenerContainer ( JmsListenerEndpoint org.springframework.jms.config.JmsListenerEndpoint , JmsListenerContainerFactory < ? > org.springframework.jms.config.JmsListenerContainerFactory<?> ) { MessageListenerContainer org.springframework.jms.config.MessageListenerContainer = org.springframework.jms.config.JmsListenerContainerFactory<> . createListenerContainer ( org.springframework.jms.config.JmsListenerEndpoint ) ; if ( org.springframework.jms.config.MessageListenerContainer instanceof InitializingBean ) { try { ( ( InitializingBean ) org.springframework.jms.config.MessageListenerContainer ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } int int = org.springframework.jms.config.MessageListenerContainer . getPhase ( ) ; if ( int < java.lang.Integer . int ) { if ( this . int < java.lang.Integer . int && this . int != int ) { throw new java.lang.IllegalStateException ( STRING + this . int + STRING + int ) ; } this . int = org.springframework.jms.config.MessageListenerContainer . getPhase ( ) ; } return org.springframework.jms.config.MessageListenerContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer : java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) ) { void ( org.springframework.jms.config.MessageListenerContainer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer : java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) ) { org.springframework.jms.config.MessageListenerContainer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.util.Collection<org.springframework.jms.config.MessageListenerContainer> < MessageListenerContainer > java.util.Collection<org.springframework.jms.config.MessageListenerContainer> = java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) ; org.springframework.jms.config.JmsListenerEndpointRegistry.AggregatingCallback org.springframework.jms.config.JmsListenerEndpointRegistry.AggregatingCallback = new org.springframework.jms.config.JmsListenerEndpointRegistry.AggregatingCallback ( java.util.Collection<org.springframework.jms.config.MessageListenerContainer> . size ( ) , java.lang.Runnable ) ; for ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer : java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ) { org.springframework.jms.config.MessageListenerContainer . stop ( org.springframework.jms.config.JmsListenerEndpointRegistry.AggregatingCallback ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { for ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer : java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) ) { if ( org.springframework.jms.config.MessageListenerContainer . isRunning ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer ) { if ( this . boolean || org.springframework.jms.config.MessageListenerContainer . isAutoStartup ( ) ) { org.springframework.jms.config.MessageListenerContainer . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( MessageListenerContainer org.springframework.jms.config.MessageListenerContainer : java.util.Collection<org.springframework.jms.config.MessageListenerContainer> ( ) ) { if ( org.springframework.jms.config.MessageListenerContainer instanceof DisposableBean ) { try { ( ( DisposableBean ) org.springframework.jms.config.MessageListenerContainer ) . destroy ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jms.config.Log . warn ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> public void ( int int , java.lang.Runnable java.lang.Runnable ) { this . java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( int ) ; this . java.lang.Runnable = java.lang.Runnable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) == NUMBER ) { this . java.lang.Runnable . void ( ) ; } }  <METHOD_END>
