<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; this . org.springframework.integration.channel.interceptor.DirectChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = this . org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; org.springframework.integration.channel.interceptor.Message<?> = this . org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; int int = NUMBER ; while ( org.springframework.integration.channel.interceptor.Message<> != null ) { int ++ ; assertEquals ( org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) , org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) ) ; org.springframework.integration.channel.interceptor.Message<?> = this . org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; } assertEquals ( NUMBER , int ) ; assertNull ( this . org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.channel.interceptor.DirectChannel . getChannelInterceptors ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.interceptor.MessageChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.channel.interceptor.Message<> ) ; org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; int int = NUMBER ; while ( org.springframework.integration.channel.interceptor.Message<> != null ) { int ++ ; assertEquals ( org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) , org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) ) ; org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.PollableChannel . receive ( NUMBER ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
