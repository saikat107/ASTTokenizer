<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { com.foo.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( com.foo.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { com.foo.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> private com.foo.Component com.foo.Component ( ) { return com.foo.DefaultListableBeanFactory . getBean ( STRING , Component .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component com.foo.Component = com.foo.Component ( ) ; assertThat ( STRING , equalTo ( com.foo.Component . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component com.foo.Component = com.foo.Component ( ) ; java.util.List<com.foo.Component> < Component > java.util.List<com.foo.Component> = com.foo.Component . getComponents ( ) ; assertThat ( NUMBER , equalTo ( java.util.List<com.foo.Component> . size ( ) ) ) ; assertThat ( STRING , equalTo ( java.util.List<com.foo.Component> . get ( NUMBER ) . getName ( ) ) ) ; assertThat ( STRING , equalTo ( java.util.List<com.foo.Component> . get ( NUMBER ) . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component com.foo.Component = com.foo.Component ( ) ; java.util.List<com.foo.Component> < Component > java.util.List<com.foo.Component> = com.foo.Component . getComponents ( ) . get ( NUMBER ) . getComponents ( ) ; assertThat ( NUMBER , equalTo ( java.util.List<com.foo.Component> . size ( ) ) ) ; assertThat ( STRING , equalTo ( java.util.List<com.foo.Component> . get ( NUMBER ) . getName ( ) ) ) ; assertThat ( STRING , equalTo ( java.util.List<com.foo.Component> . get ( NUMBER ) . getName ( ) ) ) ; }  <METHOD_END>
