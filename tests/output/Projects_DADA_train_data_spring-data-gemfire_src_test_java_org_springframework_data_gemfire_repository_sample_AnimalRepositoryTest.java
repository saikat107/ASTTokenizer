<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.Animal org.springframework.data.gemfire.repository.sample.Animal ( long long , java.lang.String java.lang.String ) { Animal org.springframework.data.gemfire.repository.sample.Animal = new Animal ( ) ; org.springframework.data.gemfire.repository.sample.Animal . setId ( long ) ; org.springframework.data.gemfire.repository.sample.Animal . setName ( java.lang.String ) ; return org.springframework.data.gemfire.repository.sample.Animal ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.Animal ( NUMBER , STRING ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.Animal ( NUMBER , STRING ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.Animal ( NUMBER , STRING ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.Animal ( NUMBER , STRING ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . save ( org.springframework.data.gemfire.repository.sample.Animal ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . save ( org.springframework.data.gemfire.repository.sample.Animal ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . save ( org.springframework.data.gemfire.repository.sample.Animal ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.sample.DogRepository . save ( org.springframework.data.gemfire.repository.sample.Animal ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.sample.DogRepository . save ( org.springframework.data.gemfire.repository.sample.Animal ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . count ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.sample.DogRepository . count ( ) ) . isEqualTo ( NUMBER ) ; java.util.Optional<org.springframework.data.gemfire.repository.sample.Animal> < Animal > java.util.Optional<org.springframework.data.gemfire.repository.sample.Animal> = org.springframework.data.gemfire.repository.sample.CatRepository . findOne ( NUMBER ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.repository.sample.Animal> . isPresent ( ) ) . isTrue ( ) ; assertThat ( java.util.Optional<org.springframework.data.gemfire.repository.sample.Animal> . get ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.CatRepository . findBy ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.sample.Animal ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.CatRepository . findByName ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.sample.Animal ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . findBy ( STRING ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; assertThat ( org.springframework.data.gemfire.repository.sample.CatRepository . findOne ( NUMBER ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.DogRepository . findBy ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.sample.Animal ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; Animal org.springframework.data.gemfire.repository.sample.Animal = org.springframework.data.gemfire.repository.sample.DogRepository . findByName ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.sample.Animal ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; assertThat ( org.springframework.data.gemfire.repository.sample.DogRepository . findBy ( STRING ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; assertThat ( org.springframework.data.gemfire.repository.sample.DogRepository . findOne ( NUMBER ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.sample.Animal ) ; }  <METHOD_END>
