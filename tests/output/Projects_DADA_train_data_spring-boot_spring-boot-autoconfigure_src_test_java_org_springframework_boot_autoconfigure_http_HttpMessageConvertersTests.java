<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = new HttpMessageConverters ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.http.HttpMessageConverters ) { java.util.List<java.lang.Class<?>> . boolean ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> . getClass ( ) ) ; } assertThat ( java.util.List<java.lang.Class<?>> ) . containsExactly ( ByteArrayHttpMessageConverter .class , StringHttpMessageConverter .class , ResourceHttpMessageConverter .class , SourceHttpMessageConverter .class , AllEncompassingFormHttpMessageConverter .class , MappingJackson2HttpMessageConverter .class , MappingJackson2SmileHttpMessageConverter .class , MappingJackson2CborHttpMessageConverter .class , MappingJackson2XmlHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingJackson2HttpMessageConverter org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) ; MappingJackson2HttpMessageConverter org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) ; HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = new HttpMessageConverters ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter , org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . contains ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . contains ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ) . isTrue ( ) ; java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> < MappingJackson2HttpMessageConverter > java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> = new java.util.ArrayList<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.http.HttpMessageConverters ) { if ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> instanceof MappingJackson2HttpMessageConverter ) { java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> . add ( ( MappingJackson2HttpMessageConverter ) org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; } } assertThat ( java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> . indexOf ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter> . indexOf ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . indexOf ( org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ) ) . isNotEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = new HttpMessageConverters ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> , org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . get ( NUMBER ) ) . isEqualTo ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . get ( NUMBER ) ) . isEqualTo ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> = mock ( HttpMessageConverter .class ) ; java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = new HttpMessageConverters ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> , org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) . getConverters ( ) ; java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . get ( NUMBER ) ) . isEqualTo ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . get ( NUMBER ) ) . isEqualTo ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = new HttpMessageConverters ( ) { @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { for ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . iterator ( ) ; java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . next ( ) instanceof MappingJackson2XmlHttpMessageConverter ) { java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . remove ( ) ; } } return java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ; } ;		} ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.http.HttpMessageConverters ) { java.util.List<java.lang.Class<?>> . boolean ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> . getClass ( ) ) ; } assertThat ( java.util.List<java.lang.Class<?>> ) . containsExactly ( ByteArrayHttpMessageConverter .class , StringHttpMessageConverter .class , ResourceHttpMessageConverter .class , SourceHttpMessageConverter .class , AllEncompassingFormHttpMessageConverter .class , MappingJackson2HttpMessageConverter .class , MappingJackson2SmileHttpMessageConverter .class , MappingJackson2CborHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { for ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . iterator ( ) ; java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . next ( ) instanceof MappingJackson2XmlHttpMessageConverter ) { java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . remove ( ) ; } } return java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = new HttpMessageConverters ( ) { @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { for ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . iterator ( ) ; java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . next ( ) instanceof MappingJackson2XmlHttpMessageConverter ) { java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . remove ( ) ; } } return java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ; } ;		} ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> : java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) ) ) { java.util.List<java.lang.Class<?>> . boolean ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> . getClass ( ) ) ; } assertThat ( java.util.List<java.lang.Class<?>> ) . containsExactly ( ByteArrayHttpMessageConverter .class , StringHttpMessageConverter .class , ResourceHttpMessageConverter .class , SourceHttpMessageConverter .class , MappingJackson2HttpMessageConverter .class , MappingJackson2SmileHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { for ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> = java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . iterator ( ) ; java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . hasNext ( ) ;) { if ( java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . next ( ) instanceof MappingJackson2XmlHttpMessageConverter ) { java.util.Iterator<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> . remove ( ) ; } } return java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { AllEncompassingFormHttpMessageConverter org.springframework.boot.autoconfigure.http.AllEncompassingFormHttpMessageConverter = org.springframework.boot.autoconfigure.http.AllEncompassingFormHttpMessageConverter ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) ; return ( java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.http.AllEncompassingFormHttpMessageConverter , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.http.AllEncompassingFormHttpMessageConverter org.springframework.boot.autoconfigure.http.AllEncompassingFormHttpMessageConverter ( java.util.Collection<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.Collection<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.http.HttpMessageConverter<?> : java.util.Collection<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>> ) { if ( org.springframework.boot.autoconfigure.http.HttpMessageConverter<> instanceof AllEncompassingFormHttpMessageConverter ) { return ( AllEncompassingFormHttpMessageConverter ) org.springframework.boot.autoconfigure.http.HttpMessageConverter<> ; } } return null ; }  <METHOD_END>
