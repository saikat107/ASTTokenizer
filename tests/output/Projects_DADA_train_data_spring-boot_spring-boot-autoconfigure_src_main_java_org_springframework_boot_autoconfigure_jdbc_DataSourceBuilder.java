<METHOD_START> public static org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( ) { return new org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.ClassLoader java.lang.ClassLoader ) { return new org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public javax.sql.DataSource javax.sql.DataSource ( ) { java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> = java.lang.Class<? extends javax.sql.DataSource> ( ) ; javax.sql.DataSource javax.sql.DataSource = BeanUtils . instantiateClass ( java.lang.Class<> ) ; void ( ) ; void ( javax.sql.DataSource ) ; return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! this . java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) && this . java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) { java.lang.String java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ; java.lang.String java.lang.String = DatabaseDriver . fromJdbcUrl ( java.lang.String ) . getDriverClassName ( ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.sql.DataSource javax.sql.DataSource ) { MutablePropertyValues org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues = new MutablePropertyValues ( this . java.util.Map<java.lang.String,java.lang.String> ) ; new RelaxedDataBinder ( javax.sql.DataSource ) . withAlias ( STRING , STRING ) . withAlias ( STRING , STRING ) . bind ( org.springframework.boot.autoconfigure.jdbc.MutablePropertyValues ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> ) { this . java.lang.Class<? extends javax.sql.DataSource> = java.lang.Class<> ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> ( ) { if ( this . java.lang.Class<> != null ) { return this . java.lang.Class<> ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { try { return ( java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > ) ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> ( ) { java.lang.Class<? extends javax.sql.DataSource> < ? extends javax.sql.DataSource > java.lang.Class<? extends javax.sql.DataSource> = java.lang.Class<? extends javax.sql.DataSource> ( ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
