<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . java.lang.Object = new java.lang.Object ( ) ; this . org.springframework.web.servlet.HandlerExecutionChain = new HandlerExecutionChain ( this . java.lang.Object ) ; this . org.springframework.web.servlet.AsyncHandlerInterceptor = mock ( AsyncHandlerInterceptor .class ) ; this . org.springframework.web.servlet.AsyncHandlerInterceptor = mock ( AsyncHandlerInterceptor .class ) ; this . org.springframework.web.servlet.AsyncHandlerInterceptor = mock ( AsyncHandlerInterceptor .class ) ; this . org.springframework.web.servlet.HandlerExecutionChain . addInterceptor ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) ; this . org.springframework.web.servlet.HandlerExecutionChain . addInterceptor ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.HandlerExecutionChain . getInterceptors ( ) . length ) ; this . org.springframework.web.servlet.HandlerExecutionChain . addInterceptor ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.HandlerExecutionChain . getInterceptors ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAndView org.springframework.web.servlet.ModelAndView = new ModelAndView ( ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyPreHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyPostHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse , org.springframework.web.servlet.ModelAndView ) ; this . org.springframework.web.servlet.HandlerExecutionChain . triggerAfterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , null ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . postHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , org.springframework.web.servlet.ModelAndView ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . postHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , org.springframework.web.servlet.ModelAndView ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . postHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , org.springframework.web.servlet.ModelAndView ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , null ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , null ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyPreHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyAfterConcurrentHandlingStarted ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; this . org.springframework.web.servlet.HandlerExecutionChain . triggerAfterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , null ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterConcurrentHandlingStarted ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterConcurrentHandlingStarted ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterConcurrentHandlingStarted ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( false ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyPreHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.HandlerExecutionChain . triggerAfterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , null ) ; verifyZeroInteractions ( this . org.springframework.web.servlet.AsyncHandlerInterceptor , this . org.springframework.web.servlet.AsyncHandlerInterceptor , this . org.springframework.web.servlet.AsyncHandlerInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willThrow ( java.lang.Exception ) ; try { this . org.springframework.web.servlet.HandlerExecutionChain . applyPreHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertSame ( java.lang.Exception , java.lang.Exception ) ; } this . org.springframework.web.servlet.HandlerExecutionChain . triggerAfterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , java.lang.Exception ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , java.lang.Exception ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor , never ( ) ) . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; given ( this . org.springframework.web.servlet.AsyncHandlerInterceptor . preHandle ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object ) ) . willReturn ( true ) ; this . org.springframework.web.servlet.HandlerExecutionChain . applyPreHandle ( org.springframework.web.servlet.MockHttpServletRequest , org.springframework.web.servlet.MockHttpServletResponse ) ; this . org.springframework.web.servlet.HandlerExecutionChain . triggerAfterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , java.lang.Exception ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , java.lang.Exception ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , java.lang.Exception ) ; verify ( this . org.springframework.web.servlet.AsyncHandlerInterceptor ) . afterCompletion ( this . org.springframework.web.servlet.MockHttpServletRequest , this . org.springframework.web.servlet.MockHttpServletResponse , this . java.lang.Object , java.lang.Exception ) ; }  <METHOD_END>
