<METHOD_START> public void ( ) { setSimpleTypeHolder ( MongoSimpleTypes . HOLDER ) ; }  <METHOD_END>
<METHOD_START> public void void ( FieldNamingStrategy org.springframework.data.mongodb.core.mapping.FieldNamingStrategy ) { this . org.springframework.data.mongodb.core.mapping.FieldNamingStrategy = org.springframework.data.mongodb.core.mapping.FieldNamingStrategy == null ? org.springframework.data.mongodb.core.mapping.FieldNamingStrategy : org.springframework.data.mongodb.core.mapping.FieldNamingStrategy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( TypeInformation < ? > org.springframework.data.mongodb.core.mapping.TypeInformation<?> ) { return ! MongoSimpleTypes . HOLDER . isSimpleType ( org.springframework.data.mongodb.core.mapping.TypeInformation<> . getType ( ) ) && ! java.util.AbstractMap .class . boolean ( org.springframework.data.mongodb.core.mapping.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.mapping.MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ( Property org.springframework.data.mongodb.core.mapping.Property , BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<?> , SimpleTypeHolder org.springframework.data.mongodb.core.mapping.SimpleTypeHolder ) { return new CachingMongoPersistentProperty ( org.springframework.data.mongodb.core.mapping.Property , org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> , org.springframework.data.mongodb.core.mapping.SimpleTypeHolder , org.springframework.data.mongodb.core.mapping.FieldNamingStrategy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<T> < T > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<T> ( TypeInformation < T > org.springframework.data.mongodb.core.mapping.TypeInformation<T> ) { BasicMongoPersistentEntity < T > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<T> = new BasicMongoPersistentEntity < T > ( org.springframework.data.mongodb.core.mapping.TypeInformation<T> ) ; if ( org.springframework.data.mongodb.core.mapping.ApplicationContext != null ) { org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<T> . setApplicationContext ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; } return org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.mongodb.core.mapping.ApplicationContext ) throws org.springframework.data.mongodb.core.mapping.BeansException { this . org.springframework.data.mongodb.core.mapping.ApplicationContext = org.springframework.data.mongodb.core.mapping.ApplicationContext ; }  <METHOD_END>
