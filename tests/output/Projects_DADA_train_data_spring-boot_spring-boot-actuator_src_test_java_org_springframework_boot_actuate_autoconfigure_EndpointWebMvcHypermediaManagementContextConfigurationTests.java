<METHOD_START> @ Before public void void ( ) { RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( new MockHttpServletRequest ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBeansOfType ( ManagementServletContext .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBeansOfType ( HalJsonMvcEndpoint .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBeansOfType ( DocsMvcEndpoint .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBeansOfType ( DefaultCurieProvider .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; assertThat ( java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; assertThat ( java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setClassLoader ( new java.lang.ClassLoader ( java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfigurationTests> ( ) . java.lang.ClassLoader ( ) ) { @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return super. java.net.URL ( STRING ) ; } return super. java.net.URL ( java.lang.String ) ; } } ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfigurationTests.TestConfiguration .class , HttpMessageConvertersAutoConfiguration .class , EndpointWebMvcHypermediaManagementContextConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return super. java.net.URL ( STRING ) ; } return super. java.net.URL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { DefaultCurieProvider org.springframework.boot.actuate.autoconfigure.DefaultCurieProvider = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( DefaultCurieProvider .class ) ; Link org.springframework.boot.actuate.autoconfigure.Link = ( Link ) org.springframework.boot.actuate.autoconfigure.DefaultCurieProvider . getCurieInformation ( null ) . iterator ( ) . next ( ) ; return org.springframework.boot.actuate.autoconfigure.Link . getHref ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.MvcEndpoints org.springframework.boot.actuate.autoconfigure.MvcEndpoints ( ) { return new MvcEndpoints ( ) ; }  <METHOD_END>
