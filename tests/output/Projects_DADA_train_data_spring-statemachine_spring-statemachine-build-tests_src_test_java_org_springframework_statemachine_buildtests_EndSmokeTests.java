<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.buildtests.EndSmokeTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.buildtests.EndSmokeTests.TestThread org.springframework.statemachine.buildtests.EndSmokeTests.TestThread = new org.springframework.statemachine.buildtests.EndSmokeTests.TestThread ( org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.buildtests.EndSmokeTests.TestThread . void ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; org.springframework.statemachine.buildtests.EndSmokeTests.TestThread . boolean = false ; org.springframework.statemachine.buildtests.EndSmokeTests.TestThread . void ( ) ; assertThat ( org.springframework.statemachine.buildtests.EndSmokeTests.TestThread . java.lang.Exception , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.buildtests.EndSmokeTests.TestThread . boolean , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> ) { this . org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { while ( boolean ) { try { if ( org.springframework.statemachine.buildtests.StateMachine<java.lang.String,java.lang.String> . getState ( ) == null ) { boolean = false ; boolean = false ; } } catch ( java.lang.Exception java.lang.Exception ) { this . java.lang.Exception = java.lang.Exception ; boolean = false ; boolean = false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.buildtests.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineModelConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.buildtests.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.buildtests.AnnotationConfigApplicationContext org.springframework.statemachine.buildtests.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
