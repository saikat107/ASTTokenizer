<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway ) throws java.lang.Exception { int int = NUMBER ; while ( ! org.springframework.integration.ip.tcp.TcpInboundGateway . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { throw new java.lang.Exception ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpOutboundGateway org.springframework.integration.ip.tcp.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.TcpInboundGateway ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; @ java.lang.SuppressWarnings ( STRING ) byte [] byte[] = ( ( Message < byte [] > ) org.springframework.integration.ip.tcp.TcpOutboundGateway . handleRequestMessage ( org.springframework.integration.ip.tcp.Message<java.lang.String> ) ) . getPayload ( ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpOutboundGateway org.springframework.integration.ip.tcp.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.TcpInboundGateway ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.Object java.lang.Object = ( ( Message < java.lang.Object > ) org.springframework.integration.ip.tcp.TcpOutboundGateway . handleRequestMessage ( org.springframework.integration.ip.tcp.Message<java.lang.String> ) ) . getPayload ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpOutboundGateway org.springframework.integration.ip.tcp.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.TcpInboundGateway ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; @ java.lang.SuppressWarnings ( STRING ) byte [] byte[] = ( ( Message < byte [] > ) org.springframework.integration.ip.tcp.TcpOutboundGateway . handleRequestMessage ( org.springframework.integration.ip.tcp.Message<java.lang.String> ) ) . getPayload ( ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.ip.tcp.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; byte [] byte[] = ( byte [] ) org.springframework.integration.ip.tcp.PollableChannel . receive ( ) . getPayload ( ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Message < java.lang.String > org.springframework.integration.ip.tcp.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.ip.tcp.SubscribableChannel . send ( org.springframework.integration.ip.tcp.Message<java.lang.String> ) ; byte [] byte[] = ( byte [] ) org.springframework.integration.ip.tcp.PollableChannel . receive ( ) . getPayload ( ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Message < java.lang.String > org.springframework.integration.ip.tcp.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.ip.tcp.SubscribableChannel . send ( org.springframework.integration.ip.tcp.Message<java.lang.String> ) ; byte [] byte[] = ( byte [] ) org.springframework.integration.ip.tcp.PollableChannel . receive ( ) . getPayload ( ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { if ( org.springframework.integration.ip.tcp.AbstractApplicationContext == null ) { org.springframework.integration.ip.tcp.AbstractApplicationContext = org.springframework.integration.ip.tcp.AbstractApplicationContext ; } }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.ip.tcp.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
