<METHOD_START> public void ( MongoEntityInformation < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , ReactiveMongoOperations org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.support.ReactiveMongoOperations , STRING ) ; this . org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> = org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ; this . org.springframework.data.mongodb.repository.support.ReactiveMongoOperations = org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<T> < T > org.springframework.data.mongodb.repository.support.Mono<T> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . findById ( ID , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<T> < T > org.springframework.data.mongodb.repository.support.Mono<T> ( Mono < ID > org.springframework.data.mongodb.repository.support.Mono<ID> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Mono<ID> , STRING ) ; return org.springframework.data.mongodb.repository.support.Mono<ID> . then ( id -> mongoOperations . findById ( id , entityInformation . getJavaType ( ) , entityInformation . getCollectionName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public < S extends T > org.springframework.data.mongodb.repository.support.Mono<S> < S > org.springframework.data.mongodb.repository.support.Mono<S> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . findOne ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . exists ( org.springframework.data.mongodb.repository.support.Query ( ID ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> ( Mono < ID > org.springframework.data.mongodb.repository.support.Mono<ID> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Mono<ID> , STRING ) ; return org.springframework.data.mongodb.repository.support.Mono<ID> . then ( id -> mongoOperations . exists ( getIdQuery ( id ) , entityInformation . getJavaType ( ) , entityInformation . getCollectionName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public < S extends T > org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.mongodb.repository.support.Mono<java.lang.Boolean> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . exists ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Flux<T> < T > org.springframework.data.mongodb.repository.support.Flux<T> ( ) { return org.springframework.data.mongodb.repository.support.Flux<T> ( new Query ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Flux<T> < T > org.springframework.data.mongodb.repository.support.Flux<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { Assert . notNull ( java.lang.Iterable<ID> , STRING ) ; java.util.Set<ID> < ID > java.util.Set<ID> = new java.util.HashSet<ID> < ID > ( int ( java.lang.Iterable<ID> , NUMBER ) ) ; for ( ID ID : java.lang.Iterable<ID> ) { java.util.Set<ID> . boolean ( ID ) ; } return org.springframework.data.mongodb.repository.support.Flux<T> ( new Query ( new Criteria ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getIdAttribute ( ) ) . in ( java.util.Set<ID> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Flux<T> < T > org.springframework.data.mongodb.repository.support.Flux<T> ( Publisher < ID > org.springframework.data.mongodb.repository.support.Publisher<ID> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Publisher<ID> , STRING ) ; return Flux . from ( org.springframework.data.mongodb.repository.support.Publisher<ID> ) . buffer ( ) . flatMap ( this :: findAll ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Flux<T> < T > org.springframework.data.mongodb.repository.support.Flux<T> ( Sort org.springframework.data.mongodb.repository.support.Sort ) { return org.springframework.data.mongodb.repository.support.Flux<T> ( new Query ( ) . with ( org.springframework.data.mongodb.repository.support.Sort ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> , Sort org.springframework.data.mongodb.repository.support.Sort ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; if ( org.springframework.data.mongodb.repository.support.Sort != null ) { org.springframework.data.mongodb.repository.support.Query . with ( org.springframework.data.mongodb.repository.support.Sort ) ; } return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . find ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { return org.springframework.data.mongodb.repository.support.Flux ( org.springframework.data.mongodb.repository.support.Example<S> , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.mongodb.repository.support.Mono<java.lang.Long> ( ) { return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . count ( new Query ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public < S extends T > org.springframework.data.mongodb.repository.support.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.mongodb.repository.support.Mono<java.lang.Long> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . count ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Mono<S> < S > org.springframework.data.mongodb.repository.support.Mono<S> ( S S ) { Assert . notNull ( S , STRING ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . insert ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = java.util.List<S> ( java.lang.Iterable<S> ) ; if ( java.util.List<S> . boolean ( ) ) { return Flux . empty ( ) ; } return Flux . from ( org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . insertAll ( java.util.List<S> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( Publisher < S > org.springframework.data.mongodb.repository.support.Publisher<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Publisher<S> , STRING ) ; return Flux . from ( org.springframework.data.mongodb.repository.support.Publisher<S> ) . flatMap ( entity -> mongoOperations . insert ( entity , entityInformation . getCollectionName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public < S extends T > org.springframework.data.mongodb.repository.support.Mono<S> < S > org.springframework.data.mongodb.repository.support.Mono<S> ( S S ) { Assert . notNull ( S , STRING ) ; if ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . isNew ( S ) ) { return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . insert ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; } return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . save ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = java.util.List<S> ( java.lang.Iterable<S> ) ; boolean boolean = true ; for ( S S : java.lang.Iterable<S> ) { if ( boolean && ! org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . isNew ( S ) ) { boolean = false ; } } if ( boolean ) { return Flux . from ( org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . insertAll ( java.util.List<S> ) ) ; } java.util.List<org.springframework.data.mongodb.repository.support.Mono<S>> < Mono < S > > java.util.List<org.springframework.data.mongodb.repository.support.Mono<S>> = new java.util.ArrayList<org.springframework.data.mongodb.repository.support.Mono<S>> <> ( ) ; for ( S S : java.util.List<S> ) { java.util.List<org.springframework.data.mongodb.repository.support.Mono<S>> . add ( org.springframework.data.mongodb.repository.support.Mono<S> ( S ) ) ; } return Flux . merge ( java.util.List<org.springframework.data.mongodb.repository.support.Mono<S>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Flux<S> < S > org.springframework.data.mongodb.repository.support.Flux<S> ( Publisher < S > org.springframework.data.mongodb.repository.support.Publisher<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Publisher<S> , STRING ) ; return Flux . from ( org.springframework.data.mongodb.repository.support.Publisher<S> ) . flatMap ( entity -> { if ( entityInformation . isNew ( entity ) ) { return mongoOperations . insert ( entity , entityInformation . getCollectionName ( ) ) . then ( aVoid -> Mono . just ( entity ) ) ; } return mongoOperations . save ( entity , entityInformation . getCollectionName ( ) ) . then ( aVoid -> Mono . just ( entity ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . remove ( org.springframework.data.mongodb.repository.support.Query ( ID ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( T T ) { Assert . notNull ( T , STRING ) ; return org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getId ( T ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { Assert . notNull ( java.lang.Iterable<> , STRING ) ; return Flux . fromIterable ( java.lang.Iterable<> ) . flatMap ( entity -> delete ( entityInformation . getId ( entity ) . get ( ) ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( Publisher < ? extends T > org.springframework.data.mongodb.repository.support.Publisher<? extends T> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Publisher<> , STRING ) ; return Flux . from ( org.springframework.data.mongodb.repository.support.Publisher<> ) . flatMap ( entity -> delete ( entityInformation . getId ( entity ) . get ( ) ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.mongodb.repository.support.Mono<java.lang.Void> ( ) { return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . remove ( new Query ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) . then ( deleteResult -> Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.Query org.springframework.data.mongodb.repository.support.Query ( java.lang.Object java.lang.Object ) { return new Query ( org.springframework.data.mongodb.repository.support.Criteria ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.Criteria org.springframework.data.mongodb.repository.support.Criteria ( java.lang.Object java.lang.Object ) { return where ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getIdAttribute ( ) ) . is ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.Flux<T> < T > org.springframework.data.mongodb.repository.support.Flux<T> ( Query org.springframework.data.mongodb.repository.support.Query ) { if ( org.springframework.data.mongodb.repository.support.Query == null ) { return Flux . empty ( ) ; } return org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . find ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { if ( java.lang.Iterable<T> instanceof java.util.List ) { return ( java.util.List<T> < T > ) java.lang.Iterable<T> ; } int int = int ( java.lang.Iterable<T> , NUMBER ) ; if ( int == NUMBER || java.lang.Iterable<T> == null ) { return java.util.Collections . java.util.List<T> ( ) ; } java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( int ) ; for ( T T : java.lang.Iterable<T> ) { java.util.List<T> . boolean ( T ) ; } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> , int int ) { return java.lang.Iterable<> == null ? NUMBER : ( java.lang.Iterable<> instanceof java.util.Collection ) ? ( ( java.util.Collection<?> < ? > ) java.lang.Iterable<> ) . int ( ) : int ; }  <METHOD_END>
