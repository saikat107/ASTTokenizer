<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , Environment org.springframework.context.annotation.Environment , ResourceLoader org.springframework.context.annotation.ResourceLoader ) { this . org.springframework.context.annotation.ConditionEvaluator.ConditionContextImpl = new org.springframework.context.annotation.ConditionEvaluator.ConditionContextImpl ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.Environment , org.springframework.context.annotation.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return boolean ( org.springframework.context.annotation.AnnotatedTypeMetadata , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata , ConfigurationPhase org.springframework.context.annotation.ConfigurationPhase ) { if ( org.springframework.context.annotation.AnnotatedTypeMetadata == null || ! org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( Conditional .class . java.lang.String ( ) ) ) { return false ; } if ( org.springframework.context.annotation.ConfigurationPhase == null ) { if ( org.springframework.context.annotation.AnnotatedTypeMetadata instanceof AnnotationMetadata && ConfigurationClassUtils . isConfigurationCandidate ( ( AnnotationMetadata ) org.springframework.context.annotation.AnnotatedTypeMetadata ) ) { return boolean ( org.springframework.context.annotation.AnnotatedTypeMetadata , ConfigurationPhase . PARSE_CONFIGURATION ) ; } return boolean ( org.springframework.context.annotation.AnnotatedTypeMetadata , ConfigurationPhase . REGISTER_BEAN ) ; } java.util.List<org.springframework.context.annotation.Condition> < Condition > java.util.List<org.springframework.context.annotation.Condition> = new java.util.ArrayList<org.springframework.context.annotation.Condition> <> ( ) ; for ( java.lang.String [] java.lang.String[] : java.util.List<java.lang.String[]> ( org.springframework.context.annotation.AnnotatedTypeMetadata ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { Condition org.springframework.context.annotation.Condition = org.springframework.context.annotation.Condition ( java.lang.String , this . org.springframework.context.annotation.ConditionEvaluator.ConditionContextImpl . java.lang.ClassLoader ( ) ) ; java.util.List<org.springframework.context.annotation.Condition> . add ( org.springframework.context.annotation.Condition ) ; } } AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.context.annotation.Condition> ) ; for ( Condition org.springframework.context.annotation.Condition : java.util.List<org.springframework.context.annotation.Condition> ) { ConfigurationPhase org.springframework.context.annotation.ConfigurationPhase = null ; if ( org.springframework.context.annotation.Condition instanceof ConfigurationCondition ) { org.springframework.context.annotation.ConfigurationPhase = ( ( ConfigurationCondition ) org.springframework.context.annotation.Condition ) . getConfigurationPhase ( ) ; } if ( org.springframework.context.annotation.ConfigurationPhase == null || org.springframework.context.annotation.ConfigurationPhase == org.springframework.context.annotation.ConfigurationPhase ) { if ( ! org.springframework.context.annotation.Condition . matches ( this . org.springframework.context.annotation.ConditionEvaluator.ConditionContextImpl , org.springframework.context.annotation.AnnotatedTypeMetadata ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> ( AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.context.annotation.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotatedTypeMetadata . getAllAnnotationAttributes ( Conditional .class . java.lang.String ( ) , true ) ; java.lang.Object java.lang.Object = ( org.springframework.context.annotation.MultiValueMap<java.lang.String,java.lang.Object> != null ? org.springframework.context.annotation.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) : null ) ; return ( java.util.List<java.lang.String[]> < java.lang.String [] > ) ( java.lang.Object != null ? java.lang.Object : java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.Condition org.springframework.context.annotation.Condition ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , java.lang.ClassLoader ) ; return ( Condition ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , Environment org.springframework.context.annotation.Environment , ResourceLoader org.springframework.context.annotation.ResourceLoader ) { this . org.springframework.context.annotation.BeanDefinitionRegistry = org.springframework.context.annotation.BeanDefinitionRegistry ; this . org.springframework.context.annotation.ConfigurableListableBeanFactory = org.springframework.context.annotation.ConfigurableListableBeanFactory ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; this . org.springframework.context.annotation.Environment = ( org.springframework.context.annotation.Environment != null ? org.springframework.context.annotation.Environment : org.springframework.context.annotation.Environment ( org.springframework.context.annotation.BeanDefinitionRegistry ) ) ; this . org.springframework.context.annotation.ResourceLoader = ( org.springframework.context.annotation.ResourceLoader != null ? org.springframework.context.annotation.ResourceLoader : org.springframework.context.annotation.ResourceLoader ( org.springframework.context.annotation.BeanDefinitionRegistry ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof ConfigurableListableBeanFactory ) { return ( ConfigurableListableBeanFactory ) org.springframework.context.annotation.BeanDefinitionRegistry ; } if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof ConfigurableApplicationContext ) { return ( ( ( ConfigurableApplicationContext ) org.springframework.context.annotation.BeanDefinitionRegistry ) . getBeanFactory ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.Environment org.springframework.context.annotation.Environment ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof EnvironmentCapable ) { return ( ( EnvironmentCapable ) org.springframework.context.annotation.BeanDefinitionRegistry ) . getEnvironment ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.ResourceLoader org.springframework.context.annotation.ResourceLoader ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof ResourceLoader ) { return ( ResourceLoader ) org.springframework.context.annotation.BeanDefinitionRegistry ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ( ) { return this . org.springframework.context.annotation.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ( ) { return this . org.springframework.context.annotation.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.Environment org.springframework.context.annotation.Environment ( ) { return this . org.springframework.context.annotation.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ResourceLoader org.springframework.context.annotation.ResourceLoader ( ) { return this . org.springframework.context.annotation.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { if ( this . org.springframework.context.annotation.ResourceLoader != null ) { return this . org.springframework.context.annotation.ResourceLoader . getClassLoader ( ) ; } if ( this . org.springframework.context.annotation.ConfigurableListableBeanFactory != null ) { return this . org.springframework.context.annotation.ConfigurableListableBeanFactory . getBeanClassLoader ( ) ; } return null ; }  <METHOD_END>
