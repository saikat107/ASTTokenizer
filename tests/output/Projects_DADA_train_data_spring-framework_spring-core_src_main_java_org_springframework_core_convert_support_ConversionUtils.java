<METHOD_START> public static java.lang.Object java.lang.Object ( GenericConverter org.springframework.core.convert.support.GenericConverter , java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { try { return org.springframework.core.convert.support.GenericConverter . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } catch ( ConversionFailedException org.springframework.core.convert.support.ConversionFailedException ) { throw org.springframework.core.convert.support.ConversionFailedException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ConversionFailedException ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor , java.lang.Object , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , ConversionService org.springframework.core.convert.support.ConversionService ) { if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return true ; } if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return true ; } if ( org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) { return true ; } else if ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) . isAssignableFrom ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ) { return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; while ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } Assert . notNull ( java.lang.Class<> , ( ) STRING + targetType . getName ( ) + STRING ) ; return java.lang.Class<> ; }  <METHOD_END>
