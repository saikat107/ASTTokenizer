<METHOD_START> public void ( ByteBufAllocator org.springframework.core.io.buffer.ByteBufAllocator ) { Assert . notNull ( org.springframework.core.io.buffer.ByteBufAllocator , STRING ) ; this . org.springframework.core.io.buffer.ByteBufAllocator = org.springframework.core.io.buffer.ByteBufAllocator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( ) { ByteBuf org.springframework.core.io.buffer.ByteBuf = this . org.springframework.core.io.buffer.ByteBufAllocator . buffer ( ) ; return new NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( int int ) { ByteBuf org.springframework.core.io.buffer.ByteBuf = this . org.springframework.core.io.buffer.ByteBufAllocator . buffer ( int ) ; return new NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( java.nio.ByteBuffer java.nio.ByteBuffer ) { ByteBuf org.springframework.core.io.buffer.ByteBuf = Unpooled . wrappedBuffer ( java.nio.ByteBuffer ) ; return new NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( byte [] byte[] ) { ByteBuf org.springframework.core.io.buffer.ByteBuf = Unpooled . wrappedBuffer ( byte[] ) ; return new NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.io.buffer.NettyDataBuffer org.springframework.core.io.buffer.NettyDataBuffer ( ByteBuf org.springframework.core.io.buffer.ByteBuf ) { return new NettyDataBuffer ( org.springframework.core.io.buffer.ByteBuf , this ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.io.buffer.ByteBuf org.springframework.core.io.buffer.ByteBuf ( DataBuffer org.springframework.core.io.buffer.DataBuffer ) { if ( org.springframework.core.io.buffer.DataBuffer instanceof NettyDataBuffer ) { return ( ( NettyDataBuffer ) org.springframework.core.io.buffer.DataBuffer ) . getNativeBuffer ( ) ; } else { return Unpooled . wrappedBuffer ( org.springframework.core.io.buffer.DataBuffer . asByteBuffer ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.core.io.buffer.ByteBufAllocator + STRING ; }  <METHOD_END>
