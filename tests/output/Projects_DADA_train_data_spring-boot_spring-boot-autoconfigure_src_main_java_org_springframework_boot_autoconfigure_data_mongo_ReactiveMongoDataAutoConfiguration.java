<METHOD_START> public void ( MongoProperties org.springframework.boot.autoconfigure.data.mongo.MongoProperties ) { this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties = org.springframework.boot.autoconfigure.data.mongo.MongoProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ReactiveMongoDatabaseFactory .class ) public org.springframework.boot.autoconfigure.data.mongo.SimpleReactiveMongoDatabaseFactory org.springframework.boot.autoconfigure.data.mongo.SimpleReactiveMongoDatabaseFactory ( MongoClient org.springframework.boot.autoconfigure.data.mongo.MongoClient ) throws java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties . getMongoClientDatabase ( ) ; return new SimpleReactiveMongoDatabaseFactory ( org.springframework.boot.autoconfigure.data.mongo.MongoClient , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.mongo.ReactiveMongoTemplate org.springframework.boot.autoconfigure.data.mongo.ReactiveMongoTemplate ( ReactiveMongoDatabaseFactory org.springframework.boot.autoconfigure.data.mongo.ReactiveMongoDatabaseFactory , MongoConverter org.springframework.boot.autoconfigure.data.mongo.MongoConverter ) { return new ReactiveMongoTemplate ( org.springframework.boot.autoconfigure.data.mongo.ReactiveMongoDatabaseFactory , org.springframework.boot.autoconfigure.data.mongo.MongoConverter ) ; }  <METHOD_END>
