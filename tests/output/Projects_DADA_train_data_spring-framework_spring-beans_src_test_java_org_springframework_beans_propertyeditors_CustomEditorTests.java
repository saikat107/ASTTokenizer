<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( ITestBean .class , new org.springframework.beans.propertyeditors.CustomEditorTests.TestBeanEditor ( ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) != null ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getName ( ) . equals ( STRING ) && org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setExtractOldValueForEditor ( true ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( ITestBean .class , new org.springframework.beans.propertyeditors.CustomEditorTests.OldValueAccessingTestBeanEditor ( ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) != null ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getName ( ) . equals ( STRING ) && org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getAge ( ) == NUMBER ) ; ITestBean org.springframework.beans.propertyeditors.ITestBean = org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertSame ( STRING , org.springframework.beans.propertyeditors.ITestBean , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; org.springframework.beans.propertyeditors.TestBean . setSpouse ( new TestBean ( ) ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; org.springframework.beans.propertyeditors.TestBean . setSpouse ( new TestBean ( ) ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getSpouse ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BooleanTestBean org.springframework.beans.propertyeditors.BooleanTestBean = new BooleanTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.BooleanTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . isBool1 ( ) ) ; try { org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.beans.propertyeditors.BeansException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BooleanTestBean org.springframework.beans.propertyeditors.BooleanTestBean = new BooleanTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.BooleanTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertNull ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BooleanTestBean org.springframework.beans.propertyeditors.BooleanTestBean = new BooleanTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.BooleanTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Boolean .class , new CustomBooleanEditor ( true ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , ! org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) . booleanValue ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) == null ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BooleanTestBean . getBool2 ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; CustomBooleanEditor org.springframework.beans.propertyeditors.CustomBooleanEditor = new CustomBooleanEditor ( java.lang.String , java.lang.String , false ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( java.lang.String ) ; assertTrue ( ( ( java.lang.Boolean ) org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( java.lang.String ) ; assertFalse ( ( ( java.lang.Boolean ) org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( java.lang.String . java.lang.String ( ) ) ; assertTrue ( ( ( java.lang.Boolean ) org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( java.lang.String . java.lang.String ( ) ) ; assertFalse ( ( ( java.lang.Boolean ) org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; try { org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NumberTestBean org.springframework.beans.propertyeditors.NumberTestBean = new NumberTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.NumberTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getShort1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getShort2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getInt1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getInt2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getLong1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getLong2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getBigInteger ( ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( new java.lang.Float ( org.springframework.beans.propertyeditors.NumberTestBean . getFloat1 ( ) ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getFloat2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getDouble1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getDouble2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getBigDecimal ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; NumberTestBean org.springframework.beans.propertyeditors.NumberTestBean = new NumberTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.NumberTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( short .class , new CustomNumberEditor ( java.lang.Short .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Short .class , new CustomNumberEditor ( java.lang.Short .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( int .class , new CustomNumberEditor ( java.lang.Integer .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Integer .class , new CustomNumberEditor ( java.lang.Integer .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( long .class , new CustomNumberEditor ( java.lang.Long .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Long .class , new CustomNumberEditor ( java.lang.Long .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.math.BigInteger .class , new CustomNumberEditor ( java.math.BigInteger .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Float .class , new CustomNumberEditor ( java.lang.Float .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( double .class , new CustomNumberEditor ( java.lang.Double .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Double .class , new CustomNumberEditor ( java.lang.Double .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.math.BigDecimal .class , new CustomNumberEditor ( java.math.BigDecimal .class , java.text.NumberFormat , false ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getShort1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getShort2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getInt1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getInt2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getLong1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getLong2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getBigInteger ( ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( new java.lang.Float ( org.springframework.beans.propertyeditors.NumberTestBean . getFloat1 ( ) ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getFloat2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getDouble1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getDouble2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getBigDecimal ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new CustomNumberEditor ( null , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; NumberTestBean org.springframework.beans.propertyeditors.NumberTestBean = new NumberTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.NumberTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( long .class , new CustomNumberEditor ( java.lang.Long .class , java.text.NumberFormat , true ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Long .class , new CustomNumberEditor ( java.lang.Long .class , java.text.NumberFormat , true ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getLong1 ( ) == NUMBER ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.NumberTestBean . getLong2 ( ) ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) == null ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getLong2 ( ) == null ) ; try { org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.beans.propertyeditors.BeansException ) { assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.propertyeditors.NumberTestBean . getLong1 ( ) == NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat . java.text.NumberFormat ( java.util.Locale . java.util.Locale ) ; NumberTestBean org.springframework.beans.propertyeditors.NumberTestBean = new NumberTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.NumberTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.math.BigDecimal .class , new CustomNumberEditor ( java.math.BigDecimal .class , java.text.NumberFormat , true ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.NumberTestBean . getBigDecimal ( ) . floatValue ( ) , NUMBER ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.NumberTestBean . getBigDecimal ( ) . floatValue ( ) , NUMBER ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.NumberTestBean . getBigDecimal ( ) . floatValue ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { CustomNumberEditor org.springframework.beans.propertyeditors.CustomNumberEditor = new CustomNumberEditor ( java.lang.Short .class , true ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setAsText ( java.lang.String . java.lang.String ( java.lang.Short . short + NUMBER ) ) ; fail ( java.lang.Short . short + NUMBER + STRING ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean = new org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean = new org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.beans.propertyeditors.CustomEditorTests.PrimitiveArrayBean . char[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.propertyeditors.CustomEditorTests.CharBean org.springframework.beans.propertyeditors.CustomEditorTests.CharBean = new org.springframework.beans.propertyeditors.CustomEditorTests.CharBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.CustomEditorTests.CharBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.lang.Character ( 'c' ) ) ; assertEquals ( 'c' , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . char ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( 'c' , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . char ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( 'A' , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . char ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( '"' , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . char ( ) ) ; CharacterEditor org.springframework.beans.propertyeditors.CharacterEditor = new CharacterEditor ( false ) ; org.springframework.beans.propertyeditors.CharacterEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CharacterEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.propertyeditors.CustomEditorTests.CharBean org.springframework.beans.propertyeditors.CustomEditorTests.CharBean = new org.springframework.beans.propertyeditors.CustomEditorTests.CharBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.CustomEditorTests.CharBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.Character .class , new CharacterEditor ( true ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.lang.Character ( 'c' ) ) ; assertEquals ( new java.lang.Character ( 'c' ) , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . java.lang.Character ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Character ( 'c' ) , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . java.lang.Character ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Character ( 'A' ) , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . java.lang.Character ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( new java.lang.Character ( ' ' ) , org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . java.lang.Character ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertNull ( org.springframework.beans.propertyeditors.CustomEditorTests.CharBean . java.lang.Character ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.beans.PropertyEditor java.beans.PropertyEditor = new CharacterEditor ( false ) ; java.beans.PropertyEditor . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.beans.PropertyEditor java.beans.PropertyEditor = new CharacterEditor ( false ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = new CharacterEditor ( true ) ; java.beans.PropertyEditor . void ( null ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.beans.PropertyEditor java.beans.PropertyEditor = new CharacterEditor ( false ) ; java.beans.PropertyEditor . void ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new ClassEditor ( ) ; java.beans.PropertyEditor . void ( TestBean .class . java.lang.String ( ) ) ; assertEquals ( TestBean .class , java.beans.PropertyEditor . java.lang.Object ( ) ) ; assertEquals ( TestBean .class . java.lang.String ( ) , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor . void ( null ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.beans.PropertyEditor java.beans.PropertyEditor = new ClassEditor ( ) ; java.beans.PropertyEditor . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new ClassEditor ( ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( TestBean [] .class , java.beans.PropertyEditor . java.lang.Object ( ) ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] [] java.lang.String[][] = new java.lang.String [ [ NUMBER ][ NUMBER ] ; ClassEditor org.springframework.beans.propertyeditors.ClassEditor = new ClassEditor ( ) ; org.springframework.beans.propertyeditors.ClassEditor . setValue ( java.lang.String[][] . java.lang.Class<? extends java.lang.String[][]> ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] [] [] [] [] java.lang.String[][][][][] = new java.lang.String [ [ [ [ [ NUMBER ][ NUMBER ][ NUMBER ][ NUMBER ][ NUMBER ] ; ClassEditor org.springframework.beans.propertyeditors.ClassEditor = new ClassEditor ( ) ; org.springframework.beans.propertyeditors.ClassEditor . setValue ( java.lang.String[][][][][] . java.lang.Class<? extends java.lang.String[][][][][]> ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new FileEditor ( ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( new java.io.File ( STRING ) , java.beans.PropertyEditor . java.lang.Object ( ) ) ; assertEquals ( ( new java.io.File ( STRING ) ) . java.lang.String ( ) , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new FileEditor ( ) ; try { java.beans.PropertyEditor . void ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new FileEditor ( ) ; if ( new java.io.File ( STRING ) . boolean ( ) ) { java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( new java.io.File ( STRING ) , java.beans.PropertyEditor . java.lang.Object ( ) ) ; } if ( new java.io.File ( STRING ) . boolean ( ) ) { java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( new java.io.File ( STRING ) , java.beans.PropertyEditor . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyEditor java.beans.PropertyEditor = new LocaleEditor ( ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( java.util.Locale . java.util.Locale , java.beans.PropertyEditor . java.lang.Object ( ) ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = new LocaleEditor ( ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; java.beans.PropertyEditor java.beans.PropertyEditor = new PatternEditor ( ) ; java.beans.PropertyEditor . void ( java.lang.String ) ; assertEquals ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) . java.lang.String ( ) , ( ( java.util.regex.Pattern ) java.beans.PropertyEditor . java.lang.Object ( ) ) . java.lang.String ( ) ) ; assertEquals ( java.lang.String , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = new PatternEditor ( ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = new PatternEditor ( ) ; java.beans.PropertyEditor . void ( null ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomBooleanEditor org.springframework.beans.propertyeditors.CustomBooleanEditor = new CustomBooleanEditor ( false ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; try { org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomBooleanEditor org.springframework.beans.propertyeditors.CustomBooleanEditor = new CustomBooleanEditor ( true ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setAsText ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomBooleanEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomBooleanEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomBooleanEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomDateEditor org.springframework.beans.propertyeditors.CustomDateEditor = new CustomDateEditor ( null , false ) ; org.springframework.beans.propertyeditors.CustomDateEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomDateEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomDateEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomDateEditor org.springframework.beans.propertyeditors.CustomDateEditor = new CustomDateEditor ( null , true ) ; org.springframework.beans.propertyeditors.CustomDateEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomDateEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomDateEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String . int ( ) == int ) ; assertFalse ( java.lang.String . int ( ) == int ) ; CustomDateEditor org.springframework.beans.propertyeditors.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( STRING ) , true , int ) ; try { org.springframework.beans.propertyeditors.CustomDateEditor . setAsText ( java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { fail ( STRING ) ; } try { org.springframework.beans.propertyeditors.CustomDateEditor . setAsText ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomNumberEditor org.springframework.beans.propertyeditors.CustomNumberEditor = new CustomNumberEditor ( java.lang.Integer .class , false ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setAsText ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomNumberEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomNumberEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomNumberEditor org.springframework.beans.propertyeditors.CustomNumberEditor = new CustomNumberEditor ( java.lang.Integer .class , false ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setAsText ( STRING + java.lang.Integer . java.lang.String ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomNumberEditor org.springframework.beans.propertyeditors.CustomNumberEditor = new CustomNumberEditor ( java.lang.Integer .class , true ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setAsText ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomNumberEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setAsText ( STRING ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomNumberEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.CustomNumberEditor . setValue ( null ) ; assertEquals ( null , org.springframework.beans.propertyeditors.CustomNumberEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomNumberEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringTrimmerEditor org.springframework.beans.propertyeditors.StringTrimmerEditor = new StringTrimmerEditor ( false ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setValue ( null ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( null ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringTrimmerEditor org.springframework.beans.propertyeditors.StringTrimmerEditor = new StringTrimmerEditor ( true ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( null , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setValue ( null ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringTrimmerEditor org.springframework.beans.propertyeditors.StringTrimmerEditor = new StringTrimmerEditor ( STRING , false ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setValue ( null ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringTrimmerEditor org.springframework.beans.propertyeditors.StringTrimmerEditor = new StringTrimmerEditor ( STRING , true ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setAsText ( STRING ) ; assertEquals ( null , org.springframework.beans.propertyeditors.StringTrimmerEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.StringTrimmerEditor . setValue ( null ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.StringTrimmerEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( false ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.IndexedTestBean . populate ( ) ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( false ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.IndexedTestBean . populate ( ) ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.BeanWrapper . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.propertyeditors.TestBean = ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.TestBean . getNestedIndexedBean ( ) . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; MutablePropertyValues org.springframework.beans.propertyeditors.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValues ( org.springframework.beans.propertyeditors.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.util.List .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { java.util.List<org.springframework.beans.propertyeditors.TestBean> < TestBean > java.util.List<org.springframework.beans.propertyeditors.TestBean> = new java.util.ArrayList<org.springframework.beans.propertyeditors.TestBean> <> ( ) ; java.util.List<org.springframework.beans.propertyeditors.TestBean> . add ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; void ( java.util.List<org.springframework.beans.propertyeditors.TestBean> ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { java.util.List<org.springframework.beans.propertyeditors.TestBean> < TestBean > java.util.List<org.springframework.beans.propertyeditors.TestBean> = new java.util.ArrayList<org.springframework.beans.propertyeditors.TestBean> <> ( ) ; java.util.List<org.springframework.beans.propertyeditors.TestBean> . add ( new TestBean ( STRING + java.lang.String , NUMBER ) ) ; void ( java.util.List<org.springframework.beans.propertyeditors.TestBean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.PropertyVetoException { org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean = new org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.util.Vector .class , new CustomCollectionEditor ( java.util.Vector .class ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.util.Hashtable .class , new CustomMapEditor ( java.util.Hashtable .class ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean . java.util.Vector<?> ( ) . int ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean . java.util.Vector<?> ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean . java.util.Vector<?> ( ) . get ( NUMBER ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean . java.util.Hashtable<?,?> ( ) . int ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.CustomEditorTests.OldCollectionsBean . java.util.Hashtable<?,?> ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( false ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; java.beans.PropertyEditor java.beans.PropertyEditor = new CustomNumberEditor ( java.lang.Integer .class , true ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( null , STRING , java.beans.PropertyEditor ) ; TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.util.ArrayList <> ( ) ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , org.springframework.beans.propertyeditors.TestBean ) ; assertEquals ( org.springframework.beans.propertyeditors.TestBean , org.springframework.beans.propertyeditors.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; assertEquals ( java.beans.PropertyEditor , org.springframework.beans.propertyeditors.BeanWrapper . findCustomEditor ( int .class , STRING ) ) ; assertEquals ( java.beans.PropertyEditor , org.springframework.beans.propertyeditors.BeanWrapper . findCustomEditor ( null , STRING ) ) ; assertEquals ( java.beans.PropertyEditor , org.springframework.beans.propertyeditors.BeanWrapper . findCustomEditor ( int .class , STRING ) ) ; assertEquals ( java.beans.PropertyEditor , org.springframework.beans.propertyeditors.BeanWrapper . findCustomEditor ( null , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.PropertyVetoException { IndexedTestBean org.springframework.beans.propertyeditors.IndexedTestBean = new IndexedTestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.IndexedTestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( TestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( java.lang.String , NUMBER ) ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) . length ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.beans.PropertyVetoException { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; BeanWrapper org.springframework.beans.propertyeditors.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.propertyeditors.TestBean ) ; org.springframework.beans.propertyeditors.BeanWrapper . registerCustomEditor ( java.lang.String .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String + STRING ) ; } } ) ; org.springframework.beans.propertyeditors.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassArrayEditor org.springframework.beans.propertyeditors.ClassArrayEditor = new ClassArrayEditor ( ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( java.lang.Class<?> < ? > [] ) org.springframework.beans.propertyeditors.ClassArrayEditor . getValue ( ) ; assertEquals ( NUMBER , java.lang.Class<?>[] . int ) ; assertEquals ( java.lang.String .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( java.util.HashMap .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassArrayEditor org.springframework.beans.propertyeditors.ClassArrayEditor = new ClassArrayEditor ( ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( java.lang.Class<?> < ? > [] ) org.springframework.beans.propertyeditors.ClassArrayEditor . getValue ( ) ; assertEquals ( NUMBER , java.lang.Class<?>[] . int ) ; assertEquals ( java.lang.String [] .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( java.util.Map [] .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( int [] .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( float [] [] [] .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassArrayEditor org.springframework.beans.propertyeditors.ClassArrayEditor = new ClassArrayEditor ( ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( null ) ; assertNull ( org.springframework.beans.propertyeditors.ClassArrayEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassArrayEditor org.springframework.beans.propertyeditors.ClassArrayEditor = new ClassArrayEditor ( ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( STRING ) ; assertNull ( org.springframework.beans.propertyeditors.ClassArrayEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassArrayEditor org.springframework.beans.propertyeditors.ClassArrayEditor = new ClassArrayEditor ( ) ; org.springframework.beans.propertyeditors.ClassArrayEditor . setAsText ( STRING ) ; assertNull ( org.springframework.beans.propertyeditors.ClassArrayEditor . getValue ( ) ) ; assertEquals ( STRING , org.springframework.beans.propertyeditors.ClassArrayEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CharsetEditor org.springframework.beans.propertyeditors.CharsetEditor = new CharsetEditor ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.beans.propertyeditors.CharsetEditor . setAsText ( java.lang.String ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; assertEquals ( STRING , java.nio.charset.Charset , org.springframework.beans.propertyeditors.CharsetEditor . getValue ( ) ) ; org.springframework.beans.propertyeditors.CharsetEditor . setValue ( java.nio.charset.Charset ) ; assertEquals ( STRING , java.lang.String , org.springframework.beans.propertyeditors.CharsetEditor . getAsText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; org.springframework.beans.propertyeditors.TestBean . setName ( java.util.StringTokenizer . java.lang.String ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setAge ( java.lang.Integer . int ( java.util.StringTokenizer . java.lang.String ( ) ) ) ; void ( org.springframework.beans.propertyeditors.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { TestBean org.springframework.beans.propertyeditors.TestBean = new TestBean ( ) ; java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; org.springframework.beans.propertyeditors.TestBean . setName ( java.util.StringTokenizer . java.lang.String ( ) ) ; org.springframework.beans.propertyeditors.TestBean . setAge ( java.lang.Integer . int ( java.util.StringTokenizer . java.lang.String ( ) ) ) ; if ( ! org.springframework.beans.propertyeditors.TestBean . equals ( java.lang.Object ( ) ) ) { void ( org.springframework.beans.propertyeditors.TestBean ) ; } }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public char [] char[] ( ) { return char[] ; }  <METHOD_END>
<METHOD_START> public void void ( char [] char[] ) { this . char[] = char[] ; }  <METHOD_END>
<METHOD_START> public char char ( ) { return char ; }  <METHOD_END>
<METHOD_START> public void void ( char char ) { this . char = char ; }  <METHOD_END>
<METHOD_START> public java.lang.Character java.lang.Character ( ) { return java.lang.Character ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Character java.lang.Character ) { this . java.lang.Character = java.lang.Character ; }  <METHOD_END>
<METHOD_START> public java.util.Vector<?> < ? > java.util.Vector<?> ( ) { return java.util.Vector<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Vector<?> < ? > java.util.Vector<?> ) { this . java.util.Vector<?> = java.util.Vector<> ; }  <METHOD_END>
<METHOD_START> public java.util.Hashtable<?,?> < ? , ? > java.util.Hashtable<?,?> ( ) { return java.util.Hashtable<,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Hashtable<?,?> < ? , ? > java.util.Hashtable<?,?> ) { this . java.util.Hashtable<?,?> = java.util.Hashtable<,> ; }  <METHOD_END>
