<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo ) { return org.springframework.web.reactive.result.method.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo ( RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { return org.springframework.web.reactive.result.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Comparator<org.springframework.web.reactive.result.method.RequestMappingInfo> < RequestMappingInfo > java.util.Comparator<org.springframework.web.reactive.result.method.RequestMappingInfo> ( final ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { return ( org.springframework.web.reactive.result.method.RequestMappingInfo , org.springframework.web.reactive.result.method.RequestMappingInfo ) -> org.springframework.web.reactive.result.method.RequestMappingInfo . compareTo ( org.springframework.web.reactive.result.method.RequestMappingInfo , org.springframework.web.reactive.result.method.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo , java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { super. handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , java.lang.String , org.springframework.web.reactive.result.method.ServerWebExchange ) ; java.lang.String java.lang.String ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.reactive.result.method.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) ; if ( java.util.Set<java.lang.String> . boolean ( ) ) { java.lang.String = java.lang.String ; java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; } else { java.lang.String = java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.String> = getPathMatcher ( ) . extractUriTemplateVariables ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> = getPathHelper ( ) . decodePathVariables ( org.springframework.web.reactive.result.method.ServerWebExchange , java.util.Map<java.lang.String,java.lang.String> ) ; } org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . put ( BEST_MATCHING_PATTERN_ATTRIBUTE , java.lang.String ) ; org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . put ( URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> ( org.springframework.web.reactive.result.method.ServerWebExchange , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . put ( MATRIX_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> ) ; if ( ! org.springframework.web.reactive.result.method.RequestMappingInfo . getProducesCondition ( ) . getProducibleMediaTypes ( ) . isEmpty ( ) ) { java.util.Set<org.springframework.web.reactive.result.method.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.method.MediaType> = org.springframework.web.reactive.result.method.RequestMappingInfo . getProducesCondition ( ) . getProducibleMediaTypes ( ) ; org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . put ( PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Set<org.springframework.web.reactive.result.method.MediaType> ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> ( ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; int int = java.lang.String . int ( '=' ) ; if ( int == - NUMBER ) { continue; } java.lang.String java.lang.String ; int int = java.lang.String . int ( ';' ) ; if ( ( int == - NUMBER ) || ( int == NUMBER ) || ( int < int ) ) { java.lang.String = java.lang.String ; } else { java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.String . java.lang.String ( NUMBER , int ) ) ; } MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> . put ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , getPathHelper ( ) . decodeMatrixVariables ( org.springframework.web.reactive.result.method.ServerWebExchange , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ) ) ; } return java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ; } java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; while ( java.util.StringTokenizer . boolean ( ) ) { java.lang.String java.lang.String = java.util.StringTokenizer . java.lang.String ( ) ; int int = java.lang.String . int ( '=' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; for ( java.lang.String java.lang.String : StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) { org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } else { org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , STRING ) ; } } return org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod ( java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> < RequestMappingInfo > java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> , java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) throws java.lang.Exception { org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper = new org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper ( java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> , org.springframework.web.reactive.result.method.ServerWebExchange ) ; if ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . boolean ( ) ) { return null ; } ServerHttpRequest org.springframework.web.reactive.result.method.ServerHttpRequest = org.springframework.web.reactive.result.method.ServerWebExchange . getRequest ( ) ; if ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . boolean ( ) ) { HttpMethod org.springframework.web.reactive.result.method.HttpMethod = org.springframework.web.reactive.result.method.ServerHttpRequest . getMethod ( ) ; java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> = org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ( ) ; if ( HttpMethod . OPTIONS . matches ( org.springframework.web.reactive.result.method.HttpMethod . name ( ) ) ) { org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.HttpOptionsHandler org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.HttpOptionsHandler = new org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.HttpOptionsHandler ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) ; return new HandlerMethod ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.HttpOptionsHandler , java.lang.reflect.Method ) ; } throw new MethodNotAllowedException ( org.springframework.web.reactive.result.method.HttpMethod , java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) ; } if ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . boolean ( ) ) { java.util.Set<org.springframework.web.reactive.result.method.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.method.MediaType> = org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . java.util.Set<org.springframework.web.reactive.result.method.MediaType> ( ) ; MediaType org.springframework.web.reactive.result.method.MediaType ; try { org.springframework.web.reactive.result.method.MediaType = org.springframework.web.reactive.result.method.ServerHttpRequest . getHeaders ( ) . getContentType ( ) ; } catch ( InvalidMediaTypeException org.springframework.web.reactive.result.method.InvalidMediaTypeException ) { throw new UnsupportedMediaTypeStatusException ( org.springframework.web.reactive.result.method.InvalidMediaTypeException . getMessage ( ) ) ; } throw new UnsupportedMediaTypeStatusException ( org.springframework.web.reactive.result.method.MediaType , new java.util.ArrayList <> ( java.util.Set<org.springframework.web.reactive.result.method.MediaType> ) ) ; } if ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . boolean ( ) ) { java.util.Set<org.springframework.web.reactive.result.method.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.method.MediaType> = org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . java.util.Set<org.springframework.web.reactive.result.method.MediaType> ( ) ; throw new NotAcceptableStatusException ( new java.util.ArrayList <> ( java.util.Set<org.springframework.web.reactive.result.method.MediaType> ) ) ; } if ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . boolean ( ) ) { throw new ServerWebInputException ( STRING + org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper . java.util.List<java.util.Set<org.springframework.web.reactive.result.method.NameValueExpression<java.lang.String>>> ( ) + STRING + org.springframework.web.reactive.result.method.ServerHttpRequest . getQueryParams ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> < RequestMappingInfo > java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . boolean ( java.util.Set<org.springframework.web.reactive.result.method.RequestMappingInfo> . stream ( ) . filter ( info -> info . getPatternsCondition ( ) . getMatchingCondition ( exchange ) != null ) . map ( info -> new PartialMatch ( info , exchange ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . boolean ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . boolean ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . boolean ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . boolean ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch -> org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch . org.springframework.web.reactive.result.method.RequestMappingInfo ( ) . getMethodsCondition ( ) . getMethods ( ) . stream ( ) ) . map ( requestMethod -> HttpMethod . resolve ( requestMethod . name ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.method.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.method.MediaType> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch -> org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch . org.springframework.web.reactive.result.method.RequestMappingInfo ( ) . getConsumesCondition ( ) . getConsumableMediaTypes ( ) . stream ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Collection<java.lang.Object>> ( java.util.LinkedHashSet ::new ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.reactive.result.method.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.method.MediaType> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch -> org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch . org.springframework.web.reactive.result.method.RequestMappingInfo ( ) . getProducesCondition ( ) . getProducibleMediaTypes ( ) . stream ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Collection<java.lang.Object>> ( java.util.LinkedHashSet ::new ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Set<org.springframework.web.reactive.result.method.NameValueExpression<java.lang.String>>> < java.util.Set<org.springframework.web.reactive.result.method.NameValueExpression<java.lang.String>> < NameValueExpression < java.lang.String > > > java.util.List<java.util.Set<org.springframework.web.reactive.result.method.NameValueExpression<java.lang.String>>> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( ) . java.util.stream.Stream<org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch :: boolean ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch -> org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.PartialMatchHelper.PartialMatch . org.springframework.web.reactive.result.method.RequestMappingInfo ( ) . getParamsCondition ( ) . getExpressions ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo , ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { this . org.springframework.web.reactive.result.method.RequestMappingInfo = org.springframework.web.reactive.result.method.RequestMappingInfo ; this . boolean = org.springframework.web.reactive.result.method.RequestMappingInfo . getMethodsCondition ( ) . getMatchingCondition ( org.springframework.web.reactive.result.method.ServerWebExchange ) != null ; this . boolean = org.springframework.web.reactive.result.method.RequestMappingInfo . getConsumesCondition ( ) . getMatchingCondition ( org.springframework.web.reactive.result.method.ServerWebExchange ) != null ; this . boolean = org.springframework.web.reactive.result.method.RequestMappingInfo . getProducesCondition ( ) . getMatchingCondition ( org.springframework.web.reactive.result.method.ServerWebExchange ) != null ; this . boolean = org.springframework.web.reactive.result.method.RequestMappingInfo . getParamsCondition ( ) . getMatchingCondition ( org.springframework.web.reactive.result.method.ServerWebExchange ) != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo ( ) { return this . org.springframework.web.reactive.result.method.RequestMappingInfo ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.result.method.RequestMappingInfo . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) { this . org.springframework.web.reactive.result.method.HttpHeaders . setAllow ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) { if ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> . isEmpty ( ) ) { return java.util.EnumSet . java.util.EnumSet<E> ( HttpMethod .class ) . stream ( ) . filter ( method -> ! method . equals ( HttpMethod . TRACE ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) ) ; } else { java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> = new java.util.LinkedHashSet <> ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) ; if ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> . contains ( HttpMethod . GET ) ) { java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> . add ( HttpMethod . HEAD ) ; } return java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.reactive.result.method.HttpHeaders org.springframework.web.reactive.result.method.HttpHeaders ( ) { return this . org.springframework.web.reactive.result.method.HttpHeaders ; }  <METHOD_END>
