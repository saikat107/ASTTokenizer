<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.mail.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mail.config.MessageWithContentTypeTests> ( ) ) ; MessageChannel org.springframework.integration.mail.config.MessageChannel = org.springframework.integration.mail.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( STRING ) ; FileCopyUtils . copy ( java.io.FileReader , java.io.StringWriter ) ; org.springframework.integration.mail.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.io.StringWriter . java.lang.StringBuffer ( ) . java.lang.String ( ) ) ) ; org.springframework.integration.mail.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JavaMailSender org.springframework.integration.mail.config.JavaMailSender = mock ( JavaMailSender .class ) ; MailSendingMessageHandler org.springframework.integration.mail.config.MailSendingMessageHandler = new MailSendingMessageHandler ( org.springframework.integration.mail.config.JavaMailSender ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.FileReader java.io.FileReader = new java.io.FileReader ( STRING ) ; FileCopyUtils . copy ( java.io.FileReader , java.io.StringWriter ) ; Message < java.lang.String > org.springframework.integration.mail.config.Message<java.lang.String> = MessageBuilder . withPayload ( java.io.StringWriter . java.lang.StringBuffer ( ) . java.lang.String ( ) ) . setHeader ( MailHeaders . TO , STRING ) . setHeader ( MailHeaders . FROM , STRING ) . setHeader ( MailHeaders . CONTENT_TYPE , STRING ) . build ( ) ; MimeMessage org.springframework.integration.mail.config.MimeMessage = new org.springframework.integration.mail.config.MessageWithContentTypeTests.TestMimeMessage ( ) ; when ( org.springframework.integration.mail.config.JavaMailSender . createMimeMessage ( ) ) . thenReturn ( org.springframework.integration.mail.config.MimeMessage ) ; doAnswer ( invocation -> { MimeMessage mimeMessage = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , mimeMessage . getDataHandler ( ) . getContentType ( ) ) ; return null ; } ) . when ( org.springframework.integration.mail.config.JavaMailSender ) . send ( Mockito . any ( MimeMessage .class ) ) ; org.springframework.integration.mail.config.MailSendingMessageHandler . handleMessage ( org.springframework.integration.mail.config.Message<java.lang.String> ) ; verify ( org.springframework.integration.mail.config.JavaMailSender , times ( NUMBER ) ) . send ( Mockito . any ( MimeMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( Session . getDefaultInstance ( new java.util.Properties ( ) ) ); }  <METHOD_END>
