<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , DefaultNamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , StubFooDao .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedStubDao .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( STRING ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( STRING ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . resetFilters ( true ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( FooService .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , AutowiredQualifierFooService .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ScopedProxyTestBean .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AnnotationTypeFilter ( Service .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AnnotationTypeFilter ( Repository .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( CustomStereotype .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , DefaultNamedComponent .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( FooDao .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , StubFooDao .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( java.lang.Class<? extends org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests> ( ) . java.lang.ClassLoader ( ) ) ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String + STRING ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , ScannedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setResourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String + STRING ) ) ) ; void ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , AnnotatedGenericBeanDefinition .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , StubFooDao .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AnnotationTypeFilter ( Repository .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AnnotationTypeFilter ( Service .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AnnotationTypeFilter ( Controller .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertFalse ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; assertFalse ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , StubFooDao .class ) ) ; assertFalse ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedStubDao .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Aspect .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( FooDao .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , StubFooDao .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( MessageBean .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , MessageBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( FooServiceImpl .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Component .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AssignableTypeFilter ( FooServiceImpl .class ) ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( new AssignableTypeFilter ( FooService .class ) ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.context.annotation.BeanDefinition> . size ( ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , NamedComponent .class ) ) ; assertTrue ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ServiceInvocationCounter .class ) ) ; assertFalse ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , FooServiceImpl .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertThat ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ProfileAnnotatedComponent .class ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; ConfigurableEnvironment org.springframework.context.annotation.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.context.annotation.ConfigurableEnvironment . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setEnvironment ( org.springframework.context.annotation.ConfigurableEnvironment ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertThat ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ProfileAnnotatedComponent .class ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathScanningCandidateComponentProvider org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( true ) ; ConfigurableEnvironment org.springframework.context.annotation.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.context.annotation.ConfigurableEnvironment . setActiveProfiles ( ProfileAnnotatedComponent . PROFILE_NAME ) ; org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . setEnvironment ( org.springframework.context.annotation.ConfigurableEnvironment ) ; java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; assertThat ( boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> , ProfileAnnotatedComponent .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ProfileAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( ProfileAnnotatedComponent . PROFILE_NAME ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ProfileAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( DevComponent . PROFILE_NAME ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ProfileMetaAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( ProfileMetaAnnotatedComponent . BEAN_NAME ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ProfileAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( ProfileAnnotatedComponent . BEAN_NAME ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ProfileMetaAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( ProfileMetaAnnotatedComponent . BEAN_NAME ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.DefaultProfileAnnotatedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.DefaultProfileAnnotatedComponent . java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.DefaultAndDevProfileAnnotatedComponent .class ; java.lang.String java.lang.String = org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.DefaultAndDevProfileAnnotatedComponent . java.lang.String ; { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; } { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; } { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.MetaProfileAnnotatedComponent .class ; java.lang.String java.lang.String = org.springframework.context.annotation.ClassPathScanningCandidateComponentProviderTests.MetaProfileAnnotatedComponent . java.lang.String ; { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; } { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; } { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setDefaultProfiles ( java.lang.String ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . setActiveProfiles ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( BeanDefinition org.springframework.context.annotation.BeanDefinition : java.util.Set<org.springframework.context.annotation.BeanDefinition> ) { if ( java.lang.Class<> . java.lang.String ( ) . boolean ( org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> < ? extends BeanDefinition > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinition> ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> . forEach ( c -> { assertThat ( c , is ( instanceOf ( expectedType ) ) ) ; } ) ; }  <METHOD_END>
