<METHOD_START> public void ( Property org.springframework.data.cassandra.mapping.Property , CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , CassandraSimpleTypeHolder org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder ) { this( org.springframework.data.cassandra.mapping.Property , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder , null ); }  <METHOD_END>
<METHOD_START> public void ( Property org.springframework.data.cassandra.mapping.Property , CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , CassandraSimpleTypeHolder org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder , UserTypeResolver org.springframework.data.cassandra.mapping.UserTypeResolver ) { super( org.springframework.data.cassandra.mapping.Property , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder ); this . org.springframework.data.cassandra.mapping.UserTypeResolver = org.springframework.data.cassandra.mapping.UserTypeResolver ; if ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getApplicationContext ( ) != null ) { void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getApplicationContext ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.cassandra.mapping.ApplicationContext ) { Assert . notNull ( org.springframework.data.cassandra.mapping.ApplicationContext , STRING ) ; this . org.springframework.data.cassandra.mapping.ApplicationContext = org.springframework.data.cassandra.mapping.ApplicationContext ; org.springframework.data.cassandra.mapping.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . addPropertyAccessor ( new BeanFactoryAccessor ( ) ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.cassandra.mapping.ApplicationContext ) ) ; org.springframework.data.cassandra.mapping.StandardEvaluationContext . setRootObject ( org.springframework.data.cassandra.mapping.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) { return ( CassandraPersistentEntity < ? > ) super. getOwner ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( AnnotatedElementUtils . findMergedAnnotation ( getType ( ) , PrimaryKeyClass .class ) != null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( boolean ( ) ? getType ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.TypeInformation<?> < ? > org.springframework.data.cassandra.mapping.TypeInformation<?> ( ) { return ( boolean ( ) ? ClassTypeInformation . from ( java.lang.Class<?> ( ) ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( ) { java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) ; Assert . state ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) == NUMBER , java.lang.String . java.lang.String ( STRING , getName ( ) ) ) ; return java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.data.cassandra.mapping.Ordering> < Ordering > java.util.Optional<org.springframework.data.cassandra.mapping.Ordering> ( ) { return findAnnotation ( PrimaryKeyColumn .class ) . map ( PrimaryKeyColumn :: ordering ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( ) { DataType org.springframework.data.cassandra.mapping.DataType = org.springframework.data.cassandra.mapping.DataType ( ) ; if ( org.springframework.data.cassandra.mapping.DataType == null ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , getType ( ) , getName ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getName ( ) ) ) ; } return org.springframework.data.cassandra.mapping.DataType ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( ) { java.util.Optional<org.springframework.data.cassandra.mapping.CassandraType> < CassandraType > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraType> = findAnnotation ( CassandraType .class ) ; if ( java.util.Optional<org.springframework.data.cassandra.mapping.CassandraType> . isPresent ( ) ) { return org.springframework.data.cassandra.mapping.DataType ( java.util.Optional<org.springframework.data.cassandra.mapping.CassandraType> . get ( ) ) ; } if ( isMap ( ) ) { java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> = getTypeInformation ( ) . getTypeArguments ( ) ; void ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . size ( ) , NUMBER ) ; return DataType . map ( org.springframework.data.cassandra.mapping.DataType ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) , org.springframework.data.cassandra.mapping.DataType ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) ) ; } if ( isCollectionLike ( ) ) { java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> = getTypeInformation ( ) . getTypeArguments ( ) ; void ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . size ( ) , NUMBER ) ; if ( java.util.Set .class . boolean ( getType ( ) ) ) { return DataType . set ( org.springframework.data.cassandra.mapping.DataType ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) ) ; } if ( java.util.List .class . boolean ( getType ( ) ) ) { return DataType . list ( org.springframework.data.cassandra.mapping.DataType ( java.util.List<org.springframework.data.cassandra.mapping.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) ) ; } } return CassandraSimpleTypeHolder . getDataTypeFor ( getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraType org.springframework.data.cassandra.mapping.CassandraType ) { DataType . DataType DataType.Name = org.springframework.data.cassandra.mapping.CassandraType . type ( ) ; switch ( DataType.Name ) { case MAP : void ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) . length , NUMBER ) ; return DataType . map ( org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] ) , org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] ) ) ; case LIST : void ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) . length , NUMBER ) ; if ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] == Name . UDT ) { return DataType . list ( org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType ) ) ; } return DataType . list ( org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] ) ) ; case SET : void ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) . length , NUMBER ) ; if ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] == Name . UDT ) { return DataType . set ( org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType ) ) ; } return DataType . set ( org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType . typeArguments ( ) [ NUMBER ] ) ) ; case UDT : return org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraType ) ; default: return CassandraSimpleTypeHolder . getDataTypeFor ( DataType.Name ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraType org.springframework.data.cassandra.mapping.CassandraType ) { if ( ! StringUtils . hasText ( org.springframework.data.cassandra.mapping.CassandraType . userTypeName ( ) ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , getName ( ) , getType ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getName ( ) ) ) ; } CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier = CqlIdentifier . cqlId ( org.springframework.data.cassandra.mapping.CassandraType . userTypeName ( ) ) ; UserType org.springframework.data.cassandra.mapping.UserType = org.springframework.data.cassandra.mapping.UserTypeResolver . resolveType ( org.springframework.data.cassandra.mapping.CqlIdentifier ) ; if ( org.springframework.data.cassandra.mapping.UserType == null ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.CqlIdentifier ) ) ; } return org.springframework.data.cassandra.mapping.UserType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Indexed .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return findAnnotation ( PrimaryKeyColumn .class ) . filter ( primaryKeyColumn -> PrimaryKeyType . CLUSTERED . equals ( primaryKeyColumn . type ( ) ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return findAnnotation ( PrimaryKeyColumn .class ) . filter ( primaryKeyColumn -> PrimaryKeyType . PARTITIONED . equals ( primaryKeyColumn . type ( ) ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( PrimaryKeyColumn .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( DataType . DataType DataType.Name ) { DataType org.springframework.data.cassandra.mapping.DataType = CassandraSimpleTypeHolder . getDataTypeFor ( DataType.Name ) ; if ( org.springframework.data.cassandra.mapping.DataType == null ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , getName ( ) , getType ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getName ( ) ) ) ; } return org.springframework.data.cassandra.mapping.DataType ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getMappingContext ( ) . getPersistentEntity ( java.lang.Class<> ) ; java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> = java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . filter ( CassandraPersistentEntity :: isUserDefinedType ) ; if ( java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . map ( CassandraPersistentEntity :: getUserType ) . get ( ) ; } DataType org.springframework.data.cassandra.mapping.DataType = CassandraSimpleTypeHolder . getDataTypeFor ( java.lang.Class<> ) ; if ( org.springframework.data.cassandra.mapping.DataType == null ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , getName ( ) , getType ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getName ( ) ) ) ; } return org.springframework.data.cassandra.mapping.DataType ; }  <METHOD_END>
<METHOD_START> protected void void ( int int , int int ) { if ( int != int ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , int , getName ( ) , getType ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getName ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) { java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> != null ? java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> : java.util.Collections . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) ) ) ; return java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) { java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CqlIdentifier> <> ( ) ; if ( boolean ( ) ) { void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) , java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) ; } else { java.lang.String java.lang.String = getName ( ) ; java.lang.String java.lang.String ; boolean boolean ; if ( isIdProperty ( ) ) { java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKey> < PrimaryKey > java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKey> = findAnnotation ( PrimaryKey .class ) ; java.lang.String = java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKey> . map ( PrimaryKey :: value ) . orElse ( STRING ) ; boolean = java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKey> . map ( PrimaryKey :: forceQuote ) . orElse ( false ) ; } else if ( boolean ( ) ) { java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKeyColumn> < PrimaryKeyColumn > java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKeyColumn> = findAnnotation ( PrimaryKeyColumn .class ) ; java.lang.String = java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKeyColumn> . map ( PrimaryKeyColumn :: value ) . orElse ( STRING ) ; boolean = java.util.Optional<org.springframework.data.cassandra.mapping.PrimaryKeyColumn> . map ( PrimaryKeyColumn :: forceQuote ) . orElse ( false ) ; } else { java.util.Optional<org.springframework.data.cassandra.mapping.Column> < Column > java.util.Optional<org.springframework.data.cassandra.mapping.Column> = findAnnotation ( Column .class ) ; java.lang.String = java.util.Optional<org.springframework.data.cassandra.mapping.Column> . map ( Column :: value ) . orElse ( STRING ) ; boolean = java.util.Optional<org.springframework.data.cassandra.mapping.Column> . map ( Column :: forceQuote ) . orElse ( false ) ; } java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . add ( org.springframework.data.cassandra.mapping.CqlIdentifier ( java.lang.String , java.lang.String , boolean ) ) ; } return java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.mapping.CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { java.lang.String java.lang.String = java.lang.String ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = ( org.springframework.data.cassandra.mapping.StandardEvaluationContext != null ? SpelUtils . evaluate ( java.lang.String , org.springframework.data.cassandra.mapping.StandardEvaluationContext ) : java.lang.String ) ; } return cqlId ( java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , final java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) { org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { if ( property . isCompositePrimaryKey ( ) ) { addCompositePrimaryKeyColumnNames ( property . getCompositePrimaryKeyEntity ( ) , columnNames ) ; } else { columnNames . add ( property . getColumnName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ) { Assert . notNull ( org.springframework.data.cassandra.mapping.CqlIdentifier , STRING ) ; void ( java.util.Collections . java.util.List ( org.springframework.data.cassandra.mapping.CqlIdentifier ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) { Assert . notNull ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> , STRING ) ; java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) ; Assert . state ( this . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) == java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) , java.lang.String . java.lang.String ( STRING , getName ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getType ( ) . getName ( ) , this . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) , this . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) == NUMBER ? STRING : STRING , java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . size ( ) ) ) ; this . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = this . java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = java.util.Collections . java.util.List<java.lang.Object> ( new java.util.ArrayList <> ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( this . java.lang.Boolean != null && this . java.lang.Boolean == boolean ) { return; } else { this . java.lang.Boolean = boolean ; } java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ( ) . stream ( ) . map ( CqlIdentifier :: getUnquoted ) . map ( name -> cqlId ( name , forceQuote ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; void ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ( ) { Assert . state ( boolean ( ) , java.lang.String . java.lang.String ( STRING , getName ( ) ) ) ; return org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getCompositePrimaryKeyProperties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) { CassandraMappingContext org.springframework.data.cassandra.mapping.CassandraMappingContext = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( ) . getMappingContext ( ) ; Assert . state ( org.springframework.data.cassandra.mapping.CassandraMappingContext != null , STRING ) ; return org.springframework.data.cassandra.mapping.CassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.TypeInformation<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty>> < Association < CassandraPersistentProperty > > java.util.Optional<org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty>> ( ) { return java.util.Optional . java.util.Optional<org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > org.springframework.data.cassandra.mapping.Association<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ( ) { return new Association <> ( this , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ClassUtils . isAssignable ( java.util.Map .class , getType ( ) ) ; }  <METHOD_END>
