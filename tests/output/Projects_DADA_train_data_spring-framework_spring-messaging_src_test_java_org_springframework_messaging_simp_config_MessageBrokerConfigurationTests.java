<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; java.util.Set<org.springframework.messaging.simp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.messaging.simp.config.MessageHandler> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . getSubscribers ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; java.util.Set<org.springframework.messaging.simp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.messaging.simp.config.MessageHandler> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . getSubscribers ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( StompBrokerRelayMessageHandler .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , AbstractSubscribableChannel .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.AbstractSubscribableChannel . getInterceptors ( ) . size ( ) ) ; org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor . getMaxPoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor . getKeepAliveSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; StompHeaderAccessor org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SUBSCRIBE ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionAttributes ( new java.util.concurrent.ConcurrentHashMap <> ( ) ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setDestination ( STRING ) ; Message < ? > org.springframework.messaging.simp.config.Message<?> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.messaging.simp.config.StompHeaderAccessor ) . build ( ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.config.Message<> ) ; org.springframework.messaging.simp.config.Message<?> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . java.util.List<org.springframework.messaging.simp.config.Message<?>> . get ( NUMBER ) ; org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.config.Message<> ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageType ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.StompHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.messaging.simp.config.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; SimpleBrokerMessageHandler org.springframework.messaging.simp.config.SimpleBrokerMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ; StompHeaderAccessor org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SUBSCRIBE ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setDestination ( STRING ) ; Message < ? > org.springframework.messaging.simp.config.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.config.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.config.Message<> ) ; org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setDestination ( STRING ) ; org.springframework.messaging.simp.config.Message<?> = MessageBuilder . createMessage ( STRING . byte[] ( ) , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.config.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.config.Message<> ) ; org.springframework.messaging.simp.config.Message<?> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . java.util.List<org.springframework.messaging.simp.config.Message<?>> . get ( NUMBER ) ; org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.config.Message<> ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageType ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.StompHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.messaging.simp.config.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , AbstractSubscribableChannel .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.AbstractSubscribableChannel . getInterceptors ( ) . size ( ) ) ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , ThreadPoolTaskExecutor .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getMaxPoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getKeepAliveSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; java.util.Set<org.springframework.messaging.simp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.messaging.simp.config.MessageHandler> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . getSubscribers ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ) ) ; assertNull ( org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . getExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; java.util.Set<org.springframework.messaging.simp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.messaging.simp.config.MessageHandler> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . getSubscribers ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.messaging.simp.config.MessageHandler> . contains ( org.springframework.messaging.simp.config.ApplicationContext . getBean ( StompBrokerRelayMessageHandler .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel .class ) ; SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; StompHeaderAccessor org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setSessionAttributes ( new java.util.concurrent.ConcurrentHashMap <> ( ) ) ; org.springframework.messaging.simp.config.StompHeaderAccessor . setDestination ( STRING ) ; Message < ? > org.springframework.messaging.simp.config.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.config.Message<> ) ; org.springframework.messaging.simp.config.Message<?> = org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel . java.util.List<org.springframework.messaging.simp.config.Message<?>> . get ( NUMBER ) ; org.springframework.messaging.simp.config.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.config.Message<> ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.config.StompHeaderAccessor . getMessageType ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.StompHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.messaging.simp.config.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , AbstractSubscribableChannel .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.AbstractSubscribableChannel . getInterceptors ( ) . size ( ) ) ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( STRING , ThreadPoolTaskExecutor .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getMaxPoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getKeepAliveSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) ; CompositeMessageConverter org.springframework.messaging.simp.config.CompositeMessageConverter = org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . brokerMessageConverter ( ) ; java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> = org.springframework.messaging.simp.config.CompositeMessageConverter . getConverters ( ) ; assertThat ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> . size ( ) , Matchers . is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( StringMessageConverter .class ) ) ; assertThat ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( ByteArrayMessageConverter .class ) ) ; assertThat ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( MappingJackson2MessageConverter .class ) ) ; ContentTypeResolver org.springframework.messaging.simp.config.ContentTypeResolver = ( ( MappingJackson2MessageConverter ) java.util.List<org.springframework.messaging.simp.config.MessageConverter> . get ( NUMBER ) ) . getContentTypeResolver ( ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON , ( ( DefaultContentTypeResolver ) org.springframework.messaging.simp.config.ContentTypeResolver ) . getDefaultMimeType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( java.lang.String , ThreadPoolTaskExecutor .class ) ; assertEquals ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; java.lang.String = STRING ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( java.lang.String , ThreadPoolTaskExecutor .class ) ; assertEquals ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; java.lang.String = STRING ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( java.lang.String , ThreadPoolTaskExecutor .class ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . getMaxPoolSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final MessageConverter org.springframework.messaging.simp.config.MessageConverter = mock ( MessageConverter .class ) ; AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) { @ java.lang.Override protected boolean boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( org.springframework.messaging.simp.config.MessageConverter ) ; return false ; } } ; CompositeMessageConverter org.springframework.messaging.simp.config.CompositeMessageConverter = org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . brokerMessageConverter ( ) ; assertThat ( org.springframework.messaging.simp.config.CompositeMessageConverter . getConverters ( ) . size ( ) , Matchers . is ( NUMBER ) ) ; java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> = org.springframework.messaging.simp.config.CompositeMessageConverter . getConverters ( ) . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> . next ( ) , Matchers . is ( org.springframework.messaging.simp.config.MessageConverter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( org.springframework.messaging.simp.config.MessageConverter ) ; return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final MessageConverter org.springframework.messaging.simp.config.MessageConverter = mock ( MessageConverter .class ) ; AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) { @ java.lang.Override protected boolean boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( org.springframework.messaging.simp.config.MessageConverter ) ; return true ; } } ; CompositeMessageConverter org.springframework.messaging.simp.config.CompositeMessageConverter = org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . brokerMessageConverter ( ) ; assertThat ( org.springframework.messaging.simp.config.CompositeMessageConverter . getConverters ( ) . size ( ) , Matchers . is ( NUMBER ) ) ; java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> = org.springframework.messaging.simp.config.CompositeMessageConverter . getConverters ( ) . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> . next ( ) , Matchers . is ( org.springframework.messaging.simp.config.MessageConverter ) ) ; assertThat ( java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> . next ( ) , Matchers . instanceOf ( StringMessageConverter .class ) ) ; assertThat ( java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> . next ( ) , Matchers . instanceOf ( ByteArrayMessageConverter .class ) ) ; assertThat ( java.util.Iterator<org.springframework.messaging.simp.config.MessageConverter> . next ( ) , Matchers . instanceOf ( MappingJackson2MessageConverter .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( org.springframework.messaging.simp.config.MessageConverter ) ; return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> = org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getCustomArgumentResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> . size ( ) ) ; assertTrue ( org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getArgumentResolvers ( ) . contains ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> . get ( NUMBER ) ) ) ; java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> = org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getCustomReturnValueHandlers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> . size ( ) ) ; assertTrue ( org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getReturnValueHandlers ( ) . contains ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) {} ; org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . setApplicationContext ( new StaticApplicationContext ( ) ) ; assertThat ( org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . simpValidator ( ) , Matchers . notNullValue ( ) ) ; assertThat ( org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . simpValidator ( ) , Matchers . instanceOf ( OptionalValidatorFactoryBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Validator org.springframework.messaging.simp.config.Validator = mock ( Validator .class ) ; AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) { @ java.lang.Override public org.springframework.messaging.simp.config.Validator org.springframework.messaging.simp.config.Validator ( ) { return org.springframework.messaging.simp.config.Validator ; } } ; assertSame ( org.springframework.messaging.simp.config.Validator , org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . simpValidator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.config.Validator org.springframework.messaging.simp.config.Validator ( ) { return org.springframework.messaging.simp.config.Validator ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.messaging.simp.config.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.messaging.simp.config.StaticApplicationContext . registerSingleton ( STRING , org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestValidator .class ) ; AbstractMessageBrokerConfiguration org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration = new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.BaseTestMessageBrokerConfig ( ) {} ; org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . setApplicationContext ( org.springframework.messaging.simp.config.StaticApplicationContext ) ; assertThat ( org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . simpValidator ( ) , Matchers . notNullValue ( ) ) ; assertThat ( org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration . simpValidator ( ) , Matchers . instanceOf ( org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestValidator .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; assertThat ( org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getValidator ( ) , Matchers . notNullValue ( Validator .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleBrokerMessageHandler org.springframework.messaging.simp.config.SimpleBrokerMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ; DefaultSubscriptionRegistry org.springframework.messaging.simp.config.DefaultSubscriptionRegistry = ( DefaultSubscriptionRegistry ) org.springframework.messaging.simp.config.SimpleBrokerMessageHandler . getSubscriptionRegistry ( ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.DefaultSubscriptionRegistry . getPathMatcher ( ) . combine ( STRING , STRING ) ) ; SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . getPathMatcher ( ) . combine ( STRING , STRING ) ) ; DefaultUserDestinationResolver org.springframework.messaging.simp.config.DefaultUserDestinationResolver = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( DefaultUserDestinationResolver .class ) ; assertNotNull ( org.springframework.messaging.simp.config.DefaultUserDestinationResolver ) ; assertEquals ( false , new DirectFieldAccessor ( org.springframework.messaging.simp.config.DefaultUserDestinationResolver ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleBrokerMessageHandler org.springframework.messaging.simp.config.SimpleBrokerMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ; DefaultSubscriptionRegistry org.springframework.messaging.simp.config.DefaultSubscriptionRegistry = ( DefaultSubscriptionRegistry ) org.springframework.messaging.simp.config.SimpleBrokerMessageHandler . getSubscriptionRegistry ( ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.DefaultSubscriptionRegistry . getCacheLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpUserRegistry .class ) ; assertEquals ( MultiServerUserRegistry .class , org.springframework.messaging.simp.config.SimpUserRegistry . getClass ( ) ) ; UserDestinationMessageHandler org.springframework.messaging.simp.config.UserDestinationMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.UserDestinationMessageHandler . getBroadcastDestination ( ) ) ; UserRegistryMessageHandler org.springframework.messaging.simp.config.UserRegistryMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserRegistryMessageHandler .class ) ; assertEquals ( STRING , org.springframework.messaging.simp.config.UserRegistryMessageHandler . getBroadcastDestination ( ) ) ; StompBrokerRelayMessageHandler org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( StompBrokerRelayMessageHandler .class ) ; assertNotNull ( org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) . size ( ) ) ; assertSame ( org.springframework.messaging.simp.config.UserDestinationMessageHandler , org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) . get ( STRING ) ) ; assertSame ( org.springframework.messaging.simp.config.UserRegistryMessageHandler , org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( SimpUserRegistry .class ) ; assertNotNull ( org.springframework.messaging.simp.config.SimpUserRegistry ) ; assertNotEquals ( MultiServerUserRegistry .class , org.springframework.messaging.simp.config.SimpUserRegistry . getClass ( ) ) ; UserDestinationMessageHandler org.springframework.messaging.simp.config.UserDestinationMessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ; assertNull ( org.springframework.messaging.simp.config.UserDestinationMessageHandler . getBroadcastDestination ( ) ) ; java.lang.String java.lang.String = STRING ; MessageHandler org.springframework.messaging.simp.config.MessageHandler = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( java.lang.String , MessageHandler .class ) ; assertNotEquals ( UserRegistryMessageHandler .class , org.springframework.messaging.simp.config.MessageHandler . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) @ SendTo ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.config.SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry ( ) { return mock ( SimpUserRegistry .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestController org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestController ( ) { return new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { return new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { return new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { return new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.TestChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageBrokerRegistry org.springframework.messaging.simp.config.MessageBrokerRegistry ) { org.springframework.messaging.simp.config.MessageBrokerRegistry . enableStompBrokerRelay ( STRING , STRING ) . setAutoStartup ( true ) . setUserDestinationBroadcast ( STRING ) . setUserRegistryBroadcast ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ) { org.springframework.messaging.simp.config.ChannelRegistration . setInterceptors ( this . org.springframework.messaging.simp.config.ChannelInterceptor ) ; org.springframework.messaging.simp.config.ChannelRegistration . taskExecutor ( new org.springframework.messaging.simp.config.MessageBrokerConfigurationTests.CustomThreadPoolTaskExecutor ( ) ) . corePoolSize ( NUMBER ) . maxPoolSize ( NUMBER ) . keepAliveSeconds ( NUMBER ) . queueCapacity ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ) { org.springframework.messaging.simp.config.ChannelRegistration . setInterceptors ( this . org.springframework.messaging.simp.config.ChannelInterceptor , this . org.springframework.messaging.simp.config.ChannelInterceptor ) ; org.springframework.messaging.simp.config.ChannelRegistration . taskExecutor ( ) . corePoolSize ( NUMBER ) . maxPoolSize ( NUMBER ) . keepAliveSeconds ( NUMBER ) . queueCapacity ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> ) { java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> . add ( mock ( HandlerMethodArgumentResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> ) { java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> . add ( mock ( HandlerMethodReturnValueHandler .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageBrokerRegistry org.springframework.messaging.simp.config.MessageBrokerRegistry ) { org.springframework.messaging.simp.config.MessageBrokerRegistry . configureBrokerChannel ( ) . setInterceptors ( this . org.springframework.messaging.simp.config.ChannelInterceptor , this . org.springframework.messaging.simp.config.ChannelInterceptor , this . org.springframework.messaging.simp.config.ChannelInterceptor ) ; org.springframework.messaging.simp.config.MessageBrokerRegistry . configureBrokerChannel ( ) . taskExecutor ( ) . corePoolSize ( NUMBER ) . maxPoolSize ( NUMBER ) . keepAliveSeconds ( NUMBER ) . queueCapacity ( NUMBER ) ; org.springframework.messaging.simp.config.MessageBrokerRegistry . setPathMatcher ( new AntPathMatcher ( STRING ) ) . enableSimpleBroker ( STRING , STRING ) ; org.springframework.messaging.simp.config.MessageBrokerRegistry . setCacheLimit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.messaging.simp.config.Message<?> , long long ) { this . java.util.List<org.springframework.messaging.simp.config.Message<?>> . add ( org.springframework.messaging.simp.config.Message<> ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.simp.config.Errors ) {		}  <METHOD_END>
