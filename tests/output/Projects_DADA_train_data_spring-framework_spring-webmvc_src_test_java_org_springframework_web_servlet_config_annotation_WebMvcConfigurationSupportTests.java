<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class , org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.ScopedController .class , org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.ScopedProxyController .class ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getOrder ( ) ) ; HandlerExecutionChain org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) ) ; assertEquals ( ConversionServiceExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( STRING , org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( STRING , org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; java.lang.String java.lang.String = STRING ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( java.lang.String , AbstractHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( java.lang.Integer . int , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; assertTrue ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getClass ( ) . getName ( ) . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; BeanNameUrlHandlerMapping org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( BeanNameUrlHandlerMapping .class ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping . getOrder ( ) ) ; HttpServletRequest org.springframework.web.servlet.config.annotation.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.BeanNameUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.annotation.HttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertEquals ( ConversionServiceExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; assertEquals ( ResourceUrlProviderExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( STRING , AbstractHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( java.lang.Integer . int , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; assertTrue ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getClass ( ) . getName ( ) . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; java.lang.String java.lang.String = STRING ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( java.lang.String , AbstractHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( java.lang.Integer . int , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; assertTrue ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getClass ( ) . getName ( ) . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> = org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . size ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . stream ( ) . filter ( converter -> converter instanceof AbstractJackson2HttpMessageConverter ) . forEach ( converter -> { ObjectMapper mapper = ( ( AbstractJackson2HttpMessageConverter ) converter ) . getObjectMapper ( ) ; assertFalse ( mapper . getDeserializationConfig ( ) . isEnabled ( DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( mapper . getSerializationConfig ( ) . isEnabled ( DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( mapper . getDeserializationConfig ( ) . isEnabled ( FAIL_ON_UNKNOWN_PROPERTIES ) ) ; if ( converter instanceof MappingJackson2XmlHttpMessageConverter ) { assertEquals ( XmlMapper .class , mapper . getClass ( ) ) ; } } ) ; ConfigurableWebBindingInitializer org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer = ( ConfigurableWebBindingInitializer ) org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getWebBindingInitializer ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer ) ; ConversionService org.springframework.web.servlet.config.annotation.ConversionService = org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getConversionService ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ConversionService ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ConversionService instanceof FormattingConversionService ) ; Validator org.springframework.web.servlet.config.annotation.Validator = org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getValidator ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.Validator ) ; assertTrue ( org.springframework.web.servlet.config.annotation.Validator instanceof LocalValidatorFactoryBean ) ; DirectFieldAccessor org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( JsonViewRequestBodyAdvice .class , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( JsonViewResponseBodyAdvice .class , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; CompositeUriComponentsContributor org.springframework.web.servlet.config.annotation.CompositeUriComponentsContributor = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( MvcUriComponentsBuilder . MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME , CompositeUriComponentsContributor .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.CompositeUriComponentsContributor ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; HandlerExceptionResolverComposite org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( STRING , HandlerExceptionResolverComposite .class ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getOrder ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> = org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getExceptionResolvers ( ) ; assertEquals ( ExceptionHandlerExceptionResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( ResponseStatusExceptionResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( DefaultHandlerExceptionResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) . getClass ( ) ) ; ExceptionHandlerExceptionResolver org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver = ( ExceptionHandlerExceptionResolver ) java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . getApplicationContext ( ) ) ; DirectFieldAccessor org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( JsonViewResponseBodyAdvice .class , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { ResponseStatusExceptionResolver org.springframework.web.servlet.config.annotation.ResponseStatusExceptionResolver = ( ResponseStatusExceptionResolver ) java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) ; MockHttpServletRequest org.springframework.web.servlet.config.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.config.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.config.annotation.MockHttpServletRequest , org.springframework.web.servlet.config.annotation.MockHttpServletResponse , org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestController .class ) , new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.UserAlreadyExistsException ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getErrorMessage ( ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.CustomArgumentResolverConfig .class ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; HandlerExceptionResolverComposite org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( HandlerExceptionResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getCustomArgumentResolvers ( ) . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestArgumentResolver .class , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getCustomArgumentResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getCustomReturnValueHandlers ( ) . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestReturnValueHandler .class , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getCustomReturnValueHandlers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getExceptionResolvers ( ) . size ( ) ) ; assertEquals ( ExceptionHandlerExceptionResolver .class , org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getExceptionResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; ExceptionHandlerExceptionResolver org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver = ( ExceptionHandlerExceptionResolver ) org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getExceptionResolvers ( ) . get ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . getCustomArgumentResolvers ( ) . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestArgumentResolver .class , org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . getCustomArgumentResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . getCustomReturnValueHandlers ( ) . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestReturnValueHandler .class , org.springframework.web.servlet.config.annotation.ExceptionHandlerExceptionResolver . getCustomReturnValueHandlers ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; ViewResolverComposite org.springframework.web.servlet.config.annotation.ViewResolverComposite = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( STRING , ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ViewResolverComposite ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( InternalResourceViewResolver .class , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class , org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.ViewResolverConfig .class ) ; ViewResolverComposite org.springframework.web.servlet.config.annotation.ViewResolverComposite = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( STRING , ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ViewResolverComposite ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getOrder ( ) ) ; assertNull ( org.springframework.web.servlet.config.annotation.ViewResolverComposite . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.CustomViewResolverOrderConfig .class ) ; ViewResolverComposite org.springframework.web.servlet.config.annotation.ViewResolverComposite = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( STRING , ViewResolverComposite .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ViewResolverComposite ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) . size ( ) ) ; assertEquals ( InternalResourceViewResolver .class , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.WebConfig .class ) ; UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( UrlPathHelper .class ) ; PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = org.springframework.web.servlet.config.annotation.ApplicationContext . getBean ( PathMatcher .class ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.UrlPathHelper ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; assertEquals ( AntPathMatcher .class , org.springframework.web.servlet.config.annotation.PathMatcher . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigWebApplicationContext org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . refresh ( ) ; return org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) public org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestController org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestController ( ) { return new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.MessageSource org.springframework.web.servlet.config.annotation.MessageSource ( ) { StaticMessageSource org.springframework.web.servlet.config.annotation.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.web.servlet.config.annotation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; return org.springframework.web.servlet.config.annotation.StaticMessageSource ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.ViewResolver org.springframework.web.servlet.config.annotation.ViewResolver ( ) { return new BeanNameViewResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( ) ; org.springframework.web.servlet.config.annotation.ViewResolverRegistry . order ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> . add ( new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestArgumentResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> . add ( new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.TestReturnValueHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.web.servlet.config.annotation.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.config.annotation.HttpEntity<java.lang.Void> ( @ PathVariable java.lang.Integer java.lang.Integer , @ DateTimeFormat ( iso = ISO . DATE ) @ PathVariable DateTime org.springframework.web.servlet.config.annotation.DateTime ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.config.annotation.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.config.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.config.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.config.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.config.annotation.WebDataBinderFactory ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.config.annotation.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.config.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.config.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.config.annotation.NativeWebRequest ) {		}  <METHOD_END>
