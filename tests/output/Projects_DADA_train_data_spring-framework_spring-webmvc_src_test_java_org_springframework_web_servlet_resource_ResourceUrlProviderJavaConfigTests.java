<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockFilterChain = new MockFilterChain ( this . org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests.TestServlet , new ResourceUrlEncodingFilter ( ) ) ; AnnotationConfigWebApplicationContext org.springframework.web.servlet.resource.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.resource.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.resource.AnnotationConfigWebApplicationContext . register ( org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests.WebConfig .class ) ; org.springframework.web.servlet.resource.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setContextPath ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.resource.AnnotationConfigWebApplicationContext . getBean ( ResourceUrlProvider .class ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setAttribute ( ResourceUrlProviderExposingInterceptor . RESOURCE_URL_PROVIDER_ATTR , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setServletPath ( STRING ) ; this . org.springframework.web.servlet.resource.MockFilterChain . doFilter ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setServletPath ( STRING ) ; this . org.springframework.web.servlet.resource.MockFilterChain . doFilter ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest . setRequestURI ( STRING ) ; this . org.springframework.web.servlet.resource.MockHttpServletRequest . setServletPath ( STRING ) ; this . org.springframework.web.servlet.resource.MockFilterChain . doFilter ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , this . org.springframework.web.servlet.resource.MockHttpServletResponse ) ; assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests.TestServlet . org.springframework.web.servlet.resource.HttpServletResponse . encodeURL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.web.servlet.resource.ResourceHandlerRegistry ) { org.springframework.web.servlet.resource.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) . resourceChain ( true ) . addResolver ( new VersionResourceResolver ( ) . addContentVersionStrategy ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.resource.HttpServletResponse ) { this . org.springframework.web.servlet.resource.HttpServletResponse = org.springframework.web.servlet.resource.HttpServletResponse ; }  <METHOD_END>
