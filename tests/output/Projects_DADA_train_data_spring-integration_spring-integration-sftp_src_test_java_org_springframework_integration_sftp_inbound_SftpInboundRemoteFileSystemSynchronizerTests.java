<METHOD_START> @ Before @ After public void void ( ) { java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.lang.String [] java.lang.String[] = java.io.File . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { new java.io.File ( java.io.File , java.lang.String ) . boolean ( ) ; } java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertFalse ( java.io.File . boolean ( ) ) ; org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory = new org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory ( ) ; org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory . setPassword ( STRING ) ; org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory . setHost ( STRING ) ; SftpInboundFileSynchronizer org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer = spy ( new SftpInboundFileSynchronizer ( org.springframework.integration.sftp.inbound.SftpInboundRemoteFileSystemSynchronizerTests.TestSftpSessionFactory ) ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . setDeleteRemoteFiles ( true ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . setPreserveTimestamp ( true ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . setRemoteDirectory ( STRING ) ; SftpRegexPatternFileListFilter org.springframework.integration.sftp.inbound.SftpRegexPatternFileListFilter = new SftpRegexPatternFileListFilter ( STRING ) ; PropertiesPersistingMetadataStore org.springframework.integration.sftp.inbound.PropertiesPersistingMetadataStore = spy ( new PropertiesPersistingMetadataStore ( ) ) ; org.springframework.integration.sftp.inbound.PropertiesPersistingMetadataStore . setBaseDirectory ( STRING ) ; org.springframework.integration.sftp.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; SftpPersistentAcceptOnceFileListFilter org.springframework.integration.sftp.inbound.SftpPersistentAcceptOnceFileListFilter = new SftpPersistentAcceptOnceFileListFilter ( org.springframework.integration.sftp.inbound.PropertiesPersistingMetadataStore , STRING ) ; java.util.List<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> < FileListFilter < LsEntry > > java.util.List<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> = new java.util.ArrayList<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> < FileListFilter < LsEntry > > ( ) ; java.util.List<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> . add ( org.springframework.integration.sftp.inbound.SftpPersistentAcceptOnceFileListFilter ) ; java.util.List<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> . add ( org.springframework.integration.sftp.inbound.SftpRegexPatternFileListFilter ) ; CompositeFileListFilter < LsEntry > org.springframework.integration.sftp.inbound.CompositeFileListFilter<org.springframework.integration.sftp.inbound.LsEntry> = new CompositeFileListFilter < LsEntry > ( java.util.List<org.springframework.integration.sftp.inbound.FileListFilter<org.springframework.integration.sftp.inbound.LsEntry>> ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . setFilter ( org.springframework.integration.sftp.inbound.CompositeFileListFilter<org.springframework.integration.sftp.inbound.LsEntry> ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer . afterPropertiesSet ( ) ; SftpInboundFileSynchronizingMessageSource org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource = new SftpInboundFileSynchronizingMessageSource ( org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . setAutoCreateLocalDirectory ( true ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . setLocalDirectory ( java.io.File ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; CompositeFileListFilter < java.io.File > org.springframework.integration.sftp.inbound.CompositeFileListFilter<java.io.File> = new CompositeFileListFilter < java.io.File > ( ) ; org.springframework.integration.sftp.inbound.CompositeFileListFilter<java.io.File> . addFilter ( new RegexPatternFileListFilter ( STRING ) ) ; AcceptOnceFileListFilter < java.io.File > org.springframework.integration.sftp.inbound.AcceptOnceFileListFilter<java.io.File> = new AcceptOnceFileListFilter < java.io.File > ( ) ; org.springframework.integration.sftp.inbound.CompositeFileListFilter<java.io.File> . addFilter ( org.springframework.integration.sftp.inbound.AcceptOnceFileListFilter<java.io.File> ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . setLocalFilter ( org.springframework.integration.sftp.inbound.CompositeFileListFilter<java.io.File> ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . afterPropertiesSet ( ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . start ( ) ; Message < java.io.File > org.springframework.integration.sftp.inbound.Message<java.io.File> = org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.sftp.inbound.Message<java.io.File> ) ; assertEquals ( STRING , org.springframework.integration.sftp.inbound.Message<java.io.File> . getPayload ( ) . getName ( ) ) ; assertThat ( org.springframework.integration.sftp.inbound.Message<java.io.File> . getPayload ( ) . lastModified ( ) , Matchers . greaterThan ( java.lang.System . long ( ) ) ) ; Message < java.io.File > org.springframework.integration.sftp.inbound.Message<java.io.File> = org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.sftp.inbound.Message<java.io.File> ) ; assertEquals ( STRING , org.springframework.integration.sftp.inbound.Message<java.io.File> . getPayload ( ) . getName ( ) ) ; assertThat ( org.springframework.integration.sftp.inbound.Message<java.io.File> . getPayload ( ) . lastModified ( ) , Matchers . greaterThan ( java.lang.System . long ( ) ) ) ; Message < java.io.File > org.springframework.integration.sftp.inbound.Message<java.io.File> = org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.sftp.inbound.Message<java.io.File> ) ; verify ( org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer , times ( NUMBER ) ) . synchronizeToLocalDirectory ( java.io.File , java.lang.Integer . int ) ; assertTrue ( new java.io.File ( STRING ) . boolean ( ) ) ; assertTrue ( new java.io.File ( STRING ) . boolean ( ) ) ; TestUtils . getPropertyValue ( org.springframework.integration.sftp.inbound.AcceptOnceFileListFilter<java.io.File> , STRING , java.util.Collection .class ) . clear ( ) ; new java.io.File ( STRING ) . boolean ( ) ; new java.io.File ( STRING ) . boolean ( ) ; org.springframework.integration.sftp.inbound.Message<java.io.File> = org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.sftp.inbound.Message<java.io.File> ) ; org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizingMessageSource . stop ( ) ; verify ( org.springframework.integration.sftp.inbound.SftpInboundFileSynchronizer ) . close ( ) ; verify ( org.springframework.integration.sftp.inbound.PropertiesPersistingMetadataStore ) . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { LsEntry org.springframework.integration.sftp.inbound.LsEntry = mock ( LsEntry .class ) ; SftpATTRS org.springframework.integration.sftp.inbound.SftpATTRS = mock ( SftpATTRS .class ) ; when ( org.springframework.integration.sftp.inbound.LsEntry . getAttrs ( ) ) . thenReturn ( org.springframework.integration.sftp.inbound.SftpATTRS ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; when ( org.springframework.integration.sftp.inbound.LsEntry . getAttrs ( ) . getMTime ( ) ) . thenReturn ( new java.lang.Long ( java.util.Calendar . long ( ) / NUMBER ) . int ( ) ) ; when ( org.springframework.integration.sftp.inbound.LsEntry . getFilename ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.integration.sftp.inbound.LsEntry . getLongname ( ) ) . thenReturn ( java.lang.String ) ; java.util.Vector<org.springframework.integration.sftp.inbound.LsEntry> . add ( org.springframework.integration.sftp.inbound.LsEntry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.sftp.inbound.SftpSession org.springframework.integration.sftp.inbound.SftpSession ( ) { if ( this . java.util.Vector<org.springframework.integration.sftp.inbound.LsEntry> . size ( ) == NUMBER ) { this . void ( ) ; } try { ChannelSftp org.springframework.integration.sftp.inbound.ChannelSftp = mock ( ChannelSftp .class ) ; java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { when ( org.springframework.integration.sftp.inbound.ChannelSftp . get ( STRING + java.lang.String ) ) . thenReturn ( new java.io.FileInputStream ( STRING + java.lang.String ) ) ; } when ( org.springframework.integration.sftp.inbound.ChannelSftp . ls ( STRING ) ) . thenReturn ( java.util.Vector<org.springframework.integration.sftp.inbound.LsEntry> ) ; when ( com.jcraft.jsch.Session . openChannel ( STRING ) ) . thenReturn ( org.springframework.integration.sftp.inbound.ChannelSftp ) ; return SftpTestSessionFactory . createSftpSession ( com.jcraft.jsch.Session ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
