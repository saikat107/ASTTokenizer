<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; return DeferredResult .class . boolean ( java.lang.Class<> ) || ListenableFuture .class . boolean ( java.lang.Class<> ) || java.util.concurrent.CompletionStage .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } DeferredResult < ? > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> ; if ( java.lang.Object instanceof DeferredResult ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> = ( DeferredResult < ? > ) java.lang.Object ; } else if ( java.lang.Object instanceof ListenableFuture ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> = org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ( ( ListenableFuture < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.concurrent.CompletionStage ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> = org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ( ( java.util.concurrent.CompletionStage<?> < ? > ) java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Object ) ; } WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . startDeferredResultProcessing ( org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ( ListenableFuture < ? > org.springframework.web.servlet.mvc.method.annotation.ListenableFuture<?> ) { DeferredResult < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> = new DeferredResult <> ( ) ; org.springframework.web.servlet.mvc.method.annotation.ListenableFuture<> . addCallback ( new ListenableFutureCallback < java.lang.Object > ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setResult ( java.lang.Object ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setErrorResult ( java.lang.Throwable ) ; } } ) ; return org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setResult ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setErrorResult ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ( java.util.concurrent.CompletionStage<?> < ? > java.util.concurrent.CompletionStage<?> ) { DeferredResult < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> = new DeferredResult <> ( ) ; java.util.concurrent.CompletionStage<> . java.util.concurrent.CompletionStage<java.lang.Object> ( ( java.util.function.BiFunction<java.lang.Object,java.lang.Throwable,java.lang.Object> < java.lang.Object , java.lang.Throwable , java.lang.Object > ) ( java.lang.Object , java.lang.Throwable ) -> { if ( java.lang.Throwable != null ) { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setErrorResult ( java.lang.Throwable ) ; } else { org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> . setResult ( java.lang.Object ) ; } return null ; } ) ; return org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.Object> ; }  <METHOD_END>
