<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forLanguage ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . matching ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . matchingAny ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . matchingPhrase ( STRING ) ; Assert . assertThat ( DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , STRING ) , IsEqual .< Document > equalTo ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . notMatching ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . notMatchingAny ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , equalTo ( org.springframework.data.mongodb.core.query.Document ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . notMatchingPhrase ( STRING ) ; Assert . assertThat ( DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , STRING ) , IsEqual .< Document > equalTo ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . matching ( STRING ) . caseSensitive ( true ) ; assertThat ( DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , STRING ) , equalTo ( new Document ( STRING , STRING ) . append ( STRING , true ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextCriteria org.springframework.data.mongodb.core.query.TextCriteria = TextCriteria . forDefaultLanguage ( ) . matching ( STRING ) . diacriticSensitive ( true ) ; assertThat ( DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.query.TextCriteria . getCriteriaObject ( ) , STRING ) , equalTo ( new Document ( STRING , STRING ) . append ( STRING , true ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( java.lang.String java.lang.String ) { return new Document ( STRING , Document . parse ( java.lang.String ) ) ; }  <METHOD_END>
