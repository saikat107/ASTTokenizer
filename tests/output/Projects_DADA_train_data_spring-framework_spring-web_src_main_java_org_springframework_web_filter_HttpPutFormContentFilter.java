<METHOD_START> public void void ( FormHttpMessageConverter org.springframework.web.filter.FormHttpMessageConverter ) { Assert . notNull ( org.springframework.web.filter.FormHttpMessageConverter , STRING ) ; this . org.springframework.web.filter.FormHttpMessageConverter = org.springframework.web.filter.FormHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.filter.FormHttpMessageConverter org.springframework.web.filter.FormHttpMessageConverter ( ) { return this . org.springframework.web.filter.FormHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . org.springframework.web.filter.FormHttpMessageConverter . setCharset ( java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse , FilterChain org.springframework.web.filter.FilterChain ) throws org.springframework.web.filter.ServletException , java.io.IOException { if ( ( STRING . boolean ( org.springframework.web.filter.HttpServletRequest . getMethod ( ) ) || STRING . boolean ( org.springframework.web.filter.HttpServletRequest . getMethod ( ) ) ) && boolean ( org.springframework.web.filter.HttpServletRequest ) ) { HttpInputMessage org.springframework.web.filter.HttpInputMessage = new ServletServerHttpRequest ( org.springframework.web.filter.HttpServletRequest ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return org.springframework.web.filter.HttpServletRequest . getInputStream ( ) ; } } ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.filter.FormHttpMessageConverter . read ( null , org.springframework.web.filter.HttpInputMessage ) ; HttpServletRequest org.springframework.web.filter.HttpServletRequest = new org.springframework.web.filter.HttpPutFormContentFilter.HttpPutFormContentRequestWrapper ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> ) ; org.springframework.web.filter.FilterChain . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; } else { org.springframework.web.filter.FilterChain . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return org.springframework.web.filter.HttpServletRequest . getInputStream ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { java.lang.String java.lang.String = org.springframework.web.filter.HttpServletRequest . getContentType ( ) ; if ( java.lang.String != null ) { try { MediaType org.springframework.web.filter.MediaType = MediaType . parseMediaType ( java.lang.String ) ; return ( MediaType . APPLICATION_FORM_URLENCODED . includes ( org.springframework.web.filter.MediaType ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return false ; } } else { return false ; } }  <METHOD_END>
<METHOD_START> public void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> ) { super( org.springframework.web.filter.HttpServletRequest ); this . org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> = ( org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> != null ? org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> : new LinkedMultiValueMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = super. getParameter ( java.lang.String ) ; java.lang.String java.lang.String = this . org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( java.lang.String ) ; return ( java.lang.String != null ? java.lang.String : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.LinkedHashMap<java.lang.String,java.lang.String[]> <> ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = java.util.Enumeration<java.lang.String> ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String , java.lang.String[] ( java.lang.String ) ) ; } return java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.Collections . java.util.ArrayList ( super. getParameterNames ( ) ) ) ; java.util.Set<java.lang.String> . boolean ( this . org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) ; return java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = super. getParameterValues ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.web.filter.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ; if ( java.util.List<java.lang.String> == null ) { return java.lang.String[] ; } else if ( java.lang.String[] == null ) { return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; } else { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] . int + java.util.List<java.lang.String> . int ( ) ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; } }  <METHOD_END>
