<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setApplicationContext ( new StaticWebApplicationContext ( ) ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setPrefix ( STRING ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setSuffix ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , null ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , new java.util.Locale ( STRING , STRING , STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , new java.util.Locale ( STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setContentType ( STRING ) ; View org.springframework.boot.autoconfigure.mustache.web.View = this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . resolveViewName ( STRING , null ) ; assertThat ( org.springframework.boot.autoconfigure.mustache.web.View . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Resource org.springframework.boot.autoconfigure.mustache.web.Resource = mock ( Resource .class ) ; given ( org.springframework.boot.autoconfigure.mustache.web.Resource . exists ( ) ) . willReturn ( true ) ; java.io.InputStream java.io.InputStream = new java.io.ByteArrayInputStream ( new byte [ NUMBER ] ) ; java.io.InputStream java.io.InputStream = spy ( java.io.InputStream ) ; given ( org.springframework.boot.autoconfigure.mustache.web.Resource . getInputStream ( ) ) . willReturn ( java.io.InputStream ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver = new MustacheViewResolver ( ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . setApplicationContext ( new StaticWebApplicationContext ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.mustache.web.Resource org.springframework.boot.autoconfigure.mustache.web.Resource ( java.lang.String java.lang.String ) { return org.springframework.boot.autoconfigure.mustache.web.Resource ; } } ) ; this . org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver . loadView ( STRING , null ) ; verify ( java.io.InputStream ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.mustache.web.Resource org.springframework.boot.autoconfigure.mustache.web.Resource ( java.lang.String java.lang.String ) { return org.springframework.boot.autoconfigure.mustache.web.Resource ; }  <METHOD_END>
