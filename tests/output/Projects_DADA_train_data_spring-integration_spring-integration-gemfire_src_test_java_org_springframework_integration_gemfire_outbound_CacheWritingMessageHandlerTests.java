<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.gemfire.outbound.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.integration.gemfire.outbound.CacheFactoryBean . afterPropertiesSet ( ) ; Cache org.springframework.integration.gemfire.outbound.Cache = org.springframework.integration.gemfire.outbound.CacheFactoryBean . getObject ( ) ; org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> = org.springframework.integration.gemfire.outbound.Cache . createRegionFactory ( ) . setScope ( Scope . LOCAL ) . create ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { if ( org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . close ( ) ; } if ( org.springframework.integration.gemfire.outbound.CacheFactoryBean != null ) { org.springframework.integration.gemfire.outbound.CacheFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { if ( org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> != null ) { org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . size ( ) ) ; CacheWritingMessageHandler org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler = new CacheWritingMessageHandler ( org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . handleMessage ( org.springframework.integration.gemfire.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . size ( ) ) ; CacheWritingMessageHandler org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler = new CacheWritingMessageHandler ( org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . setCacheEntries ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.gemfire.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . copyHeaders ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . handleMessage ( org.springframework.integration.gemfire.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . get ( STRING ) ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . setCacheEntryExpressions ( java.util.Collections .< Expression , Expression > java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> ( new LiteralExpression ( STRING ) , new ValueExpression < java.lang.Long > ( NUMBER ) ) ) ; org.springframework.integration.gemfire.outbound.CacheWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.Region<java.lang.Object,java.lang.Object> . get ( STRING ) ) ; }  <METHOD_END>
