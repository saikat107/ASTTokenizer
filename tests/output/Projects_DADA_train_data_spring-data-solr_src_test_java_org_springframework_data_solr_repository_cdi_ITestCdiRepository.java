<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.solr.repository.cdi.CdiTestContainer = CdiTestContainerLoader . getCdiContainer ( ) ; org.springframework.data.solr.repository.cdi.CdiTestContainer . startApplicationScope ( ) ; org.springframework.data.solr.repository.cdi.CdiTestContainer . bootContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.data.solr.repository.cdi.CdiTestContainer . stopContexts ( ) ; org.springframework.data.solr.repository.cdi.CdiTestContainer . shutdownContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { CdiRepositoryClient org.springframework.data.solr.repository.cdi.CdiRepositoryClient = org.springframework.data.solr.repository.cdi.CdiTestContainer . getInstance ( CdiRepositoryClient .class ) ; org.springframework.data.solr.repository.cdi.CdiProductRepository = org.springframework.data.solr.repository.cdi.CdiRepositoryClient . getRepository ( ) ; org.springframework.data.solr.repository.cdi.SamplePersonRepository = org.springframework.data.solr.repository.cdi.CdiRepositoryClient . getSamplePersonRepository ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNotNull ( org.springframework.data.solr.repository.cdi.CdiProductRepository ) ; ProductBean org.springframework.data.solr.repository.cdi.ProductBean = new ProductBean ( ) ; org.springframework.data.solr.repository.cdi.ProductBean . setId ( STRING ) ; org.springframework.data.solr.repository.cdi.ProductBean . setName ( STRING ) ; org.springframework.data.solr.repository.cdi.CdiProductRepository . save ( org.springframework.data.solr.repository.cdi.ProductBean ) ; Assert . assertTrue ( org.springframework.data.solr.repository.cdi.CdiProductRepository . exists ( org.springframework.data.solr.repository.cdi.ProductBean . getId ( ) ) ) ; java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> < ProductBean > java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> = org.springframework.data.solr.repository.cdi.CdiProductRepository . findOne ( org.springframework.data.solr.repository.cdi.ProductBean . getId ( ) ) ; Assert . assertTrue ( java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> . isPresent ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.cdi.ProductBean . getId ( ) , java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.cdi.ProductBean . getName ( ) , java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.cdi.CdiProductRepository . count ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.cdi.CdiProductRepository . exists ( org.springframework.data.solr.repository.cdi.ProductBean . getId ( ) ) ) ; org.springframework.data.solr.repository.cdi.CdiProductRepository . delete ( org.springframework.data.solr.repository.cdi.ProductBean ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.cdi.CdiProductRepository . count ( ) ) ; java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> = org.springframework.data.solr.repository.cdi.CdiProductRepository . findOne ( org.springframework.data.solr.repository.cdi.ProductBean . getId ( ) ) ; Assert . assertFalse ( java.util.Optional<org.springframework.data.solr.repository.cdi.ProductBean> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.solr.repository.cdi.SamplePersonRepository . returnOne ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
