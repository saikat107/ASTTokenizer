<METHOD_START> public void void ( BeanNameGenerator org.springframework.web.context.support.BeanNameGenerator ) { this . org.springframework.web.context.support.BeanNameGenerator = org.springframework.web.context.support.BeanNameGenerator ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.support.BeanNameGenerator org.springframework.web.context.support.BeanNameGenerator ( ) { return this . org.springframework.web.context.support.BeanNameGenerator ; }  <METHOD_END>
<METHOD_START> public void void ( ScopeMetadataResolver org.springframework.web.context.support.ScopeMetadataResolver ) { this . org.springframework.web.context.support.ScopeMetadataResolver = org.springframework.web.context.support.ScopeMetadataResolver ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.support.ScopeMetadataResolver org.springframework.web.context.support.ScopeMetadataResolver ( ) { return this . org.springframework.web.context.support.ScopeMetadataResolver ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; this . java.util.Set<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultListableBeanFactory org.springframework.web.context.support.DefaultListableBeanFactory ) { AnnotatedBeanDefinitionReader org.springframework.web.context.support.AnnotatedBeanDefinitionReader = org.springframework.web.context.support.AnnotatedBeanDefinitionReader ( org.springframework.web.context.support.DefaultListableBeanFactory ) ; ClassPathBeanDefinitionScanner org.springframework.web.context.support.ClassPathBeanDefinitionScanner = org.springframework.web.context.support.ClassPathBeanDefinitionScanner ( org.springframework.web.context.support.DefaultListableBeanFactory ) ; BeanNameGenerator org.springframework.web.context.support.BeanNameGenerator = org.springframework.web.context.support.BeanNameGenerator ( ) ; if ( org.springframework.web.context.support.BeanNameGenerator != null ) { org.springframework.web.context.support.AnnotatedBeanDefinitionReader . setBeanNameGenerator ( org.springframework.web.context.support.BeanNameGenerator ) ; org.springframework.web.context.support.ClassPathBeanDefinitionScanner . setBeanNameGenerator ( org.springframework.web.context.support.BeanNameGenerator ) ; org.springframework.web.context.support.DefaultListableBeanFactory . registerSingleton ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR , org.springframework.web.context.support.BeanNameGenerator ) ; } ScopeMetadataResolver org.springframework.web.context.support.ScopeMetadataResolver = org.springframework.web.context.support.ScopeMetadataResolver ( ) ; if ( org.springframework.web.context.support.ScopeMetadataResolver != null ) { org.springframework.web.context.support.AnnotatedBeanDefinitionReader . setScopeMetadataResolver ( org.springframework.web.context.support.ScopeMetadataResolver ) ; org.springframework.web.context.support.ClassPathBeanDefinitionScanner . setScopeMetadataResolver ( org.springframework.web.context.support.ScopeMetadataResolver ) ; } if ( ! this . java.util.Set<java.lang.Class<?>> . boolean ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + StringUtils . collectionToCommaDelimitedString ( this . java.util.Set<java.lang.Class<?>> ) + STRING ) ; } org.springframework.web.context.support.AnnotatedBeanDefinitionReader . register ( this . java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ this . java.util.Set<java.lang.Class<?>> . int ( ) ] ) ) ; } if ( ! this . java.util.Set<java.lang.String> . boolean ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + StringUtils . collectionToCommaDelimitedString ( this . java.util.Set<java.lang.String> ) + STRING ) ; } org.springframework.web.context.support.ClassPathBeanDefinitionScanner . scan ( this . java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.Set<java.lang.String> . int ( ) ] ) ) ; } java.lang.String [] java.lang.String[] = getConfigLocations ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = getClassLoader ( ) . loadClass ( java.lang.String ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING ) ; } org.springframework.web.context.support.AnnotatedBeanDefinitionReader . register ( java.lang.Class<> ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.ClassNotFoundException ) ; } int int = org.springframework.web.context.support.ClassPathBeanDefinitionScanner . scan ( java.lang.String ) ; if ( logger . isInfoEnabled ( ) ) { if ( int == NUMBER ) { logger . info ( STRING + java.lang.String + STRING ) ; } else { logger . info ( STRING + int + STRING + java.lang.String + STRING ) ; } } } } } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.support.AnnotatedBeanDefinitionReader org.springframework.web.context.support.AnnotatedBeanDefinitionReader ( DefaultListableBeanFactory org.springframework.web.context.support.DefaultListableBeanFactory ) { return new AnnotatedBeanDefinitionReader ( org.springframework.web.context.support.DefaultListableBeanFactory , getEnvironment ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.context.support.ClassPathBeanDefinitionScanner org.springframework.web.context.support.ClassPathBeanDefinitionScanner ( DefaultListableBeanFactory org.springframework.web.context.support.DefaultListableBeanFactory ) { return new ClassPathBeanDefinitionScanner ( org.springframework.web.context.support.DefaultListableBeanFactory , true , getEnvironment ( ) ) ; }  <METHOD_END>
