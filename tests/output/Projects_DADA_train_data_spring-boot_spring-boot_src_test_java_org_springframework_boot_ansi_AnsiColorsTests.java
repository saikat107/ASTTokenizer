<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BLACK ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . RED ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . GREEN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . YELLOW ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BLUE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . MAGENTA ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . CYAN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . WHITE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_BLACK ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_RED ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_GREEN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_YELLOW ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_BLUE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_MAGENTA ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_CYAN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_WHITE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BLACK ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . RED ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . GREEN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . YELLOW ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BLUE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . MAGENTA ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . CYAN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . WHITE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_BLACK ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_RED ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_GREEN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_YELLOW ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_BLUE ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_MAGENTA ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_CYAN ) ; assertThat ( org.springframework.boot.ansi.AnsiColor ( NUMBER ) ) . isEqualTo ( AnsiColor . BRIGHT_WHITE ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.ansi.AnsiColor org.springframework.boot.ansi.AnsiColor ( int int ) { return AnsiColors . getClosest ( new java.awt.Color ( int ) ) ; }  <METHOD_END>
