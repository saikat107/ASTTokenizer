<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.cassandra.convert.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.data.cassandra.convert.ColumnDefinitions ) ; org.springframework.data.cassandra.convert.ColumnReader = new ColumnReader ( org.springframework.data.cassandra.convert.Row ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.cassandra.convert.ColumnDefinitions . getIndexOf ( java.lang.String ) ) . thenReturn ( - NUMBER ) ; try { org.springframework.data.cassandra.convert.ColumnReader . get ( java.lang.String ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) ) . isEqualTo ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.cassandra.convert.ColumnDefinitions . getIndexOf ( java.lang.String ) ) . thenReturn ( - NUMBER ) ; try { org.springframework.data.cassandra.convert.ColumnReader . get ( new CqlIdentifier ( java.lang.String ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) ) . isEqualTo ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.cassandra.convert.ColumnDefinitions . getIndexOf ( java.lang.String ) ) . thenReturn ( - NUMBER ) ; try { org.springframework.data.cassandra.convert.ColumnReader . get ( new CqlIdentifier ( java.lang.String ) , java.lang.String .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) ) . isEqualTo ( STRING + java.lang.String ) ; } }  <METHOD_END>
