<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.mock.http.client.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.mock.http.client.HttpMethod = org.springframework.mock.http.client.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMethod org.springframework.mock.http.client.HttpMethod ) { this . org.springframework.mock.http.client.HttpMethod = org.springframework.mock.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.HttpMethod org.springframework.mock.http.client.HttpMethod ( ) { return this . org.springframework.mock.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> public void void ( java.net.URI java.net.URI ) { this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> public void void ( ClientHttpResponse org.springframework.mock.http.client.ClientHttpResponse ) { this . org.springframework.mock.http.client.ClientHttpResponse = org.springframework.mock.http.client.ClientHttpResponse ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.mock.http.client.ClientHttpResponse org.springframework.mock.http.client.ClientHttpResponse ( ) java.io.IOException { this . boolean = true ; return org.springframework.mock.http.client.ClientHttpResponse ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.mock.http.client.ClientHttpResponse org.springframework.mock.http.client.ClientHttpResponse ( ) java.io.IOException { return this . org.springframework.mock.http.client.ClientHttpResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( this . org.springframework.mock.http.client.HttpMethod != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.mock.http.client.HttpMethod ) ; } if ( this . java.net.URI != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.net.URI ) ; } if ( ! getHeaders ( ) . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( getHeaders ( ) ) ; } if ( java.lang.StringBuilder . int ( ) == NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
