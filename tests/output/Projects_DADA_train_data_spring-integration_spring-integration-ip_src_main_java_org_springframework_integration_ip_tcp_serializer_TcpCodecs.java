<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer ( ) { return ByteArrayCrLfSerializer . INSTANCE ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLfSerializer ( ) { return ByteArrayLfSerializer . INSTANCE ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer ( ) { return ByteArrayRawSerializer . INSTANCE ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayStxEtxSerializer ( ) { return ByteArrayStxEtxSerializer . INSTANCE ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArraySingleTerminatorSerializer org.springframework.integration.ip.tcp.serializer.ByteArraySingleTerminatorSerializer ( byte byte ) { return new ByteArraySingleTerminatorSerializer ( byte ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) { if ( org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer == null ) { org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( NUMBER ) ; } return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) { if ( org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer == null ) { org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( NUMBER ) ; } return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) { if ( org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer == null ) { org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( NUMBER ) ; } return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( int int ) { switch ( int ) { case NUMBER : return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) ; case NUMBER : return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) ; case NUMBER : return org.springframework.integration.ip.tcp.serializer.ByteArrayLengthHeaderSerializer ( ) ; default: throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
