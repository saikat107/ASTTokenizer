<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.boot.devtools.remote.server.ServerHttpRequest = new ServletServerHttpRequest ( this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest ) ; this . org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager = new HttpHeaderAccessManager ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderAccessManager ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderAccessManager ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderAccessManager ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderAccessManager ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; assertThat ( this . org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager . isAllowed ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; assertThat ( this . org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager . isAllowed ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager . isAllowed ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertThat ( this . org.springframework.boot.devtools.remote.server.HttpHeaderAccessManager . isAllowed ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ) . isFalse ( ) ; }  <METHOD_END>
