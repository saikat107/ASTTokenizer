<METHOD_START> @ java.lang.Override public boolean [] boolean[] ( java.lang.String [] java.lang.String[] , AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) { ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ( ) ; ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( java.lang.String[] , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) ; boolean [] boolean[] = new boolean [ outcomes . length ] ; for ( int int = NUMBER ; int < outcomes . length ; int ++ ) { boolean[] [ int ] = ( org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int ] == null || org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int ] . isMatch ( ) ) ; if ( ! boolean[] [ int ] && org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int ] != null ) { logOutcome ( java.lang.String[] [ int ] , org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int ] ) ; if ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport != null ) { org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( java.lang.String[] [ int ] , this , org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int ] ) ; } } } return boolean[] ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ( ) { if ( this . org.springframework.boot.autoconfigure.condition.BeanFactory != null && this . org.springframework.boot.autoconfigure.condition.BeanFactory instanceof ConfigurableBeanFactory ) { return ConditionEvaluationReport . get ( ( ConfigurableListableBeanFactory ) this . org.springframework.boot.autoconfigure.condition.BeanFactory ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( java.lang.String [] java.lang.String[] , AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) { int int = java.lang.String[] . int / NUMBER ; org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver = org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver ( java.lang.String[] , NUMBER , int , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) ; org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver = new org.springframework.boot.autoconfigure.condition.OnClassCondition.StandardOutcomesResolver ( java.lang.String[] , int , java.lang.String[] . int , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata , this . java.lang.ClassLoader ) ; ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) ; ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) ; ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = new ConditionOutcome [ java.lang.String[] . int ] ; java.lang.System . void ( org.springframework.boot.autoconfigure.condition.ConditionOutcome[] , NUMBER , org.springframework.boot.autoconfigure.condition.ConditionOutcome[] , NUMBER , firstHalf . length ) ; java.lang.System . void ( org.springframework.boot.autoconfigure.condition.ConditionOutcome[] , NUMBER , org.springframework.boot.autoconfigure.condition.ConditionOutcome[] , int , secondHalf . length ) ; return org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver ( java.lang.String [] java.lang.String[] , int int , int int , AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) { org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver = new org.springframework.boot.autoconfigure.condition.OnClassCondition.StandardOutcomesResolver ( java.lang.String[] , int , int , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata , this . java.lang.ClassLoader ) ; try { return new org.springframework.boot.autoconfigure.condition.OnClassCondition.ThreadedOutcomesResolver ( org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver ) ; } catch ( java.security.AccessControlException java.security.AccessControlException ) { return org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) ; ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , ConditionalOnClass .class ) ; if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , java.lang.ClassLoader ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnClass .class ) . didNotFind ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) ) ; } org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.ConditionMessage . andCondition ( ConditionalOnClass .class ) . found ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , java.lang.ClassLoader ) ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , ConditionalOnMissingClass .class ) ; if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , java.lang.ClassLoader ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnMissingClass .class ) . found ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) ) ; } org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.ConditionMessage . andCondition ( ConditionalOnMissingClass .class ) . didNotFind ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , java.lang.ClassLoader ) ) ; } return ConditionOutcome . match ( org.springframework.boot.autoconfigure.condition.ConditionMessage ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , java.lang.Class<?> < ? > java.lang.Class<?> ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAllAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) , true ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; if ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> == null ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } void ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; void ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { if ( java.util.List<java.lang.Object> != null ) { for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { java.util.Collections . boolean ( java.util.List<java.lang.String> , ( java.lang.String [] ) java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , java.lang.ClassLoader java.lang.ClassLoader ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Collection<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . boolean ( java.lang.String , java.lang.ClassLoader ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.condition.BeanFactory ) throws org.springframework.boot.autoconfigure.condition.BeansException { this . org.springframework.boot.autoconfigure.condition.BeanFactory = org.springframework.boot.autoconfigure.condition.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { return boolean ( java.lang.String , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { return ! boolean ( java.lang.String , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = ClassUtils . getDefaultClassLoader ( ) ; } try { java.lang.Class<?> ( java.lang.String , java.lang.ClassLoader ) ; return true ; } catch ( java.lang.Throwable java.lang.Throwable ) { return false ; } }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader )				throws java.lang.ClassNotFoundException { if ( java.lang.ClassLoader != null ) { return java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; } return java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public abstract boolean boolean ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader );  <METHOD_END>
<METHOD_START> org.springframework.boot.autoconfigure.condition.ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( )  <METHOD_END>
<METHOD_START> private void ( final org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver ) { this . java.lang.Thread = new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.autoconfigure.condition.OnClassCondition.ThreadedOutcomesResolver .this . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) ; } } ) ; this . java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.autoconfigure.condition.OnClassCondition.ThreadedOutcomesResolver .this . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = org.springframework.boot.autoconfigure.condition.OnClassCondition.OutcomesResolver . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) { try { this . java.lang.Thread . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return this . org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String [] java.lang.String[] , int int , int int , AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata , java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.String[] = java.lang.String[] ; this . int = int ; this . int = int ; this . org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata = org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( ) { return org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( this . java.lang.String[] , this . int , this . int , this . org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ( final java.lang.String [] java.lang.String[] , int int , int int , AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ) { ConditionOutcome [] org.springframework.boot.autoconfigure.condition.ConditionOutcome[] = new ConditionOutcome [ int - int ] ; for ( int int = int ; int < int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata . getSet ( java.lang.String , STRING ) ; if ( java.util.Set<java.lang.String> != null ) { org.springframework.boot.autoconfigure.condition.ConditionOutcome[] [ int - int ] = org.springframework.boot.autoconfigure.condition.ConditionOutcome ( java.util.Set<java.lang.String> ) ; } } return org.springframework.boot.autoconfigure.condition.ConditionOutcome[] ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { try { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.Set<java.lang.String> , org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType . org.springframework.boot.autoconfigure.condition.OnClassCondition.MatchType , this . java.lang.ClassLoader ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnClass .class ) . didNotFind ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { } return null ; }  <METHOD_END>
