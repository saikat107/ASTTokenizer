<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> ) { Assert . notNull ( org.springframework.context.event.ApplicationListener<> , STRING ) ; this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = ( ApplicationListener < ApplicationEvent > ) org.springframework.context.event.ApplicationListener<> ; this . org.springframework.context.event.ResolvableType = org.springframework.context.event.ResolvableType ( this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ResolvableType org.springframework.context.event.ResolvableType ) { if ( this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> instanceof SmartApplicationListener ) { java.lang.Class<? extends org.springframework.context.event.ApplicationEvent> < ? extends ApplicationEvent > java.lang.Class<? extends org.springframework.context.event.ApplicationEvent> = ( java.lang.Class<? extends org.springframework.context.event.ApplicationEvent> < ? extends ApplicationEvent > ) org.springframework.context.event.ResolvableType . resolve ( ) ; return ( java.lang.Class<> != null && ( ( SmartApplicationListener ) this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) . supportsEventType ( java.lang.Class<> ) ) ; } else { return ( this . org.springframework.context.event.ResolvableType == null || this . org.springframework.context.event.ResolvableType . isAssignableFrom ( org.springframework.context.event.ResolvableType ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<? extends org.springframework.context.event.ApplicationEvent> < ? extends ApplicationEvent > java.lang.Class<? extends org.springframework.context.event.ApplicationEvent> ) { return boolean ( ResolvableType . forClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> instanceof SmartApplicationListener ) { return ( ( SmartApplicationListener ) this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) . supportsSourceType ( java.lang.Class<> ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> instanceof Ordered ? ( ( Ordered ) this . org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) . getOrder ( ) : Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forClass ( java.lang.Class<> ) . as ( ApplicationListener .class ) ; if ( org.springframework.context.event.ResolvableType == null || ! org.springframework.context.event.ResolvableType . hasGenerics ( ) ) { return null ; } return org.springframework.context.event.ResolvableType . getGeneric ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) { ResolvableType org.springframework.context.event.ResolvableType = org.springframework.context.event.ResolvableType ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> . getClass ( ) ) ; if ( org.springframework.context.event.ResolvableType == null || org.springframework.context.event.ResolvableType . isAssignableFrom ( ResolvableType . forClass ( ApplicationEvent .class ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; if ( java.lang.Class<> != org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> . getClass ( ) ) { org.springframework.context.event.ResolvableType = org.springframework.context.event.ResolvableType ( java.lang.Class<> ) ; } } return org.springframework.context.event.ResolvableType ; }  <METHOD_END>
