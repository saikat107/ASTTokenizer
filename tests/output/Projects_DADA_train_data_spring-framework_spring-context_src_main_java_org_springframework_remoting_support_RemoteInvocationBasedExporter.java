<METHOD_START> public void void ( RemoteInvocationExecutor org.springframework.remoting.support.RemoteInvocationExecutor ) { this . org.springframework.remoting.support.RemoteInvocationExecutor = org.springframework.remoting.support.RemoteInvocationExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.remoting.support.RemoteInvocationExecutor org.springframework.remoting.support.RemoteInvocationExecutor ( ) { return this . org.springframework.remoting.support.RemoteInvocationExecutor ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.support.RemoteInvocation , java.lang.Object java.lang.Object )			throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.remoting.support.RemoteInvocation ) ; } try { return org.springframework.remoting.support.RemoteInvocationExecutor ( ) . invoke ( org.springframework.remoting.support.RemoteInvocation , java.lang.Object ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { if ( logger . isDebugEnabled ( ) ) { logger . warn ( STRING + org.springframework.remoting.support.RemoteInvocation , java.lang.NoSuchMethodException ) ; } throw java.lang.NoSuchMethodException ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { if ( logger . isDebugEnabled ( ) ) { logger . warn ( STRING + org.springframework.remoting.support.RemoteInvocation , java.lang.IllegalAccessException ) ; } throw java.lang.IllegalAccessException ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.remoting.support.RemoteInvocation , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } throw java.lang.reflect.InvocationTargetException ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.support.RemoteInvocationResult org.springframework.remoting.support.RemoteInvocationResult ( RemoteInvocation org.springframework.remoting.support.RemoteInvocation , java.lang.Object java.lang.Object ) { try { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.remoting.support.RemoteInvocation , java.lang.Object ) ; return new RemoteInvocationResult ( java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return new RemoteInvocationResult ( java.lang.Throwable ) ; } }  <METHOD_END>
