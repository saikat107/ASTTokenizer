<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { PropertiesFactoryBean org.springframework.integration.twitter.outbound.PropertiesFactoryBean = new PropertiesFactoryBean ( ) ; org.springframework.integration.twitter.outbound.PropertiesFactoryBean . setLocation ( new ClassPathResource ( STRING ) ) ; org.springframework.integration.twitter.outbound.PropertiesFactoryBean . afterPropertiesSet ( ) ; java.util.Properties java.util.Properties = org.springframework.integration.twitter.outbound.PropertiesFactoryBean . getObject ( ) ; TwitterTemplate org.springframework.integration.twitter.outbound.TwitterTemplate = new TwitterTemplate ( java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) , java.util.Properties . java.lang.String ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = new GenericMessage <> ( STRING ) ; StatusUpdatingMessageHandler org.springframework.integration.twitter.outbound.StatusUpdatingMessageHandler = new StatusUpdatingMessageHandler ( org.springframework.integration.twitter.outbound.TwitterTemplate ) ; org.springframework.integration.twitter.outbound.StatusUpdatingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.twitter.outbound.StatusUpdatingMessageHandler . handleMessage ( org.springframework.integration.twitter.outbound.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TimelineOperations org.springframework.integration.twitter.outbound.TimelineOperations = Mockito . mock ( TimelineOperations .class ) ; Mockito . when ( this . org.springframework.integration.twitter.outbound.Twitter . timelineOperations ( ) ) . thenReturn ( org.springframework.integration.twitter.outbound.TimelineOperations ) ; ArgumentCaptor < TweetData > org.springframework.integration.twitter.outbound.ArgumentCaptor<org.springframework.integration.twitter.outbound.TweetData> = ArgumentCaptor . forClass ( TweetData .class ) ; this . org.springframework.integration.twitter.outbound.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Mockito . verify ( org.springframework.integration.twitter.outbound.TimelineOperations ) . updateStatus ( org.springframework.integration.twitter.outbound.ArgumentCaptor<org.springframework.integration.twitter.outbound.TweetData> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.twitter.outbound.ArgumentCaptor<org.springframework.integration.twitter.outbound.TweetData> . getValue ( ) . toTweetParameters ( ) . getFirst ( STRING ) ) ; Mockito . reset ( org.springframework.integration.twitter.outbound.TimelineOperations ) ; ClassPathResource org.springframework.integration.twitter.outbound.ClassPathResource = new ClassPathResource ( STRING ) ; this . org.springframework.integration.twitter.outbound.MessageChannel . send ( MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . setHeader ( STRING , org.springframework.integration.twitter.outbound.ClassPathResource ) . build ( ) ) ; Mockito . verify ( org.springframework.integration.twitter.outbound.TimelineOperations ) . updateStatus ( org.springframework.integration.twitter.outbound.ArgumentCaptor<org.springframework.integration.twitter.outbound.TweetData> . capture ( ) ) ; TweetData org.springframework.integration.twitter.outbound.TweetData = org.springframework.integration.twitter.outbound.ArgumentCaptor<org.springframework.integration.twitter.outbound.TweetData> . getValue ( ) ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.integration.twitter.outbound.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.integration.twitter.outbound.TweetData . toTweetParameters ( ) ; assertEquals ( STRING , org.springframework.integration.twitter.outbound.MultiValueMap<java.lang.String,java.lang.Object> . getFirst ( STRING ) ) ; assertNull ( org.springframework.integration.twitter.outbound.MultiValueMap<java.lang.String,java.lang.Object> . getFirst ( STRING ) ) ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.integration.twitter.outbound.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.integration.twitter.outbound.TweetData . toUploadMediaParameters ( ) ; assertEquals ( org.springframework.integration.twitter.outbound.ClassPathResource , org.springframework.integration.twitter.outbound.MultiValueMap<java.lang.String,java.lang.Object> . getFirst ( STRING ) ) ; }  <METHOD_END>
