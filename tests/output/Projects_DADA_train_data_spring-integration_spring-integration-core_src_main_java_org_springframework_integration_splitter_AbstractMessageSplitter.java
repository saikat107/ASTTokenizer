<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected final java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.splitter.Message<?> ) { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.splitter.Message<> ) ; if ( java.lang.Object == null ) { return null ; } java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ; final int int ; if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; int = java.util.Collection<java.lang.Object> . int ( ) ; java.util.Iterator<java.lang.Object> = java.util.Collection<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.lang.Object ; int = java.lang.Object[] . int ; java.util.Iterator<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) . java.util.Iterator<java.lang.Object> ( ) ; } else if ( java.lang.Object instanceof java.lang.Iterable<?> < ? > ) { int = NUMBER ; java.util.Iterator<java.lang.Object> = ( ( java.lang.Iterable<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) ; } else if ( java.lang.Object instanceof java.util.Iterator<?> < ? > ) { int = NUMBER ; java.util.Iterator<java.lang.Object> = ( java.util.Iterator<java.lang.Object> < java.lang.Object > ) java.lang.Object ; } else { int = NUMBER ; java.util.Iterator<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) ; } if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.splitter.Message<> . getHeaders ( ) ; if ( boolean ( org.springframework.integration.splitter.Message<> ) ) { java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( java.util.Map<java.lang.String,java.lang.Object> ) ; void ( org.springframework.integration.splitter.Message<> , java.util.Map<java.lang.String,java.lang.Object> ) ; } final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; final java.lang.Object java.lang.Object = org.springframework.integration.splitter.Message<> . getHeaders ( ) . getId ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; return new FunctionIterator < java.lang.Object , AbstractIntegrationMessageBuilder < ? > > ( java.util.Iterator<java.lang.Object> , object -> createBuilder ( object , headers , correlationId , sequenceNumber . getAndIncrement ( ) , sequenceSize ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> < ? > org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> ( java.lang.Object java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object , int int , int int ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> ; if ( java.lang.Object instanceof Message ) { org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> = getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof AbstractIntegrationMessageBuilder ) { org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> = ( AbstractIntegrationMessageBuilder < ? > ) java.lang.Object ; } else { org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<?> = getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; } org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( this . boolean ) { org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<> . pushSequenceDetails ( java.lang.Object , int , int ) ; } return org.springframework.integration.splitter.AbstractIntegrationMessageBuilder<> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Message < ? > org.springframework.integration.splitter.Message<?> ) { return false ; }  <METHOD_END>
<METHOD_START> protected void void ( Message < ? > org.springframework.integration.splitter.Message<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.splitter.Message<?> ) { java.util.Iterator<?> < ? > java.util.Iterator<?> = ( java.util.Iterator<?> < ? > ) java.lang.Object ; while ( java.util.Iterator<> . boolean ( ) ) { super. produceOutput ( java.util.Iterator<> . next ( ) , org.springframework.integration.splitter.Message<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.splitter.Message<?> );  <METHOD_END>
