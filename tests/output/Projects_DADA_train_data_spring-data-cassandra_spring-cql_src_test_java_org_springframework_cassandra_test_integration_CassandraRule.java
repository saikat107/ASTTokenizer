<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , EmbeddedCassandraServerHelper . DEFAULT_STARTUP_TIMEOUT_MS ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , long long ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . long = long ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ) { this . java.lang.String = null ; this . long = - NUMBER ; this . org.springframework.cassandra.test.integration.CassandraRule = org.springframework.cassandra.test.integration.CassandraRule ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( CqlDataSet org.springframework.cassandra.test.integration.CqlDataSet ) { return org.springframework.cassandra.test.integration.CassandraRule ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) , org.springframework.cassandra.test.integration.CqlDataSet ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode , final CqlDataSet org.springframework.cassandra.test.integration.CqlDataSet ) { Assert . notNull ( org.springframework.cassandra.test.integration.CqlDataSet , STRING ) ; SessionCallback < java.lang.Void > org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> = session -> { load ( session , cqlDataSet ) ; return null ; } ; org.springframework.cassandra.test.integration.CassandraRule ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode , org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( final SessionCallback < ? > org.springframework.cassandra.test.integration.SessionCallback<?> ) { Assert . notNull ( org.springframework.cassandra.test.integration.SessionCallback<> , STRING ) ; return org.springframework.cassandra.test.integration.CassandraRule ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) , org.springframework.cassandra.test.integration.SessionCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode , final SessionCallback < ? > org.springframework.cassandra.test.integration.SessionCallback<?> ) { Assert . notNull ( org.springframework.cassandra.test.integration.SessionCallback<> , STRING ) ; java.util.List<org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void>> . add ( ( SessionCallback < java.lang.Void > ) org.springframework.cassandra.test.integration.SessionCallback<> ) ; java.util.Map<org.springframework.cassandra.test.integration.SessionCallback<?>,org.springframework.cassandra.test.integration.CassandraRule.InvocationMode> . put ( org.springframework.cassandra.test.integration.SessionCallback<> , org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( final CqlDataSet org.springframework.cassandra.test.integration.CqlDataSet ) { Assert . notNull ( org.springframework.cassandra.test.integration.CqlDataSet , STRING ) ; java.util.List<org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void>> . add ( session -> { load ( CassandraRule .this . session , cqlDataSet ) ; return null ; } ) ; return this ; }  <METHOD_END>
<METHOD_START> public void void ( CqlDataSet org.springframework.cassandra.test.integration.CqlDataSet ) { Assert . notNull ( org.springframework.cassandra.test.integration.CqlDataSet , STRING ) ; void ( org.springframework.cassandra.test.integration.Session , org.springframework.cassandra.test.integration.CqlDataSet ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. after ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.Cluster org.springframework.cassandra.test.integration.Cluster ( ) { return org.springframework.cassandra.test.integration.Cluster ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.Session org.springframework.cassandra.test.integration.Session ( ) { return org.springframework.cassandra.test.integration.Session ; }  <METHOD_END>
<METHOD_START> public int int ( ) { Assert . state ( java.lang.Integer != null , STRING ) ; return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public org.springframework.cassandra.test.integration.CassandraRule org.springframework.cassandra.test.integration.CassandraRule ( ) { return new org.springframework.cassandra.test.integration.CassandraRule ( this ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { if ( org.springframework.cassandra.test.integration.CassandraRule == null && org.springframework.cassandra.test.integration.CassandraConnectionProperties . getCassandraType ( ) == CassandraConnectionProperties . CassandraType . EMBEDDED ) { if ( ! java.lang.System . java.util.Properties ( ) . boolean ( STRING ) ) { java.lang.System . java.lang.String ( STRING , STRING + SocketUtils . findAvailableTcpPort ( NUMBER ) ) ; } if ( java.lang.String != null ) { EmbeddedCassandraServerHelper . startEmbeddedCassandra ( java.lang.String , long ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( SessionCallback < java.lang.Void > org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> : java.util.List<org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void>> ) { org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode = java.util.Map<org.springframework.cassandra.test.integration.SessionCallback<?>,org.springframework.cassandra.test.integration.CassandraRule.InvocationMode> . get ( org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> ) ; if ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode == org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) ) { continue; } if ( org.springframework.cassandra.test.integration.CassandraRule.InvocationMode == org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) ) { java.util.Map<org.springframework.cassandra.test.integration.SessionCallback<?>,org.springframework.cassandra.test.integration.CassandraRule.InvocationMode> . put ( org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> , org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) ) ; } org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> . doInSession ( org.springframework.cassandra.test.integration.Session ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( SessionCallback < java.lang.Void > org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> : java.util.List<org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void>> ) { org.springframework.cassandra.test.integration.SessionCallback<java.lang.Void> . doInSession ( org.springframework.cassandra.test.integration.Session ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.cassandra.test.integration.CassandraRule == null ) { java.lang.String java.lang.String ; int int ; if ( org.springframework.cassandra.test.integration.CassandraConnectionProperties . getCassandraType ( ) == CassandraConnectionProperties . CassandraType . EMBEDDED ) { java.lang.String = EmbeddedCassandraServerHelper . getHost ( ) ; int = EmbeddedCassandraServerHelper . getNativeTransportPort ( ) ; } else { java.lang.String = org.springframework.cassandra.test.integration.CassandraConnectionProperties . getCassandraHost ( ) ; int = org.springframework.cassandra.test.integration.CassandraConnectionProperties . getCassandraPort ( ) ; } java.lang.Integer = int ; QueryOptions org.springframework.cassandra.test.integration.QueryOptions = new QueryOptions ( ) ; org.springframework.cassandra.test.integration.QueryOptions . setRefreshSchemaIntervalMillis ( NUMBER ) ; SocketOptions org.springframework.cassandra.test.integration.SocketOptions = new SocketOptions ( ) ; org.springframework.cassandra.test.integration.SocketOptions . setConnectTimeoutMillis ( ( int ) java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; org.springframework.cassandra.test.integration.SocketOptions . setReadTimeoutMillis ( ( int ) java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; if ( org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder == null ) { org.springframework.cassandra.test.integration.Cluster = new Cluster . Cluster ( ) . addContactPoints ( java.lang.String ) . withPort ( int ) . withQueryOptions ( org.springframework.cassandra.test.integration.QueryOptions ) . withMaxSchemaAgreementWaitSeconds ( NUMBER ) . withSocketOptions ( org.springframework.cassandra.test.integration.SocketOptions ) . withNettyOptions ( IntegrationTestNettyOptions . INSTANCE ) . build ( ) ; if ( org.springframework.cassandra.test.integration.CassandraConnectionProperties . getBoolean ( STRING ) ) { org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder = new org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder ( org.springframework.cassandra.test.integration.Cluster , org.springframework.cassandra.test.integration.Cluster . connect ( ) ) ; } } else { org.springframework.cassandra.test.integration.Cluster = org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder . org.springframework.cassandra.test.integration.Cluster ; } } else { org.springframework.cassandra.test.integration.Cluster = org.springframework.cassandra.test.integration.CassandraRule . org.springframework.cassandra.test.integration.Cluster ; java.lang.Integer = org.springframework.cassandra.test.integration.CassandraRule . java.lang.Integer ; } if ( org.springframework.cassandra.test.integration.CassandraRule != null ) { org.springframework.cassandra.test.integration.Session = org.springframework.cassandra.test.integration.CassandraRule . org.springframework.cassandra.test.integration.Session ( ) ; } else if ( org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder == null ) { org.springframework.cassandra.test.integration.Session = org.springframework.cassandra.test.integration.Cluster . connect ( ) ; } else { org.springframework.cassandra.test.integration.Session = org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder . org.springframework.cassandra.test.integration.Session ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.cassandra.test.integration.CassandraRule.ResourceHolder == null ) { if ( org.springframework.cassandra.test.integration.CassandraRule == null ) { org.springframework.cassandra.test.integration.Session . close ( ) ; org.springframework.cassandra.test.integration.Cluster . closeAsync ( ) ; org.springframework.cassandra.test.integration.Cluster = null ; } else { org.springframework.cassandra.test.integration.Session . closeAsync ( ) ; } } org.springframework.cassandra.test.integration.Session = null ; }  <METHOD_END>
<METHOD_START> private void void ( Session org.springframework.cassandra.test.integration.Session , final CqlDataSet org.springframework.cassandra.test.integration.CqlDataSet ) { if ( org.springframework.cassandra.test.integration.CqlDataSet . getKeyspaceName ( ) != null && ! org.springframework.cassandra.test.integration.CqlDataSet . getKeyspaceName ( ) . equals ( org.springframework.cassandra.test.integration.Session . getLoggedKeyspace ( ) ) ) { org.springframework.cassandra.test.integration.Session . execute ( java.lang.String . java.lang.String ( STRING , org.springframework.cassandra.test.integration.CqlDataSet . getKeyspaceName ( ) ) ) ; } org.springframework.cassandra.test.integration.CqlDataSet . getCqlStatements ( ) . forEach ( org.springframework.cassandra.test.integration.Session :: execute ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) { return org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ; }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) { return org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ; }  <METHOD_END>
<METHOD_START> static org.springframework.cassandra.test.integration.CassandraRule.InvocationMode org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ( ) { return org.springframework.cassandra.test.integration.CassandraRule.InvocationMode ; }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( final Cluster org.springframework.cassandra.test.integration.Cluster , final Session org.springframework.cassandra.test.integration.Session ) { this . org.springframework.cassandra.test.integration.Cluster = org.springframework.cassandra.test.integration.Cluster ; this . org.springframework.cassandra.test.integration.Session = org.springframework.cassandra.test.integration.Session ; java.lang.Runtime . java.lang.Runtime ( ) . void ( new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { org.springframework.cassandra.test.integration.Session . close ( ) ; org.springframework.cassandra.test.integration.Cluster . close ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.cassandra.test.integration.Session . close ( ) ; org.springframework.cassandra.test.integration.Cluster . close ( ) ; }  <METHOD_END>
