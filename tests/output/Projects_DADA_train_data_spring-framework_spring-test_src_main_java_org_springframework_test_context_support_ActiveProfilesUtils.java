<METHOD_START> static java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; final java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> = new java.util.ArrayList<java.lang.String[]> <> ( ) ; java.lang.Class<org.springframework.test.context.support.ActiveProfiles> < ActiveProfiles > java.lang.Class<org.springframework.test.context.support.ActiveProfiles> = ActiveProfiles .class ; AnnotationDescriptor < ActiveProfiles > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> = MetaAnnotationUtils . findAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.ActiveProfiles> ) ; if ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> == null && org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<org.springframework.test.context.support.ActiveProfiles> . getName ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } while ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> . getRootDeclaringClass ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> . getDeclaringClass ( ) ; ActiveProfiles org.springframework.test.context.support.ActiveProfiles = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> . synthesizeAnnotation ( ) ; if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.ActiveProfiles , java.lang.Class<> . java.lang.String ( ) ) ) ; } java.lang.Class<? extends org.springframework.test.context.support.ActiveProfilesResolver> < ? extends ActiveProfilesResolver > java.lang.Class<? extends org.springframework.test.context.support.ActiveProfilesResolver> = org.springframework.test.context.support.ActiveProfiles . resolver ( ) ; if ( ActiveProfilesResolver .class == java.lang.Class<> ) { java.lang.Class<? extends org.springframework.test.context.support.ActiveProfilesResolver> = DefaultActiveProfilesResolver .class ; } ActiveProfilesResolver org.springframework.test.context.support.ActiveProfilesResolver ; try { org.springframework.test.context.support.ActiveProfilesResolver = BeanUtils . instantiateClass ( java.lang.Class<> , ActiveProfilesResolver .class ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String , java.lang.Exception ) ; } java.lang.String [] java.lang.String[] = org.springframework.test.context.support.ActiveProfilesResolver . resolve ( java.lang.Class<> ) ; if ( java.lang.String[] == null ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } java.util.List<java.lang.String[]> . boolean ( java.lang.String[] ) ; org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ActiveProfiles> = ( org.springframework.test.context.support.ActiveProfiles . inheritProfiles ( ) ? MetaAnnotationUtils . findAnnotationDescriptor ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.lang.Class<org.springframework.test.context.support.ActiveProfiles> ) : null ) ; } java.util.Collections . void ( java.util.List<java.lang.String[]> ) ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( java.lang.String [] java.lang.String[] : java.util.List<java.lang.String[]> ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } } } return StringUtils . toStringArray ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
