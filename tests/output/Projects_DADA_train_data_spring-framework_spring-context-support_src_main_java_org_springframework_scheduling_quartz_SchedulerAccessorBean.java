<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Scheduler org.springframework.scheduling.quartz.Scheduler ) { this . org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( ) { return this . org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.scheduling.quartz.BeanFactory ) { this . org.springframework.scheduling.quartz.BeanFactory = org.springframework.scheduling.quartz.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.scheduling.quartz.SchedulerException { if ( this . org.springframework.scheduling.quartz.Scheduler == null ) { this . org.springframework.scheduling.quartz.Scheduler = ( this . java.lang.String != null ? org.springframework.scheduling.quartz.Scheduler ( this . java.lang.String ) : org.springframework.scheduling.quartz.Scheduler ( ) ) ; } registerListeners ( ) ; registerJobsAndTriggers ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( java.lang.String java.lang.String ) throws org.springframework.scheduling.quartz.SchedulerException { if ( this . org.springframework.scheduling.quartz.BeanFactory instanceof ListableBeanFactory ) { ListableBeanFactory org.springframework.scheduling.quartz.ListableBeanFactory = ( ListableBeanFactory ) this . org.springframework.scheduling.quartz.BeanFactory ; java.lang.String [] java.lang.String[] = org.springframework.scheduling.quartz.ListableBeanFactory . getBeanNamesForType ( Scheduler .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Scheduler org.springframework.scheduling.quartz.Scheduler = ( Scheduler ) org.springframework.scheduling.quartz.ListableBeanFactory . getBean ( java.lang.String ) ; if ( java.lang.String . boolean ( org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) ) ) { return org.springframework.scheduling.quartz.Scheduler ; } } } Scheduler org.springframework.scheduling.quartz.Scheduler = SchedulerRepository . getInstance ( ) . lookup ( java.lang.String ) ; if ( org.springframework.scheduling.quartz.Scheduler == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } return org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( ) { if ( this . org.springframework.scheduling.quartz.BeanFactory != null ) { return this . org.springframework.scheduling.quartz.BeanFactory . getBean ( Scheduler .class ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
